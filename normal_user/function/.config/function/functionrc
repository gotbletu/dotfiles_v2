#             _   _     _      _                 _ _
#  __ _  ___ | |_| |__ | | ___| |_ _   _    __ _| (_) __ _ ___
# / _` |/ _ \| __| '_ \| |/ _ \ __| | | |  / _` | | |/ _` / __|
#| (_| | (_) | |_| |_) | |  __/ |_| |_| | | (_| | | | (_| \__ \
# \__, |\___/ \__|_.__/|_|\___|\__|\__,_|  \__,_|_|_|\__,_|___/
# |___/
#
#       DESC: ZSH/BASH Compatible Alias/Functions
#
#       http://www.youtube.com/user/gotbletu
#       https://twitter.com/gotbletu
#       https://github.com/gotbletu

# Load more Config
[ -f "$HOME/.config/privatekey/privatekeyrc" ] && source "$HOME/.config/privatekey/privatekeyrc"

# Load more PATH
[ -d "$HOME/.scripts" ] && PATH="$HOME/.scripts:$PATH"
[ -d "$HOME/.privatescripts" ] && PATH="$HOME/.privatescripts:$PATH"
[ -d "$HOME/.binjutsu/x86_64" ] && PATH="$HOME/.binjutsu/x86_64:$PATH"

# no line wrapping in less
export LESS=$LESS" -S"
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}

####################
##### SYSTEM #######
####################



#-------- Exports {{{
#------------------------------------------------------
# set display
export DISPLAY=:0

# set 256color support (doesnt work with older apps like abook)
export TERM="screen-256color"
# export TERM="xterm-256color"

# fix vlc no video issue
export VDPAU_DRIVER=va_gl

# set current operating system
case "$(uname -s)" in
    Linux*)     export OS=Linux    ;;
    Darwin*)    export OS=Mac      ;;
    CYGWIN*)    export OS=Windows  ;;
    MINGW*)     export OS=Windows  ;;
    *)          export OS="UNKNOWN:$(uname -s)"
esac

#}}}
#-------- Set Default Programs {{{
#------------------------------------------------------
# DESC: check and choose the first program in the array that is installed as the default

# find alternative apps if it is installed on your system
find_alt() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }

# set the default program
# the first program in the array that is detected on your system will be chosen as the default
export OPENER=$(find_alt open cygstart xdg-open exo-open gnome-open )
export BROWSER=$(find_alt chromium chromium-browser qutebrowser google-chrome firefox $OPENER )
export BROWSERCLI=$(find_alt w3m links2 links lynx elinks $OPENER )
export BROWSERTOR=$(find_alt tor-browser-en)
export BROWSER_PRIVATE="chromium --incognito"
export BROWSERCLI_IMAGE="w3m /usr/lib/w3m/cgi-bin/treat_as_url.cgi -o display_image=1 -o imgdisplay=w3mimgdisplay"
export COMICER=$(find_alt mcomix comix zathura $OPENER )
export EBOOKER=$(find_alt ebook-viewer $OPENER )
export EDITOR=$(find_alt vim vi emacs nano leafpad gedit pluma $OPENER )
export EDITORGUI=$(find_alt mousepad leafpad gedit pluma $OPENER )
export WORDPROCESSOR=$(find_alt wordgrinder $OPENER )
export FILEMANAGER=$(find_alt pcmanfm thunar nautilus dolphin spacefm enlightenment_filemanager $OPENER )
export FILEMANAGERCLI=$(find_alt ranger vifm mc $OPENER )
export MUSICER=$(find_alt mpv mplayer mpg123 cvlc $OPENER )
export PAGER=$(find_alt less more most)
export PLAYER=$(find_alt mpv mplayer ffplay cvlc $OPENER )
export READER=$(find_alt mupdf zathura evince $OPENER )
export ROOTER=$(find_alt gksudo kdesudo )
# http://vim.wikia.com/wiki/Using_vim_as_a_man-page_viewer_under_Unix
# https://zameermanji.com/blog/2012/12/30/using-vim-as-manpager/
# https://vi.stackexchange.com/questions/4682/how-can-i-suppress-the-reading-from-stdin-message-from-within-vim
export MANPAGER="/bin/sh -c \"col -b | vim --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -\""
# export MANPAGER="nvim +set\ filetype=man -"
# export MANWIDTH='100'
export URLPORTAL=~/.scripts/urlportal
# export RTV_BROWSER=~/.scripts/urlportal.sh
export RTV_BROWSER=$URLPORTAL
export IMAGEVIEWER=$(find_alt sxiv feh ristretto display eog $OPENER )
export TTY_IMAGEVIEWER=fbi
export TTY_PLAYER=$(mpv -vo fbdev)
export QUEUER=$(find_alt tsp fq ts )
export TERMER=$(find_alt urxvt xterm uxterm termite sakura lxterminal terminator mate-terminal pantheon-terminal konsole gnome-terminal xfce4-terminal $OPENER )




# }}}
#-------- Bash Color Code {{{
#------------------------------------------------------
# DESC: color code for bash compatible shell
# LINK: https://wiki.archlinux.org/index.php?title=Bash/Prompt_customization&oldid=419076#List_of_colors_for_prompt_and_Bash

# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[10;95m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

# }}}
#-------- Blinking Bash Color Code {{{
#------------------------------------------------------
# DESC: blinking color code for bash compatible shell, only works on some terminals e.g xterm, urxvt

# Regular Colors
Blink_Black='\e[0;30;5m'        # Black
Blink_Red='\e[0;31;5m'          # Red
Blink_Green='\e[0;32;5m'        # Green
Blink_Yellow='\e[0;33;5m'       # Yellow
Blink_Blue='\e[0;34;5m'         # Blue
Blink_Purple='\e[0;35;5m'       # Purple
Blink_Cyan='\e[0;36;5m'         # Cyan
Blink_White='\e[0;37;5m'        # White

# Bold
Blink_BBlack='\e[1;30;5m'       # Black
Blink_BRed='\e[1;31;5m'         # Red
Blink_BGreen='\e[1;32;5m'       # Green
Blink_BYellow='\e[1;33;5m'      # Yellow
Blink_BBlue='\e[1;34;5m'        # Blue
Blink_BPurple='\e[1;35;5m'      # Purple
Blink_BCyan='\e[1;36;5m'        # Cyan
Blink_BWhite='\e[1;37;5m'       # White

# Underline
Blink_UBlack='\e[4;30;5m'       # Black
Blink_URed='\e[4;31;5m'         # Red
Blink_UGreen='\e[4;32;5m'       # Green
Blink_UYellow='\e[4;33;5m'      # Yellow
Blink_UBlue='\e[4;34;5m'        # Blue
Blink_UPurple='\e[4;35;5m'      # Purple
Blink_UCyan='\e[4;36;5m'        # Cyan
Blink_UWhite='\e[4;37;5m'       # White

# Background
Blink_On_Black='\e[40;5m'       # Black
Blink_On_Red='\e[41;5m'         # Red
Blink_On_Green='\e[42;5m'       # Green
Blink_On_Yellow='\e[43;5m'      # Yellow
Blink_On_Blue='\e[44;5m'        # Blue
Blink_On_Purple='\e[45;5m'      # Purple
Blink_On_Cyan='\e[46;5m'        # Cyan
Blink_On_White='\e[47;5m'       # White

# High Intensity
Blink_IBlack='\e[0;90;5m'       # Black
Blink_IRed='\e[0;91;5m'         # Red
Blink_IGreen='\e[0;92;5m'       # Green
Blink_IYellow='\e[0;93;5m'      # Yellow
Blink_IBlue='\e[0;94;5m'        # Blue
Blink_IPurple='\e[0;95;5m'      # Purple
Blink_ICyan='\e[0;96;5m'        # Cyan
Blink_IWhite='\e[0;97;5m'       # White

# Bold High Intensity
Blink_BIBlack='\e[1;90;5m'      # Black
Blink_BIRed='\e[1;91;5m'        # Red
Blink_BIGreen='\e[1;92;5m'      # Green
Blink_BIYellow='\e[1;93;5m'     # Yellow
Blink_BIBlue='\e[1;94;5m'       # Blue
Blink_BIPurple='\e[1;95;5m'     # Purple
Blink_BICyan='\e[1;96;5m'       # Cyan
Blink_BIWhite='\e[1;97;5m'      # White

# High Intensity backgrounds
Blink_On_IBlack='\e[0;100;5m'   # Black
Blink_On_IRed='\e[0;101;5m'     # Red
Blink_On_IGreen='\e[0;102;5m'   # Green
Blink_On_IYellow='\e[0;103;5m'  # Yellow
Blink_On_IBlue='\e[0;104;5m'    # Blue
Blink_On_IPurple='\e[10;95;5m'  # Purple
Blink_On_ICyan='\e[0;106;5m'    # Cyan
Blink_On_IWhite='\e[0;107;5m'   # White

# }}}
#-------- Set Path {{{
#------------------------------------------------------

# http://askubuntu.com/questions/49784/how-is-bin-added-to-my-path
# Local installed package
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/.screenlayout" ] ; then
	PATH="$HOME/.screenlayout:$PATH"
fi
# if [ -d "$HOME/.config/vifm/scripts" ] ; then
# 	PATH="$HOME/.config/vifm/scripts:$PATH"
# fi

# Go Packages (Golang)
export GOPATH=~/.go
export PATH="$PATH:$GOPATH/bin"

# NPM NodeJS Packages
if [ -d "$HOME/node_modules/.bin" ] ; then
    export PATH="$HOME/node_modules/.bin:$PATH"
fi

# User Scripts
if [ -d "$HOME/.scripts" ] ; then
    export PATH="$HOME/.scripts:$PATH"
fi


# }}}
#-------- Configurations {{{
#------------------------------------------------------
cfg-abookrc() { $EDITOR ~/.abook/abookrc ;}
cfg-addressbook() { $EDITOR ~/.abook/addressbook ;}
cfg-autostartrc() { $EDITOR ~/.autostartrc ;}
cfg-aria2() { $EDITOR ~/.config/aria2/aria2.conf ;}
cfg-bashrc() { $EDITOR ~/.bashrc ;}
cfg-blocklist() { $EDITOR ~/.scripts/blocklist.sh ;}
cfg-castero() { $EDITOR ~/.config/castero/castero.conf ;}
cfg-cava() { $EDITOR ~/.config/cava/config ;}
cfg-clonezilla() { sudo $EDITOR /etc/drbl/drbl.conf ;}
# https://wiki.archlinux.org/index.php/Cursor_Themes#Choosing_and_Configuring_Cursor_Themes
cfg-comp() { $EDITOR ~/.config/mpv/settings.ini ;}
cfg-cheat() { $EDITOR ~/.config/cheat/conf.yml;}
cfg-cursor() { $EDITOR ~/.icons/default/index.theme ;}
cfg-cursor-list() { ls ~/.icons ;}
cfg-elinks() { $EDITOR ~/.elinks/elinks.conf ;}
cfg-emacs() { $EDITOR ~/.emacs ;}
cfg-emulationstation() { $EDITOR ~/.emulationstation/es_systems.cfg ;}
cfg-emulationstation-input() { $EDITOR ~/.emulationstation/es_input.cfg ;}
cfg-fanficfare() { $EDITOR ~/.fanficfare/personal.ini ;}
cfg-flexget() { $EDITOR ~/.flexget/config.yml ;}
cfg-fstab() { sudo $EDITOR /etc/fstab ;}
cfg-functionrc() { $EDITOR ~/.config/function/functionrc ;}
cfg-greenclip() { killall greenclip ; $EDITOR ~/.config/greenclip.cfg && nohup greenclip daemon > /dev/null 2>&1 & }
cfg-group() { sudo $EDITOR /etc/group ;}
cfg-grub() { sudo $EDITOR /etc/default/grub ;}
cfg-hosts() { sudo $EDITOR /etc/hosts ;}
cfg-hyperterminal() { $EDITOR ~/.hyper.js ;}
cfg-i3wm() { $EDITOR ~/.i3/config ;}
cfg-inputrc() { $EDITOR ~/.inputrc ;}
cfg-internetarchive() { $EDITOR ~/.config/ia.ini ;} # archive.org downloader https://internetarchive.readthedocs.io/en/latest/
cfg-keynavrc() { $EDITOR ~/.keynavrc ;}
cfg-keynav-macros() { $EDITOR ~/.keynav_macros ;}
cfg-kodi-keyboard() { $EDITOR ~/.kodi/userdata/keymaps/keyboard.xml ;}
cfg-kodi-confluencethumbnailview() { sudo $EDITOR /usr/share/kodi/addons/skin.confluence/720p/MyVideoNav.xml ;}
cfg-lf() { $EDITOR ~/.config/lf/lfrc ;}
cfg-lgogdownloader() { $EDITOR ~/.config/lgogdownloader/config.cfg ;}
cfg-livestreamer() { $EDITOR ~/.livestreamerrc ;}
cfg-mailcap() { $EDITOR ~/.mailcap ;}
cfg-mbsyncrc() { $EDITOR ~/.mbsyncrc ;}
cfg-mc() { $EDITOR ~/.config/mc/ini ;}
cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap ;}
cfg-mcomix() { $EDITOR ~/.config/mcomix/keybindings.conf ;}
cfg-megarc() { $EDITOR ~/.megarc ;}
cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf ;}
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf ;}
cfg-mocp() { $EDITOR ~/.moc/config ;}
cfg-muttrc() { $EDITOR ~/.muttrc ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
cfg-nap() { $EDITOR ~/.nap/napconf ;}
cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
cfg-ncpamixer() { $EDITOR ~/.ncpamixer.conf ;}
cfg-netrc() { $EDITOR ~/.netrc;}
cfg-networkmanager() { sudo $EDITOR /etc/NetworkManager/NetworkManager.conf ;}
cfg-newsboat() { $EDITOR ~/.newsboat/config ;}
cfg-newsboat-queue() { $EDITOR ~/.newsboat/queue ;}
cfg-newsboat-urls() { $EDITOR ~/.newsboat/urls ;}
cfg-nvim() { $EDITOR ~/.config/nvim/init.vim ;}
cfg-pacman() { sudo $EDITOR /etc/pacman.conf ;}
cfg-pacman-mirrorlist() { sudo $EDITOR /etc/pacman.d/mirrorlist ;}
cfg-pastebinit() { $EDITOR ~/.pastebinit.xml ;}
cfg-pianobar() { $EDITOR ~/.config/pianobar/config ;}
cfg-pianobar-libao() { sudo $EDITOR /etc/libao.conf ;}
cfg-powershell() { $EDITOR ~/.config/powershell/Microsoft.PowerShell_profile.ps1 ;}
cfg-privatekeyrc() { $EDITOR ~/.config/privatekey/privatekeyrc ;}
cfg-profile() { $EDITOR ~/.profile ;}
cfg-pulseaudio() { sudo $EDITOR /etc/pulse/default.pa ;}
cfg-pyload() { $EDITOR ~/.pyload/pyload.conf ;}
cfg-pyradio() { $EDITOR ~/.pyradio/stations.csv ;}
cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
cfg-quicktile() { $EDITOR ~/.config/quicktile.cfg ;}
cfg-quvi() { $EDITOR ~/.config/quvi/quvirc ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
cfg-redshift() { $EDITOR ~/.config/redshift/redshift.conf ;}
cfg-retroarch() { $EDITOR ~/.config/retroarch/retroarch.cfg ;}
cfg-rofibangs() { $EDITOR ~/.config/rofi/launchers/rofi-bangs ;}
cfg-rtv() { $EDITOR ~/.config/rtv/rtv.cfg ;}
cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
cfg-skippyxd() { $EDITOR ~/.skippy-xd.rc ;}
cfg-slrnrc() { $EDITOR ~/.slrnrc ;}
cfg-ssh-client() { sudo $EDITOR /etc/ssh/ssh_config ;}
cfg-ssh-daemon() { sudo $EDITOR /etc/ssh/sshd_config ;}
cfg-stig() { $EDITOR ~/.config/stig/rc ;}
cfg-streamlink() { $EDITOR ~/.streamlinkrc ;}
cfg-sudoers() { sudo $EDITOR /etc/sudoers ;}
cfg-bookmarks() { $EDITOR ~/.config/surfraw/bookmarks ;}
cfg-surfraw() { $EDITOR ~/.config/surfraw/conf ;}
cfg-syncthing() { $EDITOR ~/.config/syncthing/config.xml ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
cfg-torrc() { sudo $EDITOR /etc/tor/torrc ;}
cfg-torrc-user() { $EDITOR ~/.torrc ;}
cfg-torrentflix() { torrentflix --config=$EDITOR ;}
cfg-transmission-daemon() { $EDITOR ~/.config/transmission-daemon/settings.json ;}
cfg-transmission-ncurse() { $EDITOR ~/.config/transmission-remote-cli/settings.cfg ;}
cfg-transmission-tremc() { $EDITOR ~/.config/tremc/settings.cfg ;}
cfg-turses() { $EDITOR ~/.turses/config ;}
cfg-urlview() { $EDITOR ~/.urlview ;}
cfg-updatedb() { sudo $EDITOR /etc/updatedb.conf ;}
cfg-vifmrc() { $EDITOR ~/.config/vifm/vifmrc ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
cfg-w3m() { $EDITOR ~/.w3m/config ;}
cfg-w3m-keymap() { $EDITOR ~/.w3m/keymap ;}
cfg-w3m-mailcap() { $EDITOR ~/.w3m/mailcap ;}
cfg-w3m-urimethodmap() { $EDITOR ~/.w3m/urimethodmap ;}
cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys ;}
cfg-xboxdrv() { sudo $EDITOR /etc/default/xboxdrv ;}
cfg-xmodmap() { $EDITOR ~/.Xmodmap ;}
cfg-xresources() { $EDITOR ~/.Xresources ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}


# http://blog.dotsmart.net/2011/09/30/change-font-size-in-chrome-devtools/
cfg-chromium-devtoolsize() { $EDITOR ~/.config/chromium/Default/User\ StyleSheets/Custom.css ;}
cfg-chromium-noscript() { $EDITOR ~/.config/chromium/Default/Extensions/odjhifogjcknibkahlpidmdajjpkkcfn/*/CHANGE__PASSWORD__HERE.js ;}
cfg-timidity() { sudo $EDITOR /etc/timidity++/timidity.cfg ;}
cfg-xdg-mine() { $EDITOR ~/.local/share/applications/mimeapps.list ;}

#}}}
#-------- Configurations Reload {{{
#------------------------------------------------------
rld-bashrc() { source ~/.bashrc ;}
rld-font() { fc-cache -v -f ;}
rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
rld-greenclip() { killall greenclip ; nohup greenclip daemon > /dev/null 2>&1 & }
rld-keynav() { killall keynav ; keynav daemonize ;}
rld-updatedb() { sudo updatedb ;}
rld-rawdog() { rawdog -Wuwv ;}
rld-xbindkeys() { killall xbindkeys ; xbindkeys ;}
rld-hyperkey() { xmodmap ~/.Xmodmap; killall xcape ; xcape -e 'Hyper_L=Return' ; killall xbindkeys ; xbindkeys ;}
rld-xcape() { killall xcape ; xcape -e 'Hyper_L=Return' ;}
rld-xdefaults() { xrdb ~/.Xdefaults ;}
rld-xmodmap() { xmodmap ~/.Xmodmap ;}
rld-xmodmap-uskeyboardlayout() { setxkbmap -layout us ;} # reset back to US keyboard http://unix.stackexchange.com/a/151046
rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}
rld-samba() { sudo systemctl restart nmb.service smb.service ;}
# }}}
#-------- Derez Files {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

derez-greenclip() { killall greenclip ; rm ~/.cache/greenclip.history && nohup greenclip daemon > /dev/null 2>&1 & }


# }}}
#-------- Alias (Substitution) {{{
#------------------------------------------------------
# DESC: alias for mainly existing commands

# if [ -f "/usr/lib/w3m/cgi-bin/treat_as_url.cgi" ] ; then
#     alias w3m="w3m /usr/lib/w3m/cgi-bin/treat_as_url.cgi"
# fi
alias bc='bc -q -l'					# dont show opening msg, use math library
# alias cal='cal -3 | grep --color -EC6 "\b$(date +%e | sed "s/ //g")"' # show calendar for 3 months
# alias cal='cal | grep --before-context 6 --after-context 6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cal='cal -3 | grep -B6 -A6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias cp='cp -aiv'					# cp prompt confirmation
alias df='df -hT --total | head -n 1 && df -hT --total | sed '1d' | sort'	# human readable, print filetype, and total
alias du='du -d1 -h'					# max depth, human readable
alias emacs='emacs -nw'					# cli mode
alias feh='feh --auto-zoom --scale-down -g 1360x768 -B white'
alias free='free -h'					# human readable
alias info='info --vi-keys'				# GNU info act like man command
alias ln='ln -iv'
# alias lsblk='lsblk -o "TRAN,NAME,HOTPLUG,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID,MODEL,SERIAL"'
alias mkdir='mkdir -p -v'				# create if not exist, verbose
alias mocp='padsp mocp'                                 # moc player working with pulseaudio
alias mount='mount | column -t'				# align in column
alias nano='nano -c -$'					# word wrapping
# alias nvlc='nvlc --no-color'				# vlc black/white color
alias periscope='periscope -l en'			# get english subtitles
alias pdfgrep='pdfgrep -in'				# ignorecase, page number
alias qcp='qcp -f do'                                   # renameutils bulk copy (destination column only)
alias qmv='qmv -f do'                                   # renameutils bulk rename (destination column only)
alias rmdir='rmdir -v'			                # rm empty directory only
alias sr='sr -browser=$BROWSERCLI'			# open in cli browser
alias surfraw='surfraw -browser=$BROWSER'		# open in gui browser
alias wget='wget -N -c'					# continues/resumes
alias youtube-viewer='youtube-viewer -C -7 --results=6 --video-player=mpv --append-arg="--ontop --no-border --force-window --autofit=500x280 --geometry=-15-53"' # color, fullscreen, 720p, number of results
alias visudo='sudo EDITOR="$EDITOR" visudo'

alias derez='rm -Iv'			                # rm interactive, prompt once only
alias uhaul='mv -iv --'					# mv prompt confirmation

# color for common commands
# tutorial video: http://www.youtube.com/watch?v=RbVCzxnKJL4
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## }}}
#-------- Alias (Good List) {{{
#------------------------------------------------------
# DESC: custom alias

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias t="todo.sh"                                       # todotxt.sh program
alias trash='trash-put -v'
# alias vless="/usr/share/vim/vim81/macros/less.sh"       # vim as a pager
# alias vless="vim --not-a-term -c 'set nomod nolist noma' -"
alias vless="vim --not-a-term -c 'set nomod nolist' -"
# }}}
#-------- Functions (Oneliner) {{{
#------------------------------------------------------

# cpbak() { cp $1{,.bak} ;}		          # create backup copy
down4me() { curl -s "http://downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g' ;}   # check if a website is down
killall-zombies() { kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }') ;}  # kill zombie process
mkcd() { mkdir -p -- "$1"; cd "$_" ;}	          # create folder then cd into it
# nohup-command() { nohup "$@" >/dev/null 2>&1& }   # background a process w/o error msg filling screen
open() { "$OPENER" "$@" > /dev/null 2>&1 ;}        # open with default GUI program
# cbrit() { rar a -r "${1%/}.cbr" "$1" ;}           # create cbr archive for comicbooks/manga
# cbzit() { zip -r "${1%/}.cbz" "$1" ;}             # create cbz archive for comicbooks/manga

# }}}
#-------- Functions (Good List) {{{
#------------------------------------------------------
# DESC: custom functions

update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-list() {
  RED='\033[0;31m'
  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
}

# DESC: color the manpages
# DEMO: http://www.youtube.com/watch?v=9BFaLAa428k
# LINK: https://wiki.archlinux.org/index.php/Man_page#Colored_man_pages
# man() {
#   env LESS_TERMCAP_mb=$'\E[01;31m' \
#   LESS_TERMCAP_md=$'\E[01;31m' \
#   LESS_TERMCAP_me=$'\E[0m' \
#   LESS_TERMCAP_se=$'\E[0m' \
#   LESS_TERMCAP_so=$'\E[01;44;33m' \
#   LESS_TERMCAP_ue=$'\E[0m' \
#   LESS_TERMCAP_us=$'\E[01;32m' \
#   man "$@"
# }




# }}}
#-------- System Information {{{
#------------------------------------------------------
m-sound() { arecord -L && arecord -l && cat /proc/asound/pcm ;} #List audio capture card/mic

#}}}
#-------- Gotbletu Universal Package Manager {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=N8CZhlIssdk
# DESC: auto detect package manager and loads proper alias for it

# legends# {{{
# https://wiki.archlinux.org/index.php/Pacman_Rosetta
# http://old-en.opensuse.org/Software_Management_Command_Line_Comparison
# https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
# Arch			-- pacman, yaourt
# Debian/Ubuntu		-- apt-get(apt), aptitude, dpkg
# Gentoo		-- eclean, emerge, equery, layman
# OpenSuse		-- zypper
# Red Hat/Fedora	-- package-cleanup, rpm, yum
# Suse			-- rug
# Not finish, only tested on Debian, Arch, Fedora so far

# cleanold; removes certain packages that can no longer be downloaded
# cleanall; remove all local cached packages
# list; show the content of an installed package
# localinstall; install package manually such as deb, rpm files downloaded
# own; find a command a package belongs to; ex: pkm-own convert
# purge; uninstall package and purge configuration files (not in /home)
# query; search for an already installed package
# refresh; update repository list
# upgrade; install the newest version from the repositories
# hold/unhold; stop/allow a package from being update
#
# missing
# emerge: autoclean, purge, list, query
# rug: pkm-info, clean, autoremove, autoclean, purge, list, query
# zypper: pkm-info, autoremove, autoclean, purge, list, query
# yum: autoclean, purge
# }}}

find_pkm() { for i;do command -v "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }
export PKMGR=$(find_pkm yaourt yay pacaur pacman aptitude apt-get yum zypper emerge)

# {{{ apt-get
if [ "$PKMGR" = "apt-get" ]; then
  pkm-cleanallall() { sudo apt-get clean ;}
  pkm-cleanallold() { sudo apt-get autoclean ;}
  pkm-dependsreverse() { apt-cache rdepends "$@" ;}
  pkm-download() { wget $(apt-get --print-uris -y install "$@" | grep ^\'| cut -d\' -f2) ;}
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  # same as; echo "pkgname hold" | dpkg --set-selections
  pkm-hold() { sudo apt-mark hold "$@" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { apt-cache show "$@" ;}
  pkm-install() { sudo apt-get install --no-install-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo apt-get purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo apt-get update ;}
  pkm-remove() { sudo apt-get remove "$@" ;}
  pkm-remove-orphans() { sudo apt-get autoclean ;}
  pkm-search() { apt-cache search "$@" ;}
  pkm-unhold() { sudo apt-mark unhold "$@" ;}
  pkm-upgrade() { sudo apt-get update && sudo apt-get upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  # auto get missing gpg keys from launchpad
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
    # these are extra servers, just replace it if one is down
    # keyserver.ubuntu.com
    # pool.sks-keyservers.net
    # subkeys.pgp.net
    # pgp.mit.edu
    # keys.nayr.net
    # keys.gnupg.net
    # wwwkeys.en.pgp.net #(replace with your country code fr, en, de,etc)
# }}}
# {{{ aptitude
elif [ "$PKMGR" = "aptitude" ]; then
  pkm-cleanallall() { sudo aptitude clean ;}
  pkm-cleanallold() { sudo aptitude autoclean ;}
  pkm-dependsreverse() { aptitude why "$@" ;}
  pkm-download() { aptitude download "$@" ;} # need a better 1; deb w/ depends
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  pkm-hold() { echo "$1 hold" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /hold/" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { aptitude show "$@" ;}
  pkm-install() { sudo aptitude install --without-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo aptitude purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo aptitude update ;}
  pkm-remove() { sudo aptitude remove "$@" ;}
  pkm-remove-orphans() { sudo aptitude autoclean ;}
  pkm-search() { aptitude search "$*" ;}
    # fix  maybe with keyword $@ | sed / / ~d/
  pkm-search-description() { aptitude search ~d"$1"~d"$2"~d"$3"~d"$4"~d"$5"~d"$6"~d"$7" ;}
  pkm-unhold() { echo "$1 install" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /install/" ;}
  pkm-upgrade() { sudo aptitude update && sudo aptitude upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
# }}}
# {{{ emerge
elif [ "$PKMGR" = "emerge" ]; then
  pkm-remove-orphans() { sudo emerge --depclean ;}
  pkm-cleanall() { sudo eclean distfiles ;}
  pkm-info() { emerge -S "$@" ;}
  pkm-install() { sudo emerge "$@" ;}
  pkm-pkgsearch() { equery belongs "$@" ;}
  pkm-refresh() { sudo layman -f ;}
  pkm-remove() { sudo emerge -C "$@" ;}
  pkm-search() { emerge -S "$@" ;}
  pkm-upgrade() { sudo emerge -u world ;}
# }}}
# {{{ pacaur
elif [ "$PKMGR" = "pacaur" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { pacaur -Sc ;}
  pkm-cleanold() { pacaur -Scc ;}
  if type -p downgrade > /dev/null; then
    # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    pacaur -Qi $arg 2> /dev/null \
    || pacaur -Si $arg; done ;}
  pkm-install() { pacaur --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacaur -Qql "$@" ;}
  pkm-listinstalled() { pacaur -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { pacaur -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacaur -Qs "$@" ;}
  pkm-refresh() { pacaur -Syy ;}
  pkm-remove() { pacaur -Rcs "$@" ;}
  pkm-remove-nodepends() { pacaur -Rdd "$@" ;}
  pkm-remove-orphans() { pacaur -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacaur -Qs "$@" && pacaur -s "$@" ;}
  pkm-search-local() { pacaur -Qs "$@" ;}
  pkm-upgrade() { pacaur -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { pacaur --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ pacman
elif [ "$PKMGR" = "pacman" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { sudo pacman -Sc ;}
  pkm-cleanold() { sudo pacman -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;}
  pkm-info() { for arg in "$@"; do
    pacman -Qi $arg 2> /dev/null \
    || pacman -Si $arg; done ;}
  pkm-install() { sudo pacman -S "$@" ;}
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacman -Qql "$@" ;}
  pkm-listinstalled() { pacman -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { sudo pacman -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacman -Qs "$@" ;}
  pkm-refresh() { sudo pacman -Syy ;}
  pkm-remove() { sudo pacman -Rcs "$@" ;}
  pkm-remove-nodepends() { sudo pacman -Rdd "$@" ;}
  pkm-remove-orphans() { sudo pacman -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacman -Ss "$@" ;}
  pkm-search-local() { pacman -Qs "$@" ;}
  pkm-upgrade() { sudo pacman -Syu ;}
# }}}
# {{{ rug
elif [ "$PKMGR" = "rug" ]; then
  pkm-install() { sudo rug install "$@" ;}
  pkm-refresh() { sudo rug refresh ;}
  pkm-remove() { sudo rug remove "$@" ;}
  pkm-search() { rug search "$@" ;}
  pkm-upgrade() { sudo rug update ;}
# }}}
# {{{ yay
elif [ "$PKMGR" = "yay" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { yay -Sc ;}
  pkm-cleanold() { yay -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    yay -Qi $arg 2> /dev/null \
    || yay -Si $arg; done ;}
  pkm-install() { yay --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { yay -Qql "$@" ;}
  pkm-listinstalled() { yay -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { yay -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { yay -Qs "$@" ;}
  pkm-refresh() { yay -Syy ;}
  pkm-remove() { yay -Rcs "$@" ;}
  pkm-remove-nodepends() { yay -Rdd "$@" ;}
  pkm-remove-orphans() { yay -Rs $(pacman -Qqtd) ;}
  pkm-search() { yay --noconfirm "$@" ;}
  pkm-search-local() { yay -Qs "$@" ;}
  pkm-upgrade() { yay -Syu ;}	# upgrade everything except aur package
  pkm-upgrade-aur() { yay --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ yum
elif [ "$PKMGR" = "yum" ]; then
  pkm-cleanall() { sudo yum clean ;}
  pkm-depends() { sudo yum deplist "$@" ;}
  pkm-dependsreverse() { sudo yum resolvedep "$@" ;}
  pkm-info() { for arg in "$@"; do
    rpm -qi $arg 2> /dev/null || yum info $arg; done ;}
  pkm-install() { sudo yum install "$@" ;}
  pkm-list() { for arg in "$@"; do
    rpm -ql $arg 2> /dev/null || repoquery -ql --plugins $arg; done ;}
  pkm-localinstall() { sudo yum localinstall "$@" ;}
  pkm-own() { rpm -qf $(which "$@") ;}
  pkm-pkgsearch() { yum whatprovides "$@" ;}
  pkm-query() { rpm -q "$@" ;}
  pkm-refresh() { sudo yum clean expire-cache && sudo yum check-update ;}
  pkm-remove() { sudo yum remove "$@" ;}
  pkm-remove-orphans() { sudo package-cleanup --leaves ;}
  pkm-search() { yum search "$@" ;}
  pkm-upgrade() { sudo yum update ;}
# }}}
# {{{ zypper
elif [ "$PKMGR" = "zypper" ]; then
  pkm-cleanall() { sudo zypper clean ;}
  pkm-install() { sudo zypper install "$@" ;}
  pkm-pkgsearch() { zypper what-provides "$@" ;}
  pkm-refresh() { sudo zypper refresh ;}
  pkm-remove() { sudo zypper remove "$@" ;}
  pkm-search() { zypper search "$@" ;}
  pkm-upgrade() { sudo zypper update ;}
fi
# }}}

#}}}

####################
##### GRAPHICS #####
####################

# #-------- Image Resizer & Rotate {{{
# #------------------------------------------------------
# # Resizing Pictures to different resolutions
#
# image-resizer() {
#   if [ $# -lt 2 ]; then
#     echo -e "resize pictures to another resolution"
#     echo -e "\nUsage: $0 <size:32x32|96x96|128x128|640x480|800x600|1024x768|1280x720|1280x960|1920x1080> <image>"
#     echo -e "\nExample:\n$0 800x600 pic1.png pic2.png pic3.png"
#     echo -e "$0 640x480 *.jpg"
#     return 1
#   fi
#   IMAGE_SIZE="$1"
#   myArray=( "$@" )
#   for arg in "${myArray[@]:1}"; do
#     convert "$arg" -resize "$IMAGE_SIZE" "${arg%.*}"_"$IMAGE_SIZE"_resized."${arg##*.}"
#   done
# }
#
# image-rotate() {
#   if [ $# -lt 2 ]; then
#     echo -e "rotate pictures"
#     echo -e "\nUsage:   $0 <90|180|270> <image>"
#     echo -e "\nExample: $0 90 pic1.png pic2.png pic3.png"
#     echo -e "           $0 180 *.jpg"
#     return 1
#   fi
#   IMAGE_DEGREE="$1"
#   myArray=( "$@" )
#   for arg in "${myArray[@]:1}"; do
#     convert "$arg" -rotate "$IMAGE_DEGREE" "${arg%.*}"_"$IMAGE_DEGREE"_rotated."${arg##*.}"
#   done
# }
# image-join() {
#   if [ $# -lt 1 ]; then
#     echo -e "concatenate multiple images into one single png"
#     echo -e "Usage: $0 <images>"
#     echo -e "\nExample:\n$0 file1.jpg file2.png file3.jpeg"
#     echo -e "$0 *.jpg"
#     echo -e "$0 *.png"
#     return 1
#   fi
#   convert -append "$@" "${1%.*}"_joined.png
# }
#
# # }}}

####################
##### INTERNET #####
####################

#-------- Youtube-dl (Stream|Download|RipAudio) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=MFxlwVhwayg
# DESC: download/stream media from many online sites
youtube-dl-stream() { youtube-dl -o - "$1" | $PLAYER - ;}


youtube-dl-best() { youtube-dl --restrict-filenames -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio" -o "%(title)s.%(ext)s" "$@" ;}
alias youtube-dl-thumbnail='youtube-dl --write-thumbnail --skip-download '
alias youtube-dl-480='youtube-dl -f "bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]" '
alias youtube-dl-720='youtube-dl -f "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]" '
alias youtube-dl-4k='echo -e "This will transcode the video from webm to h264 which could take a long time\n\n"; youtube-dl -f "bestvideo[ext=webm]+bestaudio[ext=m4a]" --recode-video mp4 '
# alias youtube-dl-mp3='youtube-dl --extract-audio -f bestaudio[ext=mp3] --no-playlist '
alias youtube-dl-mp3='youtube-dl --ignore-errors --format bestaudio --extract-audio --audio-format mp3 --audio-quality 160K --output "%(title)s.%(ext)s"'


# DESC: convert youtube to audio (youtube.com only)
# -f 171 = webm audio (vorbis)
# -f 140 = m4a (aac)
yt2ogg() { youtube-dl --restrict-filenames -x --audio-format vorbis -o "%(title)s.%(ext)s" "$@" ;}
yt2wav() { youtube-dl --restrict-filenames -x --audio-format wav -o "%(title)s.%(ext)s" "$@" ;}
yt2mp3() { youtube-dl --restrict-filenames -x --audio-format mp3 -o "%(title)s.%(ext)s" "$@" ;}
yt2webmaudio() { youtube-dl --restrict-filenames -o "%(title)s.%(ext)s" -f 171 "$@" ;}
yt2m4a() { youtube-dl --restrict-filenames -o "%(title)s.%(ext)s" -f 140 "$@" ;}
yt2webm() { youtube-dl --restrict-filenames -o '%(title)s.%(ext)s' -f 248+251 "$@" ;}
yt2webmhighdesc() {
  GET_FORMAT=$(youtube-dl -F "$@" )
  VIDEO_ID=$(echo "$GET_FORMAT" | awk '/webm/ && /video only/ {print $1}' | tail -1)
  AUDIO_ID=$(echo "$GET_FORMAT" | awk '/webm/ && /audio only/ {print $1}' | tail -1)

  # youtube-dl -c --restrict-filenames -o '%(title)s.%(ext)s' -f 248+251 "$@" 
  youtube-dl -c --restrict-filenames -o '%(title)s.%(ext)s' -f "$VIDEO_ID"+"$AUDIO_ID" "$@" 
  TITLE=$(youtube-dl --get-title "$@")
  DURATION=$(youtube-dl --get-duration "$@")
  DESC=$(youtube-dl --get-description "$@")
  echo "$TITLE" >> "$TITLE".txt
  echo "$1" >> "$TITLE".txt
  echo "$DURATION" >> "$TITLE".txt
  echo "$DESC" >> "$TITLE".txt

}
yt2mp4highdesc() {
  GET_FORMAT=$(youtube-dl -F "$@" )
  VIDEO_ID=$(echo "$GET_FORMAT" | awk '/mp4/ && /video only/ {print $1}' | tail -1)
  AUDIO_ID=$(echo "$GET_FORMAT" | awk '/m4a/ && /audio only/ {print $1}' | tail -1)

  # youtube-dl -c --restrict-filenames -o '%(title)s.%(ext)s' -f 137+140 "$@" 
  youtube-dl -c --restrict-filenames -o '%(title)s.%(ext)s' -f "$VIDEO_ID"+"$AUDIO_ID" "$@" 
  TITLE=$(youtube-dl --get-title "$@")
  DURATION=$(youtube-dl --get-duration "$@")
  DESC=$(youtube-dl --get-description "$@")
  echo "$TITLE" >> "$TITLE".txt
  echo "$1" >> "$TITLE".txt
  echo "$DURATION" >> "$TITLE".txt
  echo "$DESC" >> "$TITLE".txt

}

# https://askubuntu.com/a/965815
yt2allwebm() {
  youtube-dl -i --all-subs --embed-subs --embed-thumbnail --add-metadata --merge-output-format webm --format 'bestvideo[ext=webm]+bestaudio[ext=webm]' "$@"
  TITLE=$(youtube-dl --get-title "$1")
  DESC=$(youtube-dl --get-duration --get-description "$1")
    echo "$TITLE\n$1\n\n$DESC" >> "$TITLE".txt
}
ytbackup() {
  # cat urllist.txt | while read -r line; do echo "$line"
  cat urllist.txt | while read -r line; do 
  youtube-dl -i --all-subs --embed-subs --embed-thumbnail --add-metadata --merge-output-format mp4 --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' "$line"
  TITLE=$(youtube-dl --get-title "$line")
  DESC=$(youtube-dl --get-duration --get-description "$line")
    echo "$TITLE\n$1\n\n$DESC" >> "$TITLE".txt
  done
}
yt2allmp4() {
  youtube-dl -i --all-subs --embed-subs --embed-thumbnail --add-metadata --merge-output-format mp4 --format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' "$@"
  TITLE=$(youtube-dl --get-title "$1")
  DESC=$(youtube-dl --get-duration --get-description "$1")
    echo "$TITLE\n$1\n\n$DESC" >> "$TITLE".txt
}

# }}}
#-------- RipMe CLI (Bulk Image Downloader) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=gX9-tYGB-mY
# DESC: image album downloader for wallpaper, comic, hentai, manga
# LINK: https://github.com/ripmeapp/ripme/releases


PATH_RIPME=~/.bin/ripme/ripme.jar
ripme-help() { java -jar $PATH_RIPME -h ;}
ripme-supported() { w3m -dump https://github.com/ripmeapp/ripme/wiki/Supported-Sites | less ;}
ripme-cli() { java -jar $PATH_RIPME -l ~/Downloads -u "$@" ;}
ripme-cbz() {
  java -jar $PATH_RIPME -l ~/Downloads -u "$@"
  zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  gio trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}
ripme-tsp() {
  tsp java -jar $PATH_RIPME -l ~/Downloads -u "$@"
  sleep 2
  tsp zip -r "${$(ls -1dt ~/Downloads/*/ | head -1)%/}.cbz" "$(ls -1dt ~/Downloads/*/ | head -1)"
  tsp gio trash -f "$(ls -1dt ~/Downloads/*/ | head -1)"
}

# }}}
# #-------- Quvi (Download/Stream Media CLI) {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=jLw64k8CoMc
# # LINK: http://quvi.sourceforge.net/
# # DESC: media downloader and streamer using external player
#
# quvi-dl() { quvi get "$1" ;}
# quvi-stream() { quvi dump "$1" -b quiet --exec "$PLAYER %u" ;}
#
# # }}}
#-------- Wget (Retrieve Files From The Web) {{{
#------------------------------------------------------
# http://stackoverflow.com/a/18709707
wget-extension() {
  if [ $# -lt 2 ]; then
    echo -e "Download all files with specific extension on a webpage"
    echo -e "\nUsage: $0 <file_extension> <url>"
    echo -e "\nExample:\n$0 mp4 http://example.com/files/"
    echo -e "$0 mp3,ogg,wma http://samples.com/files/"
    echo -e "\nGoogle: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna"
    return 1
  fi

  # savepath=~/Downloads
  # outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)
  # mkdir -pv "$savepath/$outputdir_name"
  # cd "$savepath/$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"

  outputdir_name=$(echo "$2" | rev | cut -d\/ -f2 | rev)
  mkdir -pv "$outputdir_name"
  # cd "$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -e robots=off "$2"
  cd "$outputdir_name" && wget -r -l1 -H -t1 -N -np -A "$1" -e robots=off "$2"
}

wget-recursively() {
  if [ $# -lt 1 ]; then
    echo -e "Download all files with specific extension on a webpage"
    echo -e "\nUsage: $0 <file_extension> <url>"
    echo -e "\nExample:\n$0 mp4 http://example.com/files/"
    echo -e "$0 mp3,ogg,wma http://samples.com/files/"
    echo -e "\nGoogle: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna"
    return 1
  fi

  outputdir_name=$(echo "$1" | rev | cut -d\/ -f2 | rev)
  mkdir -pv "$outputdir_name"
  cd "$outputdir_name" && wget -r -H -t1 -nd -N -np --reject index.html -e robots=off "$1"
}
# }}}
#-------- Peerflix v2 (Popcorntime CLI) [last updated July 27, 2016] {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=NG13yOTPgfY
# LINK: https://github.com/saironiq/shellscripts
# DESC: popcorntime from terminal

peerflix-viewer() {
  # choose a player
  # PFLIX_VIDPLAYER=cvlc
  # PFLIX_VIDPLAYER=mplayer
  PFLIX_VIDPLAYER=mpv

  # ip address and port for video player to connect to
  PFLIX_IPADDR=localhost
  PFLIX_PORT=55055

  echo -e "${Yellow}>>>Check if peerflix stream is alive at $PFLIX_IPADDR:$PFLIX_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$PFLIX_IPADDR" "$PFLIX_PORT"; do sleep 2; done
  echo -e "${Green}>>>Connecting to peerflix stream ${Color_Off}"
    ($PFLIX_VIDPLAYER http://"$PFLIX_IPADDR":"$PFLIX_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing peerflix stream now ${Color_Off}"
    wait
    killall peerflix
}

# }}}
# #-------- Skeet Skeet CLI {{{
# #------------------------------------------------------
# # requirements:
# #     1. install nohup mpv vim youtube-dl
# #     2. add this to your ~/.vimrc
# #        map <F8> :exec '!nohup mpv ' . shellescape(getline('.'), 1) . ' >/dev/null 2>&1&'<CR><CR>
# #
# # how to use:
# #     1. fap-xvideos ashlynn brooke
# #     2. hit F8 on the link you want to play
# #     3. hit ZZ or ZQ to quit vim
#
#
# fap-youporn() {
#   grepmatch=$(echo "$@" | sed 's/ /.*/g')
#   keyword="$(echo "http://www.youporn.com/search?query=$@&type=straight" | sed 's/ /\+/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/watch/ {print $2}' | cut -d\/ -f1-6 | grep -iE $grepmatch | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
# }
#
# fap-youjizz() {
#   keyword="$(echo "http://www.youjizz.com/search/$@" | sed 's/ /\-/g')"
#   pagenum=5
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num".html""; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
# }
#
# fap-pornotube() {
#   keyword="$(echo "http://www.pornotube.com/search.php?q=$@" | sed 's/ /\+/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do curl -s "$line" \
#   | awk '/pornotube.com\/m/ && !/class/' | cut -d\" -f 2 | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
# }
#
# fap-xvideos() {
#   keyword="$(echo "http://www.xvideos.com/?k=$@" | sed 's/ /\+/g')"
#   pagenum=5
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&p=$num"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/xvideos\.com\/video/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | awk '!x[$0]++' | vim -R -
# }
#
# fap-jizzhut() {
#   keyword="$(echo "http://www.jizzhut.com/search/$@" | sed 's/ /\-/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword-$num.html"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/jizzhut\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | awk '!x[$0]++' | vim -R -
# }
#
# fap-redtube() {
#   keyword="$(echo "http://www.redtube.com/?search=$@" | sed 's/ /\+/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword&page=$num"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -source "$line" \
#   | awk -F\" '/class="s"/ {print $4, "http://redtube.com"$2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | awk '!x[$0]++' | vim -R -
# }
#
# fap-spankwire() {
#   keyword="$(echo "http://www.spankwire.com/search/straight/keyword/$@" | sed 's/ /\%20/g')"
#   pagenum=5
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo "$keyword?Sort=Relevance&Page=$num"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/www\.spankwire\.com/ && /video/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | vim -R -
# }
#
# # quvi not supported anymore
# fap-tnaflix() {
#   keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
#   	"http://www.tnaflix.com/search.php?page=$num$keyword"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/video[0-9]/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | vim -R -
# }
# fap-empflix() {
#   keyword="$(echo "&what=$@&category=&sb=relevance&su=anytime&sd=all&dir=desc" | sed 's/ /\%20/g')"
#   pagenum=3
#   pagenum_to_url=$(for num in $(seq 1 "$pagenum"); do echo \
#   	"http://www.empflix.com/search.php?page=$num$keyword"; done )
#   videourl=$(echo "$pagenum_to_url" | while read line; do lynx -dump "$line" \
#   | awk '/empflix\.com\/videos/ {print $2}' | awk '!x[$0]++' ; done)
#
#   echo $videourl | sed 's/\ /\n/g' | vim -R -
# }
#
# #}}}
# #-------- MPSYT-Youtube Channels {{{
# #------------------------------------------------------
# # tutorial video: https://www.youtube.com/watch?v=VE2iCBkIs8E
# mpsyt-animetrailers() { mpsyt pl PLVfHJfXFDXRgfJc3z03lp8qY7tlJLnvuO ;}
# mpsyt-tvshowstrailers() { mpsyt pl PL3kx5h2TrYGwpW0VbNenpj-BKMBTGgJPE ;}
# mpsyt-movietrailers() { mpsyt pl PL1DD10E84B9B08A35 ;}
# mpsyt-top100songs() { mpsyt pl PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG ;}
#
# # }}}
#-------- Youtube-Viewer Channels {{{
#------------------------------------------------------
# tutorial video: http://www.youtube.com/watch?v=FnJ67oAxVQ4
# watch/login/comment/search/download...etc video on youtube, all from cli
# https://github.com/trizen/youtube-viewer
yt-listen() { youtube-viewer -n $@ ;}	# no video, music/audio only
# yt-music() { youtube-viewer -n --category=Music --top ;}	# show top music list
yt-music() { youtube-viewer -n --category=10 --top ;}	# show top music list
yts-movie-movieclipstrailer() { youtube-viewer -u UCi8e0iOVk1fEOogdfu4YgfA ;}
## }}}
# #-------- NVLC Podcast RSS {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=7y_58wpHuFE
# # DESC: play local and internet media using ncurses VLC
#
# nvlc-cdplayer() { nvlc ${1:-cdda://} ;}		# other cdrom; cdda:///dev/cdrom ; cdda:///dev/sr0 ; cdda:///dev/sr1
# nvlc-dvdplayer() { nvlc ${1:-/dev/cdrom} ;}		#other; /dev/sr0 ; /dev/dvd
# nvlc-podcast() { nvlc -S podcast --podcast-urls "$@" ;}
# podcast-game-cupodcast() { nvlc-podcast "http://CUpodcast.podbean.com/feed/" ;}
# podcast-mma-joerogan() { nvlc-podcast "http://joeroganexp.joerogan.libsynpro.com/rss" ;}
# podcast-wwf-stonecold() { nvlc-podcast "http://www.podcastone.com/podcast?categoryID2=436" ;}
# podcast-science-startalk() { nvlc-podcast "http://feeds.soundcloud.com/users/soundcloud:users:38128127/sounds.rss" ;}
# podcast-science-thisweekinscience() { nvlc-podcast "http://feeds.feedburner.com/twis/science/" ;}
#
#
# #}}}
#-------- Sopcast CLI v3 (Streaming P2P Videos) [last updated April 27, 2018] {{{
#------------------------------------------------------
# DEMOv2: http://www.youtube.com/watch?v=Dm7cFjhzgHo
# DEMOv3: https://www.youtube.com/watch?v=Khvo4ge1PLQ
# DESC: watch streaming movies/tv shows over p2p
# FEED: http://www.sopcast.com/chlist.xml
#       http://sopcast.ucoz.com
#       http://streams.magazinmixt.ro
#       google keyword: sop://broker.sopcast
#       https://www.google.com/#tbs=qdr:w&q=sop:%2F%2Fbroker.sopcast

# package:
# Archlinux: sopcast ( x64 https://www.archlinux.org/packages/multilib/x86_64/sopcast/)
# Ubuntu/Debian: sp-auth (https://launchpad.net/~jason-scheunemann/+archive/ppa)

sppc() {
  # choose a player (cvlc is default)
  # SP_VIDPLAYER=cvlc
  # SP_VIDPLAYER=(cvlc --file-caching=10000)
  # SP_VIDPLAYER=(cvlc --video-on-top --width=500 --height=280 --video-x=-15 --video-y=-50)
  # SP_VIDPLAYER=vlc
  # SP_VIDPLAYER=(vlc --control=lirc)
  # SP_VIDPLAYER=mplayer
  # SP_VIDPLAYER=(mplayer -cache 1000)
  # SP_VIDPLAYER=mpv
  # SP_VIDPLAYER=(mpv --cache=1000)
  # SP_VIDPLAYER=(mpv --ontop --no-border --force-window --autofit=500x280 --geometry=-15-50)
  SP_VIDPLAYER=(mpv --cache=2048 --ontop --no-border --force-window --autofit=500x280 --geometry=-15-50)

  # sopcast port
  SP_LOCAL_PORT=55050

  # ip address and port for video player to connect to
  SP_PLAYER_IPADDR=localhost
  SP_PLAYER_PORT=55051

  echo -e "${Red}>>>Kill any exiting sopcast connection ${Color_Off}"
    killall sp-sc &>/dev/null
  echo -e "${Yellow}>>>Loading sopcast connection ${Color_Off}"
    (sp-sc "$1" "$SP_LOCAL_PORT" "$SP_PLAYER_PORT" &>/dev/null &)
  echo -e "${Yellow}>>>Check if sopcast stream is alive at $SP_PLAYER_IPADDR:$SP_PLAYER_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$SP_PLAYER_IPADDR" "$SP_PLAYER_PORT"; do sleep 2; done
  echo -e "${Green}>>>Connecting to sopcast stream ${Color_Off}"
    ($SP_VIDPLAYER http://"$SP_PLAYER_IPADDR":"$SP_PLAYER_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing sopcast stream now ${Color_Off}"
    wait
    killall sp-sc
}

# manually kill sopcast (sometimes it doesnt exit properly and still uses bandwidth in the background)
sppc-kill() { killall sp-sc ;}

# channel list
spp-acasa() { sppc "sop://broker.sopcast.com:3912/149256" ;}
spp-acasagolda() { sppc "sop://broker.sopcast.com:3912/253471" ;}
spp-acasatv() { sppc "sop://broker.sopcast.com:3912/149256" ;}
spp-antena1a() { sppc "sop://broker.sopcast.com:3912/149257" ;}
spp-antena1b() { sppc "sop://broker.sopcast.com:3912/151301" ;}
spp-antena1c() { sppc "sop://broker.sopcast.com:3912/148083" ;}
spp-antenastars() { sppc "sop://broker.sopcast.com:3912/148255" ;}
spp-antena3() { sppc "sop://broker.sopcast.com:3912/148084" ;}
spp-axn() { sppc "sop://broker.sopcast.com:3912/253035" ;}
spp-axnblack() { sppc "sop://broker.sopcast.com:3912/149261" ;}
spp-axnwhite() { sppc "sop://broker.sopcast.com:3912/149262" ;}
spp-b1() { sppc "sop://broker.sopcast.com:3912/148087" ;}
spp-boomerang() { sppc "sop://broker.sopcast.com:3912/149264" ;}
spp-cartoonnetwork() { sppc "sop://broker.sopcast.com:3912/148254" ;}
spp-digiworld() { sppc "sop://broker.sopcast.com:3912/148260" ;}
spp-digisport1a() { sppc "sop://broker.sopcast.com:3912/148886" ;}
spp-digisport1b() { sppc "sop://broker.sopcast.com:3912/173020" ;}
spp-digisport2c() { sppc "sop://broker.sopcast.com:3912/263242" ;}
spp-discoverychannel() { sppc "sop://broker.sopcast.com:3912/256241" ;}
spp-discoveryscience() { sppc "sop://broker.sopcast.com:3912/256243" ;}
spp-disneychannel() { sppc "sop://broker.sopcast.com:3912/253031" ;}
spp-disneyjunior() { sppc "sop://broker.sopcast.com:3912/256239" ;}
spp-diva() { sppc "sop://broker.sopcast.com:3912/253034/123456" ;}
spp-divauniversal() { sppc "sop://broker.sopcast.com:3912/253034" ;}
spp-ducktv() { sppc "sop://broker.sopcast.com:3912/148259" ;}
spp-etnotv() { sppc "sop://broker.sopcast.com:3912/173116" ;}
spp-euforia() { sppc "sop://broker.sopcast.com:3912/253473" ;}
spp-eurosport1() { sppc "sop://broker.sopcast.com:3912/263056" ;}
spp-filmbox() { sppc "sop://broker.sopcast.com:3912/148981" ;}
spp-filmcafe() { sppc "sop://broker.sopcast.com:3912/256238" ;}
spp-hbo+hd() { sppc "sop://51.15.38.157:3912/260710" ;}
spp-idx() { sppc "sop://broker.sopcast.com:3912/256244" ;}
spp-kanald() { sppc "sop://broker.sopcast.com:3912/149258" ;}
spp-minimax() { sppc "sop://broker.sopcast.com:3912/148263" ;}
spp-natgeowild() { sppc "sop://broker.sopcast.com:3912/253037" ;}
spp-nationalgeographic() { sppc "sop://broker.sopcast.com:3912/148248" ;}
spp-nationaltv() { sppc "sop://broker.sopcast.com:3912/253030" ;}
spp-nickelodeon() { sppc "sop://broker.sopcast.com:3912/253472" ;}
spp-paramount() { sppc "sop://broker.sopcast.com:3912/253033" ;}
spp-primatv() { sppc "sop://broker.sopcast.com:3912/148086" ;}
spp-procinema() { sppc "sop://broker.sopcast.com:3912/148249" ;}
spp-protva() { sppc "sop://broker.sopcast.com:3912/149252" ;}
spp-protvb() { sppc "sop://broker.sopcast.com:3912/151380" ;}
spp-realitateatv() { sppc "sop://broker.sopcast.com:3912/253036" ;}
spp-romaniatv() { sppc "sop://broker.sopcast.com:3912/148258" ;}
spp-sport.ro() { sppc "sop://broker.sopcast.com:3912/178547" ;}
spp-tlc() { sppc "sop://broker.sopcast.com:3912/148256" ;}
spp-traveltv() { sppc "sop://broker.sopcast.com:3912/148885" ;}
spp-tv1000() { sppc "sop://broker.sopcast.com:3912/256337/123456" ;}
spp-tvpaprika() { sppc "sop://broker.sopcast.com:3912/148881" ;}
spp-tv1000() { sppc "sop://broker.sopcast.com:3912/256337" ;}
spp-tvr1() { sppc "sop://broker.sopcast.com:3912/148085" ;}
spp-tvr2() { sppc "sop://broker.sopcast.com:3912/173286" ;}
spp-viasathistory() { sppc "sop://broker.sopcast.com:3912/151300" ;}
spp-zutv() { sppc "sop://broker.sopcast.com:3912/148252" ;}


# format channel to functions quicker
soprip() {
  if [ $# -lt 1 ]
  then
    echo -e "turn sopcast channel listing into functions"
    echo -e "copy sopcast list from http://sopcast.ucoz.com/ to text file"
    echo -e "\nUsage:\n$0 <filename.txt>"
    return 1
  fi
  # lowercase list; rm spaces/empty lines; merge name and link
  LIST=$(cat "$1" | tr '[:upper:]' '[:lower:]' | sed 's/ //g' | sed '$!N;s/\n/ /' | sed '/^$/d')
  echo $LIST | while read line; do
    SOPNAME=$(echo $line | awk '{print $1}')
    SOPLINK=$(echo $line | awk '{print $2}')
    # print into functions format
    echo "spp-"$SOPNAME"() { sppc \""$SOPLINK"\" ;}"
  done
}


#}}}
#-------- Acestream CLI (Streaming P2P Videos) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=dxar7KLsrg8
# DESC: view streaming videos using acestream live feeds
# LINK: https://github.com/jonian/acestream-launcher
# FEED: https://www.google.com/#q=acestream://&tbs=qdr:w
#       http://www.acesoplisting.in/
#       http://arenavision.in/
#       http://streams.magazinmixt.ro/
#       http://www.livefootballol.me/acestream-channel-list-2016-1.html

acestream-cvlc() { acestream-launcher --player cvlc "$@" ;}
acestream-mpv() { acestream-launcher --player mpv "$@" ;}
acestream-mplayer() { acestream-launcher --player mplayer "$@" ;}

# choose a player (default is cvlc)
ACE_PLAYER=cvlc
# ACE_PLAYER=mpv

acc-bbcone-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://964d4a6632bf9c8c088de94e12a4597b2173e291 ;}
acc-tele5-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://97f0eaa031804b7c9f5b7f60599047254d9128b1 ;}
acc-espn-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://5d25598468b68aabc1d908921cea98062c7f8739 ;}
acc-espn-deportes-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://0a0be3253e0374f5f6323391c62b244eed5673c6 ;}
acc-beinsports-fr() { acestream-launcher --player "$ACE_PLAYER" acestream://b5950a56db8f722876dc74443d74b565fb99368f ;}
acc-tennis() { acestream-launcher --player "$ACE_PLAYER" acestream://f3b9d8f1575cf21be3db910af0d4e1a3ae19f3e2 ;}

# }}}
#-------- Transmission CLI v2 {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ee4XzWuapsE
# DESC: lightweight torrent client; interface from cli, webui, ncurses, and gui
# WEBUI:  http://localhost:9091/transmission/web/
# 	  http://192.168.1.xxx:9091/transmission/web/

tsm-clearcompleted() {
  transmission-remote -l | grep 100% | grep Done | \
  awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r
}

# display numbers of ip being blocked by the blocklist (credit: smw from irc #transmission)
tsm-count() {
  echo "Blocklist rules:" $(curl -s --data \
  '{"method": "session-get"}' localhost:9091/transmission/rpc -H \
  "$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
  | cut -d: -f 11 | cut -d, -f1)
}

# DEMO: http://www.youtube.com/watch?v=TyDX50_dC0M
# DESC: merge multiple ip blocklist into one
# LINK: https://github.com/gotbletu/shownotes/blob/master/blocklist.sh
tsm-blocklist() {
  echo -e "${Red}>>>Stopping Transmission Daemon ${Color_Off}"
    killall transmission-daemon
  echo -e "${Yellow}>>>Updating Blocklist ${Color_Off}"
    ~/.scripts/blocklist.sh
  echo -e "${Red}>>>Restarting Transmission Daemon ${Color_Off}"
    transmission-daemon
    sleep 3
  echo -e "${Green}>>>Numbers of IP Now Blocked ${Color_Off}"
    tsm-count
}
tsm-altdownloadspeed() { transmission-remote --downlimit "${@:-900}" ;}	# download default to 900K, else enter your own
tsm-altdownloadspeedunlimited() { transmission-remote --no-downlimit ;}
tsm-limitupload() { transmission-remote --uplimit "${@:-10}" ;}	# upload default to 10kpbs, else enter your own
tsm-limituploadunlimited() { transmission-remote --no-uplimit ;}
tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
tsm-daemon() { transmission-daemon ;}
tsm-quit() { killall transmission-daemon ;}
tsm-add() { transmission-remote --add "$1" ;}
tsm-hash() { transmission-remote --add "magnet:?xt=urn:btih:$1" ;}       # adding via hash info
tsm-verify() { transmission-remote --verify "$1" ;}
tsm-pause() { transmission-remote -t"$1" --stop ;}		# <id> or all
tsm-start() { transmission-remote -t"$1" --start ;}		# <id> or all
tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -t"$1" --remove ;}		# leaves data alone
tsm-info() { transmission-remote -t"$1" --info ;}
tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}
tsm-grep() { transmission-remote --list | grep -i "$1" ;}
tsm() { transmission-remote --list ;}
tsm-show() { transmission-show "$1" ;}                          # show .torrent file information

# DEMO: http://www.youtube.com/watch?v=hLz7ditUwY8
# LINK: https://github.com/fagga/transmission-remote-cli
# DESC: ncurses frontend to transmission-daemon
tsm-ncurse() { transmission-remote-cli ;}

#}}}
#-------- Ubooquity Ebook Comicbook Server # {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=qfLG9nKt3ew
# LINK: http://vaemendis.net/ubooquity/
# DESC: personal comic and ebook server

PATH_UBOOQUITY=~/.bin/ubooquity
ubooquity-help() { java -jar $PATH_UBOOQUITY/Ubooquity.jar --help ;}
ubooquity-server() { cd $PATH_UBOOQUITY && nohup java -jar $PATH_UBOOQUITY/Ubooquity.jar -headless >/dev/null 2>&1& }
# ubooquity-server() { cd $PATH_UBOOQUITY && nohup java -jar $PATH_UBOOQUITY/Ubooquity.jar -webadmin -headless >/dev/null 2>&1& }
ubooquity-gui() { cd $PATH_UBOOQUITY && nohup java -jar $PATH_UBOOQUITY/Ubooquity.jar -webadmin >/dev/null 2>&1& }
ubooquity-quit() { kill $(ps -ef | grep '[U]booquity.jar' | awk '{print $2}') ;}
ubooquity-status() {
  # get local router ip
  MY_IP=$(ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1 | cut -d' ' -f2)

  # default port
  MY_PORT=2202

  if ps -ef | grep '[U]booquity.jar' > /dev/null
  then
    echo -e "${Green}>>>Ubooquity server is running on http://$MY_IP:$MY_PORT ${Color_Off}"
    echo -e "${Yellow}>>>To change settings use http://$MY_IP:$MY_PORT/admin ${Color_Off}"
  else
    echo -e "${Red}>>>Ubooquity server has stopped ${Color_Off}"
  fi
}

# }}}
# #-------- Capture RTMP Streams (URL Sniffing) {{{
# #------------------------------------------------------
# # DEMO: http://www.youtube.com/watch?v=u1dQ81HT4AU
# # REFF: https://github.com/gotbletu/shownotes/blob/master/rtmpdump_sniff_your_own_tutorial.txt
# #       http://pclosmag.com/html/Issues/201104/page19.html
#
# sniff-begin() { sudo iptables -t nat -A OUTPUT -p tcp --dport 1935 -m owner \! --uid-owner root -j REDIRECT ;}
# sniff-capture-rtmpsrv() { rtmpsrv ;}
# sniff-capture-rtmpsuck() { rtmpsuck ;}
# sniff-end() { sudo iptables -t nat -D OUTPUT -p tcp --dport 1935 -m owner \! --uid-owner root -j REDIRECT ;}
# tsniff-begin() { sudo tcpdump -ieth0 -nn -A | grep -e"rtmp" -e"connect" -e"play" > /tmp/tcpoutput.txt ;}
# tsniff-less() { less /tmp/tcpoutput.txt ;}
#
# #}}}
#-------- FreeTuxTV - Free IPTV Using Existing Database {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=ZTLIGP98zpk
# DESC: free iptv working list from freetuxtv webtv database
# REFF: http://database.freetuxtv.net/site/index
#       How to use nvlc: https://www.youtube.com/watch?v=7y_58wpHuFE

freetuxtv-nolang() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=none&isp=all" ;}
freetuxtv-french() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fr&isp=all" ;}
freetuxtv-english() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=en&isp=all" ;}
freetuxtv-turkish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tr&isp=all" ;}
freetuxtv-spanish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=es&isp=all" ;}
freetuxtv-german() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=de&isp=all" ;}
freetuxtv-arabic() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ar&isp=all" ;}
freetuxtv-italian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=it&isp=all" ;}
freetuxtv-russian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ru&isp=all" ;}
freetuxtv-chinese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=zh&isp=all" ;}
freetuxtv-slovak() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sk&isp=all" ;}
freetuxtv-czech() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=cs&isp=all" ;}
freetuxtv-hungerian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hu&isp=all" ;}
freetuxtv-portuguese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=pt&isp=all" ;}
freetuxtv-bulgarian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=bg&isp=all" ;}
freetuxtv-romanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ro&isp=all" ;}
freetuxtv-serbo-croatian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sh&isp=all" ;}
freetuxtv-serbian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sr&isp=all" ;}
freetuxtv-dutch() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=nl&isp=all" ;}
freetuxtv-croatian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hr&isp=all" ;}
freetuxtv-persian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fa&isp=all" ;}
freetuxtv-polish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=pl&isp=all" ;}
freetuxtv-hindi() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hi&isp=all" ;}
freetuxtv-albanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sq&isp=all" ;}
freetuxtv-macedonian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mk&isp=all" ;}
freetuxtv-indonesian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=in&isp=all" ;}
freetuxtv-greek() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=el&isp=all" ;}
freetuxtv-korean() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ko&isp=all" ;}
freetuxtv-hebrew() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=iw&isp=all" ;}
freetuxtv-ukrainian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=uk&isp=all" ;}
freetuxtv-vietnamese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=vi&isp=all" ;}
freetuxtv-slovenian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sl&isp=all" ;}
freetuxtv-thai() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=th&isp=all" ;}
# freetuxtv-japanese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ja&isp=all" ;}
freetuxtv-finnish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=fi&isp=all" ;}
freetuxtv-lithuanian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=lt&isp=all" ;}
freetuxtv-danish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=da&isp=all" ;}
freetuxtv-kurdish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ku&isp=all" ;}
freetuxtv-swedish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=sv&isp=all" ;}
freetuxtv-azerbaijani() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=az&isp=all" ;}
freetuxtv-amharic() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=am&isp=all" ;}
freetuxtv-malay() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ms&isp=all" ;}
freetuxtv-norwegian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=no&isp=all" ;}
freetuxtv-bengali-bangla() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=bn&isp=all" ;}
freetuxtv-armenian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=hy&isp=all" ;}
freetuxtv-georgian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ka&isp=all" ;}
freetuxtv-urdu() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ur&isp=all" ;}
# freetuxtv-latin() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=la&isp=all" ;}
freetuxtv-catalan() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ca&isp=all" ;}
freetuxtv-tagalog() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tl&isp=all" ;}
freetuxtv-estonian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=et&isp=all" ;}
freetuxtv-latvian-lettish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=lv&isp=all" ;}
freetuxtv-afrikaans() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=af&isp=all" ;}
freetuxtv-kazakh() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=kk&isp=all" ;}
freetuxtv-cambodian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=km&isp=all" ;}
# freetuxtv-malayalam() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ml&isp=all" ;}
freetuxtv-somali() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=so&isp=all" ;}
# freetuxtv-gujarati() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=gu&isp=all" ;}
freetuxtv-mongolian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mn&isp=all" ;}
freetuxtv-maltese() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mt&isp=all" ;}
freetuxtv-turkmen() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=tk&isp=all" ;}
freetuxtv-irish() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ga&isp=all" ;}
# freetuxtv-interlingua() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=ia&isp=all" ;}
freetuxtv-moldavian() { nvlc "http://database.freetuxtv.net/WebStreamExport/index?format=m3u&type=1&status=2&lng=mo&isp=all" ;}

# }}}
#-------- Flexget (Torrent RSS) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/playlist?list=PLqv94xWU9zZ0pVGrgKtMuhFHun8-MahSY
# LINK: http://flexget.com/
# DESC: auto download torrent similar to how a DVR works

alias flexget='~/.virtualenv/flexget/bin/flexget'
flexget-list() { flexget series list && flexget movie-list list ;}
flexget-check() { flexget check ;}			# check if config file has any errors
flexget-test() { flexget --test execute ;}		# dry run
flexget-execute() { flexget execute ;}                  # download new torrent
flexget-cron() { flexget --cron execute ;}		# skip writing to logs
flexget-version() { flexget -V ;}
flexget-learnall() { flexget execute --learn ;}		# bypass dling old torrents
flexget-moviequeue-add() { flexget movie-list add "$@" ;}
flexget-moviequeue-del() { flexget movie-list del "$@" ;}
flexget-moviequeue-purge() { flexget movie-list purge ;}  # clear all queue
flexget-forget() { flexget movie-list forget "$@" ;}	# allow redownloading on waiting list

#}}}

####################
##### MISC #########
####################

#-------- Fasd (Jump and Open Files Quickly) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ur81Y-mV5Us
# LINK: https://github.com/clvv/fasd
# DESC: jump to path or open recent files quickly from cli

if which fasd >/dev/null; then
  eval "$(fasd --init auto)"	# get fasd working, initialization code

  # different fasd listing
  # alias a='fasd -a'               # any
  # alias s='fasd -si'              # show / search / select
  # alias d='fasd -d'               # directory
  # alias f='fasd -f'               # file
  # alias sd='fasd -sid'            # interactive directory selection
  # alias sf='fasd -sif'            # interactive file selection
  # alias z='fasd_cd -d'            # cd, same functionality as j in autojump
  # alias zz='fasd_cd -d -i'        # cd with interactive selection

  # open with external programs
  alias m="f -e $PLAYER"		# open with video player
  alias o="a -e $OPENER"		# open any file
  alias v="f -e $EDITOR"		# open with text editor
fi
#}}}

####################
#### MULTIMEDIA ####
####################

#-------- FFMPEG X11GRAB Screencasting {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture single mic source)
# REFF: http://ubuntuforums.org/showthread.php?t=1392026
#       https://github.com/gotbletu/wikimd/blob/master/ffmpeg-compile.md
#       https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
#       https://trac.ffmpeg.org/wiki/Capture/ALSA
#       https://trac.ffmpeg.org/wiki/Capture/Desktop
#       http://nowardev.wordpress.com/2011/05/23/how-to-screencast/

# ffmpeg location
FF_RECORDER=/usr/bin/ffmpeg
# FF_RECORDER=~/Compile/ffmpeg/bin/ffmpeg

# Method 1: Record Speakers only
# 1) set to FFMIC=pulse
# 2) alsamixer set capture volume to highest (e.g https://i.imgur.com/HrNf79J.png)
# 3) run this ffcast command
# 3) open pavucontrol > recording > Monitor of Built-in Audio Analog Stereo (e.g https://i.imgur.com/SwXJh1W.png)
# pavucontrol if using pulseaudio
# FF_MIC=pulse
# FF_MIC_CH="2"

# Method 2: Record Microphone only
# use "arecord -L" to find name (this is the better option since your device can change numbers on reboot)
# use "arecord -l" to find mic number
# FF_MIC=hw:4,0

## Blue Snowball Mono
# FF_MIC=front:CARD=Snowball
# FF_MIC_CH="1"

## Blue Yeti Stereo
FF_MIC=front:CARD=Microphone
FF_MIC_CH="2"

## Lapel Mic From Front Mic Jack
# FF_MIC=front:CARD=SB,DEV=0
# FF_MIC=hw:0,2
# FF_MIC_CH="2"

# scale down resolution if needed
# ${FF_SCALE[*]}
# FF_SCALE=(-vf scale=1280:720)

# movie = video and audio
# videotrack = video only
# audiotrack = audio only
FF_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FF_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FF_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffcast-fullscreen-movie() {
  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -acodec libmp3lame -ab 320k -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-fullscreen-videotrack() {
  $FF_RECORDER -f x11grab -r 30 \
  -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) \
  -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}

ffcast-audiotrack() {
  $FF_RECORDER -f alsa -ac $FF_MIC_CH -i $FF_MIC \
  -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_AUDIO
}

# single window: select a window with mouse cursor to record
ffcast-window-movie() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -thread_queue_size 512 -f alsa -ac $FF_MIC_CH -i $FF_MIC -async 1 -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 -acodec libmp3lame -ab 320k \
  -threads 0 -y $FF_OUTPUT_MOVIE
}

ffcast-window-videotrack() {
  INFO=$(xwininfo -frame)
  WIN_GEO=$(echo $INFO | grep -oEe 'geometry [0-9]+x[0-9]+' | grep -oEe '[0-9]+x[0-9]+')
  WIN_XY=$(echo $INFO | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )

  $FF_RECORDER -f x11grab -r 30 \
  -s $WIN_GEO -i :0.0+$WIN_XY -vcodec libx264 -pix_fmt yuv444p \
  -preset ultrafast -crf 0 \
  -threads 0 -y $FF_OUTPUT_VIDEO
}


# example references
# worked well on ffmpeg 0.11.1
# ffmpeg -f pulse -ac 1 -i hw:3,0 -async 1 -f x11grab -r 30 -s $(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1) -i :0.0 -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 -acodec libmp3lame -ab 128k -threads 0 -y ~/Public/screencast/aa_screencast_baking.mkv

# }}}
# #-------- PulseAudio Switcher CLI {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# # DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# # REFF: http://askubuntu.com/a/18210
#
# # list all audio sources
# pa-sources() {
#   pacmd list-sources | awk '/index:/ ||/name:/ || /alsa.card_name/ || /device.description/' | grep -E --color 'output|$'
#   echo -e "list all input and output sound devices (output = speakers, input = microphone)\n"
# }
#
# pa-global() {
#   if [ $# -lt 1 ]; then
#     echo -e "pulseaudio redirect audio of all running app to another device"
#     echo -e "\nUsage:\n$0 <device_index_number>"
#     echo -e "\nExample:\n$0 0 \n"
#     echo "==============="
#     echo "Sound Devices"
#     pacmd list-sinks | awk '/index/ || /name:/ || /alsa.card_name/ || /device.description/'
#     return 1
#   fi
#   # list all apps in playback tab (ex: cmus, mplayer, vlc)
#   inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}'))
#   # set the default output device
#   pacmd set-default-sink $1 &> /dev/null
#   # apply the changes to all running apps to use the new output device
#   for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done
# }
#
# pa-solo() {
#   if [ $# -lt 2 ]; then
#     echo -e "pulseaudio redirect audio of one running app to another device"
#     echo -e "\nUsage:\n$0 <app_index_number> <device_index_number>"
#     echo -e "\nExample:\n$0 2302 0 \n"
#     echo "==============="
#     echo "Running Apps"
#     pacmd list-sink-inputs | awk '/index/ || /application.name /'
#     echo "==============="
#     echo "Sound Devices"
#     pacmd list-sinks | awk '/index/ || /name:/ || /alsa.card_name/ || /device.description/'
#     return 1
#   fi
#   # set the default output device
#   pacmd set-default-sink "$2" &> /dev/null
#   # apply changes to one running app to use the new output device
#   pacmd move-sink-input "$1" "$2" &> /dev/null
# }
#
# #}}}

####################
##### OFFICE #######
####################

#-------- Calibre CLI 3.0+ {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=FeoVsC4U_0A
# LINK: http://manual.calibre-ebook.com/cli/calibredb.html
# DESC: ebook manager supports many formats and devices; interfaces with cli, webui, gui

# define your library path
cbbook=~/.Calibre/Book
cbcomic=~/.Calibre/Comic
cbdojinshi=~/.Calibre/Dojinshi
cbsuper=~/.Calibre/Super

cmx-list() {
  if [ $# -lt 1 ]; then
    echo -e "calibredb list files within a library"
    echo -e "\nUsage:\n$0 <library>"
    echo -e "\nExample:\n$0 \$cbcomic\n"
    return 1
  fi
  calibredb list -f authors,title,tags,rating --library-path "$1"
}

cmx-search() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb search files within a library"
    echo -e "\nUsage:\n$0 <library> <keywords>"
    echo -e "\nExample:\n$0 \$cbcomic marvel"
    echo -e "$0 \$cbcomic 'the walking dead'\n"
    return 1
  fi
  calibredb list -s "${@:2}" -f authors,title,tags,rating --library-path "$1"
}

cmx-add() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb add new files to a library"
    echo -e "\nUsage:\n$0 <library> <file>"
    echo -e "\nExample:\n$0 \$cbcomic file.cbz"
    echo -e "$0 \$cbcomic file1.cbz file2.cbz"
    echo -e "$0 \$cbcomic file.epub file2.pdf file3.cbr\n"
    return 1
  fi
  calibredb add "${@:2}" --library-path "$1"
}

cmx-remove() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb remove files from a library"
    echo -e "\nUsage:\n$0 <library> <id>"
    echo -e "$0 <library> <range>"
    echo -e "\nExample:\n$0 \$cbcomic 100"
    echo -e "$0 \$cbcomic 50-55"
    echo -e "$0 \$cbcomic 100,120-127"
    return 1
  fi
  calibredb remove "${@:2}" --library-path "$1"
}

cmx-show() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb show file metadata from a library"
    echo -e "\nUsage:\n$0 <library> <id>"
    echo -e "\nExample:\n$0 \$cbcomic 16"
    return 1
  fi
  calibredb show_metadata "${@:2}" --library-path "$1" | html2text
  calibredb list -f formats --library-path "$1" | grep "^$2 " | grep -E --color 'cbr|cbz|mobi|pdf|djvu|epub|$'
}
cmx-convert-to-mobi() {
  if [ $# -lt 2 ]; then
    echo -e "calibredb show file metadata from a library"
    echo -e "\nUsage:\n$0 <library> <id>"
    echo -e "\nExample:\n$0 \$cbcomic 16"
    return 1
  fi
  calibredb list -f formats --library-path "$1" | grep "^$2 " | grep -E --color 'cbr|cbz|mobi|pdf|djvu|epub|$'
  # kcc-c2e --upscale --stretch "$comicfile"

}

# DESC: Calibre WebUI content server (open brower to http://192.168.1.xxx:port )
# LINK: http://manual.calibre-ebook.com/cli/calibre-server.html
# cmx-server() {
#   MY_IP=$(ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1 | cut -d' ' -f2)
#   echo -e "${Green}>>>Calibre server http://$MY_IP:57770 for Books ${Color_Off}"
#   calibre-server -p 57770 --daemonize --with-library "$cbbook"
#   echo -e "${Green}>>>Calibre server http://$MY_IP:57771 for Comicbooks ${Color_Off}"
#   calibre-server -p 57771 --daemonize --with-library "$cbcomic"
#   echo -e "${Green}>>>Calibre server http://$MY_IP:57772 for Dojinshi ${Color_Off}"
#   calibre-server -p 57772 --daemonize --with-library "$cbdojinshi"
#   echo -e "${Green}>>>Calibre server http://$MY_IP:57773 for Super ${Color_Off}"
#   calibre-server -p 57773 --daemonize --with-library "$cbsuper"
# }
cmx-server() {
  MY_IP=$(ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1 | cut -d' ' -f2)
  calibre-server --port 57770 --daemonize --log /dev/stdout
  # calibre-server --port 57770 --disable-auth --enable-local-write --daemonize --log /dev/stdout
  echo -e "${Green}>>>Calibre server http://$MY_IP:57770 ${Color_Off}"
}
cmx-quit() { kill $(ps -ef | grep -i '[C]alibre-server' | awk '{print $2}') ;}
cmx-recipes() { ebook-convert --list-recipes | less ;}

#}}}

####################
##### STORAGE ######
####################

# #-------- Format USB v4 (MBR 2TB Max) [last updated February 03, 2018]  {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=7txO1cdNJsQ
# # DESC: format USB and create a single partition
#
# format2usb-ext() {
#   if [ $# -lt 3 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <filesystem:ext2|ext3|ext4> <device_label> <device_name>"
#     echo -e "Example: $0 ext2 MY_USB sdx"
#     echo -e "         $0 ext3 MY_USB sdx"
#     echo -e "         $0 ext4 MY_USB sdx"
#     return 1
#   fi
#   FSTYPE="$1"
#   DEVICE_LABEL="$2"
#   DEVICE_NAME="$3"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     echo -e "y\n" | sudo mkfs."$FSTYPE" -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Yellow}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#   echo -e "${Green}>>>Change EXT filesystem 5% reserved space to 0% (increase storage space) ${Color_Off}"
#     MOUNTED_TESTMOUNT=$(df | awk '/testmount/ {print $1}')
#     sudo tune2fs -m 0 "$MOUNTED_TESTMOUNT"
#     sudo tune2fs -l "$MOUNTED_TESTMOUNT" | grep --color=auto 'Reserved block count'
#   echo -e "${Red}>>>Unmounting and cleanup ${Color_Off}"
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-fat32-32kbcluster() {
#   if [ $# -lt 2 ]; then
#     echo -e "format device to work with wii & gamecube games using FAT32 with 32KB cluster"
#     echo -e "FAT32 label max is 11 character and is all uppercase"
#     echo -e "(512 bytes per sector * 64 sectors per cluster)/ 1024 Bytes = 32KB clusters (32768 Bytes)"
#     echo -e "more info: https://gist.github.com/joshenders/4376942"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # fat32 likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # b    W95 FAT32
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.fat -S 512 -s 64 -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-fat32-64kbcluster() {
#   if [ $# -lt 2 ]; then
#     echo -e "format device to work with few gaming consoles like 3DS using FAT32 with 64KB cluster"
#     echo -e "FAT32 label max is 11 character and is all uppercase"
#     echo -e "(512 bytes per sector * 128 sectors per cluster) / 1024 Bytes  = 64KB clusters (65536 Bytes)"
#     echo -e "more info: https://gist.github.com/joshenders/4376942"
#     echo -e "https://askubuntu.com/a/190033"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # fat32 likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # b    W95 FAT32
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.fat -S 512 -s 128 -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-exfat() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "exFAT label max is 15 character and is all uppercase"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # exFat likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # 7    HPFS/NTFS/exFAT
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.exfat -n "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-fat16() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "FAT16 label max is 11 character and is all uppercase"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # fat32 likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\ne\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # e    W95 FAT16
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.fat -F 16 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-fat32() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "FAT32 label max is 11 character and is all uppercase"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # fat32 likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\nb\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # b    W95 FAT32
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.fat -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-ntfs() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   DEVICE_LABEL="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\n7\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # 7    HPFS/NTFS/exFAT
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.ntfs -f -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-hfsplus-journal() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   DEVICE_LABEL="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\naf\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # af   HFS / HFS+
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.hfsplus -J -v "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2usb-hfsplus-nonjournal() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   DEVICE_LABEL="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "d\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\nd\n\no\nn\np\n1\n\n\nt\naf\nw" | sudo fdisk /dev/"$DEVICE_NAME"
#     # delete partiton x8 using d\n\n
#     # d    delete a partition
#     #      default, partition
#     # o    create a new empty DOS partition table
#     # n    add a new partition
#     # p    primary
#     # 1    partition number 1
#     #      default, first sector
#     #      default, last sector
#     # t    change a partition type (L to list all types)
#     # af   HFS / HFS+
#     # w    write table to disk and exit
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.hfsplus -v "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# # }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------

mount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fuseiso -n -p "$arg" "/tmp/$arg"
  done

  # if mount was sucessful then cd and ls the mountpoint
  # if [ $? -eq 0 ]; then
  #   cd "/tmp/$1" && ls
  # else
  #   return 1
  # fi
}

unmount-discimage() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <mount_point|disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin"
    echo -e "$0 mount_point1 mount_point2"
    echo -e "cd /tmp && $0 mount_point"
    echo -e "cd /tmp && $0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    fusermount -uz "$arg"
  done
}

mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  mkdir -p "/tmp/$1"
  sudo mount "$PWD/$1" "/tmp/$1"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}
#-------- Smartctl - Check Hard Drive Health (last update March 27, 2017) {{{
#------------------------------------------------------
# S.M.A.R.T. is the abbreviation for "Self Monitoring And Reporting Technology"
# It is a standard interface protocol and set of the disk features that allows disk to check its status and report it to a host system
# references:
# https://www.smartmontools.org/browser/trunk/smartmontools/smartctl.8.in
# https://en.wikipedia.org/wiki/S.M.A.R.T.#ATA_S.M.A.R.T._attributes
# http://www.z-a-recovery.com/manual/smart.aspx
# https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/

smartctl-conveyancetest() {
  if [ $# -lt 1 ]; then
    echo -e "perform conveyance test to check hard drive health (usually 5mins)"
    echo -e "not all drives has this testing feature"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t conveyance /dev/"$1"
}

smartctl-extendedtest() {
  if [ $# -lt 1 ]; then
    echo -e "perform long extended test to check hard drive health (usually 1hr+)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t long /dev/"$1"
}

smartctl-shorttest() {
  if [ $# -lt 1 ]; then
    echo -e "perform short test to check hard drive health (usually 2mins)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -t short /dev/"$1"
  # sudo smartctl -t short /dev/"$1" -d auto
}

smartctl-showprogress() {
  if [ $# -lt 1 ]; then
    echo -e "show the progress of your smartctl self test"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo watch -n 10 "smartctl -l selftest /dev/$1 ; smartctl -c /dev/$1 | head -11 | tail -3"
}

smartctl-cancletest() {
  if [ $# -lt 1 ]; then
    echo -e "cancle a self test (short, conveyance, extended)"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -X /dev/"$1"
}

smartctl-enablesmart() {
  if [ $# -lt 1 ]; then
    echo -e "enable SMART on your hard drive"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -s on /dev/"$1"
}

smartctl-disablesmart() {
  if [ $# -lt 1 ]; then
    echo -e "disable SMART on your hard drive"
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -s off /dev/"$1"
}

smartctl-keepalive() {
  if [ $# -lt 1 ]; then
    echo -e "Keep hard drive from going to sleep by creating a file every 60 seconds."
    echo -e 'Some external hard drive like Seagate will auto sleep on idle, thus we will get a "Aborted by host" in our self-test logs'
    echo -e "references: https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/"
    echo -e "\nUsage: $0 <path>"
    echo -e "Example: $0 ."
    echo -e "         cd /mnt/myseagatehdd && $0 ."
    return 1
  fi
  while true ; do echo "foo" >> test.txt; sleep 60; done
}

smartctl-info() {
  if [ $# -lt 1 ]; then
    echo -e 'Show S.M.A.R.T information of a device'
    echo -e "\nUsage: $0 <device>"
    echo -e "Example: $0 sdx"
    return 1
  fi
  sudo smartctl -a /dev/"$1" | grep -i --color='always' -E 'WARNING|Model Family|Device Model|SMART support is|User Capacity|SMART overall-health self-assessment test result|-fail|Short self-test routine|Extended self-test routine|Conveyance self-test routine|SMART Attributes Data Structure|Power_On_Hours|SMART Self-test log structure|ATA Error Count|FAILING_NOW|$'

  echo -e "${Red}=============References=================${Color_Off}"
  echo -e "${Yellow}>>>ATTRIBUTE_NAME meaning: https://en.wikipedia.org/wiki/S.M.A.R.T.#ATA_S.M.A.R.T._attributes ${Color_Off}"
  echo -e "${Blue}>>>aborted by host (HDD sleep on idle): https://ddumont.wordpress.com/2010/03/15/workaround-for-aborted-smart-test-for-seagate-disk/ ${Color_Off}"
  echo -e "${Green}>>>Manpage: If the Normalized value (VALUE) is less than or equal to the Threshold value (THRESH), then the Attribute is said to have failed. If the Attribute is a pre-failure Attribute, then disk failure is imminent. ${Color_Off}"
  echo -e "${Green}>>>Please note: the fact that an Attribute is of type 'Pre-fail' does not mean that your disk is about to fail!${Color_Off}"
  echo -e "${Green}>>>If the Attribute's current Normalized value is less than or equal to the threshold value, then the "WHEN_FAILED" column will display FAILING_NOW.${Color_Off}"
  echo -e "${Purple}=====HDD Hours=====${Color_Off}"
  echo "1000  hrs = 41 days"
  echo "8760  hrs = 1 year  (365  days)"
  echo "17520 hrs = 2 years (730  days)"
  echo "26280 hrs = 3 years (1095 days)"
  echo "35040 hrs = 4 years (1460 days)"
  echo "43800 hrs = 5 years (1825 days)"
  echo "52560 hrs = 6 years (2190 days)"
}
# }}}
# #-------- Clonezilla CLI (Clone and Restore Image) {{{
# #------------------------------------------------------
#
# # clonezilla ntfsclone partimage partclone
# ggnore() {
#   # [ -x "$(command -v clonezilla)" ]   || echo -e "${Red}>>>install clonezilla required. ${Color_Off}" && exit
#   # [ -x "$(command -v dd)" ]           || echo -e "${Red}>>>install coreutils required. ${Color_Off}"  ; return 1
#   # [ -x "$(command -v partimage)" ]    || echo -e "${Red}>>>install partimage required. ${Color_Off}"  ; return 1
#   # [ -x "$(command -v partclone.dd)" ] || echo -e "${Red}>>>install partclone required. ${Color_Off}"  ; return 1
#   # [ -x "$(command -v ntfsclone)" ]    || echo -e "${Red}>>>install ntfs-3g required. ${Color_Off}"    ; return 1
#   # [ -x "$(command -v pooping)" ]    || echo -e "${Red}>>>install ntfs-3g required. ${Color_Off}"      ; return 1
#
#   list=(clonezilla dd partimage partclone.dd ntfsclone paper mario)
#   for arg in "${list[@]}"; do
#     if ! [ -x "$(command -v $arg)" ]; then
#       echo -e "${Red}>>>ERROR: please install $arg not installed." && return 1
#     fi
#   done
#
# }
#
# ### Full Disk Clone and Restore
# clonezilla-disk-cloning() {
#   if [ $# -lt 2 ]; then
#     echo -e "clone full disk to image"
#     echo -e "\nUsage: $0 <output_file> <device>"
#     echo -e "\nExample: $0 mydesktop sdx"
#     echo -e "\nNote: <output_file> will be saved to your current path"
#     return 1
#   fi
#   OUTPUT_FILE="$1_clonezilla_disk_`date +'%Y_%m_%d'`"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Blue}>>>Set current output path to $PWD ${Color_Off}"
#     sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
#   echo -e "${Green}>>>Start full disk cloning process ${Color_Off}"
#   echo -e "${Green}>>>$OUTPUT_FILE image will be saved to $PWD ${Color_Off}"
#     sudo ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true savedisk "$OUTPUT_FILE" "$DEVICE_NAME"
#   echo -e "${Red}>>>Changing permission of $OUTPUT_FILE image ${Color_Off}"
#     sudo chmod -R 777 "$OUTPUT_FILE"
# }
#
# clonezilla-disk-restore() {
#   if [ $# -lt 2 ]; then
#     echo -e "restore full disk image to device"
#     echo -e "\nUsage: $0 <input_file> <device>"
#     echo -e "\nExample: $0 mydesktop_clonezilla_disk_2016_07_02 sdx"
#     return 1
#   fi
#   INPUT_FILE="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Green}>>>Start full disk restore process ${Color_Off}"
#     sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -p true restoredisk "$INPUT_FILE" "$DEVICE_NAME"
# }
#
# ### Partition Clone and Restore
# clonezilla-partition-cloning() {
#   if [ $# -lt 2 ]; then
#     echo -e "clone device partition to image"
#     echo -e "\nUsage: $0 <output_file> <device>"
#     echo -e "\nExample: $0 mylaptop sdx2"
#     echo -e "\nNote: <output_file> will be saved to your current path"
#     return 1
#   fi
#   OUTPUT_FILE="$1_clonezilla_part${PART_NUM}_`date +'%Y_%m_%d'`"
#   DEVICE_NAME="$2"
#   PART_NUM=$(echo "$2" | sed 's/[^0-9]*//g')
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Blue}>>>Set current output path to $PWD ${Color_Off}"
#     sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
#   echo -e "${Green}>>>Start partition cloning process ${Color_Off}"
#   echo -e "${Green}>>>$OUTPUT_FILE image will be saved to $PWD ${Color_Off}"
#     sudo /usr/sbin/ocs-sr -q2 -c -j2 -z1p -i 5000000 -sc -p true saveparts "$OUTPUT_FILE" "$DEVICE_NAME"
#   echo -e "${Red}>>>Changing permission of $OUTPUT_FILE image ${Color_Off}"
#     sudo chmod -R 777 "$OUTPUT_FILE"
# }
#
# clonezilla-partition-restore() {
#   if [ $# -lt 2 ]; then
#     echo -e "restore image to device partition"
#     echo -e "\nUsage: $0 <input_file> <device>"
#     echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
#     echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
#     return 1
#   fi
#   INPUT_FILE="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Green}>>>Start partition restore process ${Color_Off}"
#     sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$INPUT_FILE" "$DEVICE_NAME"
# }
# # }}}

####################
##### VM / RDP #####
####################

#-------- rDesktop v2 (Remote Desktop) [last updated August 30, 2016] {{{
#------------------------------------------------------
# DESC: connect to remote desktop computers

# zotac zbox ad10 mini pc (AMD Dual-Core Processor E-350)
rdesktop-zbox() {
  ipaddr=192.168.1.180
  port=3389
  username=heoyea-zbox
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-winxp() {
  ipaddr=192.168.1.150
  port=3389
  username=administrator
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win10() {
  ipaddr=192.168.1.116
  port=3389
  username=bonster
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-win7() {
  ipaddr=192.168.1.98
  port=3389
  username=bonster
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -a 32 -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-mintmate64() {
  ipaddr=192.168.1.206
  port=3389
  username=bonster
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

rdesktop-fedoramate64() {
  ipaddr=192.168.1.52
  port=3389
  username=bonster
  resolution=1920x1020
  echo -e "${Yellow}>>>Check if remote computer is alive at $ipaddr:$port ${Color_Off}"
    until nc -vzw 2 "$ipaddr" "$port"; do sleep 2; done
  echo -e "${Green}>>>Connecting to remote computer${Color_Off}"
    rdesktop -u "$username" -g "$resolution" "$ipaddr":"$port" -r sound:local
}

# }}}

####################
##### OBSOLETE #####
####################
# Code that is still useful but I no longer use it, still here for references

#-------- Recordmydesktop CLI {{{
#------------------------------------------------------
# http://www.pclinuxos.com/forum/index.php/topic,97181.msg822796.html#msg822796
# Screen capture software
# Ctrl+C	Stop
# Ctrl+C x2	Cancle rendering
# BUG: RMD Adjusted recording window, which cuts 10 pixel from the height, thus we have to use offset -x -y
# https://wiki.archlinux.org/index.php/RecordMyDesktop
# http://sourceforge.net/p/recordmydesktop/discussion/590957/thread/cf788e96/
# https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/reE8_9fqqAw
# native reso 1680x1050 -- > rmd reso 1080x1040, offset y axis -y 6
# SOUND LAG? lower the freq; 45000, 44100, 22050
# http://www.kkoncepts.net/blog/fixing-out-sync-audio-and-video-ffmpeg
RMD_OUTPUT=~/Public/screencast/rr_movie_baking.ogv

# Frequency; lower to fix sound lag; 45000, 44100, 22050
RMD_FREQ=22050

# Frames per second
RMD_FPS=30

# Channel (mono = 1 ; dual = 2)
RMD_CHANNELS=1

# SoundCard (pulse for pulseaudio; install pavucontrol to change pulse settings)
#            hw:0,1 for directly communicating with your soundcard
#            to get a list of sound device:
#            	arecord -l
#            	aplay -l
#            	cat /proc/asound/pcm
#            	alsamixer and hit F6
# FF_SOUNDCARD=pulse
# FF_SOUNDCARD=hw:0,1
RMD_SOUNDCARD=hw:3,0

rmd-all() { recordmydesktop --no-wm-check --no-frame --full-shots --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Benq Monitor; 1680x1050 (make sure 2nd monitor is higher res)
# Initial recording window is set to:
# X:0   Y:0    Width:1680    Height:1050
# Adjusted recording window is set to:
# X:0   Y:0    Width:1680    Height:1056
rmd-benq() { recordmydesktop --no-wm-check --no-frame --full-shots --width 1680 --height 1050 --fps $RMD_FPS --channels $RMD_CHANNELS --device $RMD_SOUNDCARD --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}


# ProscanTV; 1920x1080 --> 1920x1072 ; X offset by 1680
# Initial recording window is set to:
# X:0   Y:0    Width:1920    Height:1080
# Adjusted recording window is set to:
# X:0   Y:4    Width:1920    Height:1072
rmd-proscantv() { recordmydesktop --no-wm-check --no-frame --full-shots -x 1680 --width 1920 --height 1072 --fps $RMD_FPS --channels $RMD_CHAN --device $RMD_DEV --freq $RMD_FREQ --overwrite -o $RMD_OUTPUT ;}

# Examples
# select window
# E1: (select window); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --windowid $(xwininfo | awk '/Window id:/ {print $4}') --overwrite -o out.ogv ;}
# E2: recordmydesktop --no-wm-check --no-frame --width 1680 --height 1050 --fps 30 --channels 1 --device hw:3,0 --freq 44100 --overwrite -o out.ogv ;}
#E3: (fullscreen); recordmydesktop --no-frame --full-shots --fps 30 --channels 2 --freq 44100 --overwrite -o out.ogv ;}

#}}}
#-------- Air Comic Server # {{{
#------------------------------------------------------
# tutorial Video: http://www.youtube.com/watch?v=YceW_VcGA4A
# http://gnomewarrior32.blogspot.kr/2013/03/air-comic-server-english.html
ACSJar=~/.scripts/aircomic/AirComicServer.jar
ACSConf=~/.scripts/aircomic/AirComicServer.xml

cfg-aircomicserver() { $EDITOR $ACSConf ;}
aircomicserver() { nohup java -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-lite() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf -n >/dev/null 2>&1& }
aircomicserver-gui() { nohup java -XX:+UseSerialGC -Xms32M -Xminf=5 -Xmaxf=10 -jar $ACSJar -c $ACSConf >/dev/null 2>&1& }
aircomicserver-quit() { kill $(ps -ef | grep '[A]irComicServer.jar' | awk '{print $2}') ;}
# }}}
#-------- Cherry Music Server # {{{
#------------------------------------------------------
# tutorial Video: https://www.youtube.com/watch?v=X2goFerMJDY

BIN_CHERRYMUSIC=~/.scripts/cherrymusic/cherrymusic
cherrymusic() { nohup python $BIN_CHERRYMUSIC --port 8442 >/dev/null 2>&1& }
cherrymusic-setup() { python $BIN_CHERRYMUSIC --setup --port 8442 ;}
cherrymusic-quit() { kill $(ps -ef | grep -i '[C]herrymusic' | awk '{print $2}') ;}
cfg-cherrymusic() { $EDITOR ~/.config/cherrymusic/cherrymusic.conf ;}

# }}}
#-------- Sharelin (Gnutella2 P2P Downloader) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=Yi3JKyL-hxk
sharelin-daemon() { sharelin -d ;}
sharelin-quit() { killall sharelin ;}

# }}}
#-------- Aria2c WebUI {{{
#------------------------------------------------------
# downloader for torrents, magnet links, http, ftp, metalinks
# tutorial video: https://www.youtube.com/watch?v=LCr_0zFcbaM
alias magnet-to-torrent="aria2c -q --bt-metadata-only --bt-save-metadata"
aria2c-quit() {
   killall aria2c
   kill $(ps -ef | grep '[h]ttp.server' | awk '{print $2}')
   #kill $(ps -ef | grep '[S]impleHTTPServer' | awk '{print $2}')
}

aria2c-webui() {
    # download location
    DIR_DL=~/Downloads

    # run as daemon
    aria2c --enable-rpc --rpc-listen-all -D -d "$DIR_DL"


    # use python simplehttpserver to host the webui
    # this avoids download the index.html file on each computer
    # https://github.com/ziahamza/webui-aria2

    # path to the webui index.html
    DIR_WEBUI=~/.bin/webui-aria2/docs/

    # webui-aria2c uses port 6800 so we use 6801 for python_simple_http_server
    PORT=6801
    cd "$DIR_WEBUI"
    nohup python3 -m http.server "$PORT" >/dev/null 2>&1&

    # for older distro
    # nohup python2 -m SimpleHTTPServer "$PORT" >/dev/null 2>&1&

    echo "connect via http://localhost:$PORT or http://ip_address_of_server:$PORT"
}

# }}}
#-------- iPod 5G Device {{{
#------------------------------------------------------
# convert to ipod 5g compatible video format
# tutorial video: http://www.youtube.com/watch?v=gVVeR9KizBk

ipod5g() { HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-tsp() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod" ;}
ipod5g-rsync() {
# https://gist.github.com/nekobato/5998548
# including trailing slashes on $SRC
# rsync $SRC/Music/ $DEST/media/Ipod
rsync -avrm --delete-excluded --modify-window=2 --include '*/' --include '*.mp3' --exclude '*' "$1" "$2"
}

tsp-handbrake-normal() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.normal.mp4" --preset="Normal" ;}
tsp-handbrake-high() { tsp HandBrakeCLI -i "$1" -o "${1%.*}.high.mp4" --preset="High Profile" ;}

# }}}

####################
##### BETA LIST ####
####################
# Code that is working good but needs to be used for a while before including it to the next level up

# #-------- GPT Format USB (HDD Greater Than 2TB ) [last updated February 04, 2018]  {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=7txO1cdNJsQ
# # DESC: format USB and create a single partition
# # REFF: https://www.funtoo.org/Partitioning_using_gdisk
# #       https://matthew.komputerwiz.net/2015/12/13/formatting-universal-drive.html
#
# #-------- gdisk Hex code GUID GPT {{{
# #------------------------------------------------------
# # o      create a new empty GUID partition table (GPT)
# # y      yes, proceed
# # n      add a new partition
# # 1      partition number 1
# #        default, first sector
# #        default, last sector
# # 0700   Hex code or GUID (0700 Microsoft basic data)
# # w      write table to disk and exit
# # y      yes, proceed
#
# # Hex code or GUID (L to show codes, Enter = 8300): L
# # 0700 Microsoft basic data  0c01 Microsoft reserved    2700 Windows RE
# # 3000 ONIE boot             3001 ONIE config           3900 Plan 9
# # 4100 PowerPC PReP boot     4200 Windows LDM data      4201 Windows LDM metadata
# # 4202 Windows Storage Spac  7501 IBM GPFS              7f00 ChromeOS kernel
# # 7f01 ChromeOS root         7f02 ChromeOS reserved     8200 Linux swap
# # 8300 Linux filesystem      8301 Linux reserved        8302 Linux /home
# # 8303 Linux x86 root (/)    8304 Linux x86-64 root (/  8305 Linux ARM64 root (/)
# # 8306 Linux /srv            8307 Linux ARM32 root (/)  8400 Intel Rapid Start
# # 8e00 Linux LVM             a000 Android bootloader    a001 Android bootloader 2
# # a002 Android boot          a003 Android recovery      a004 Android misc
# # a005 Android metadata      a006 Android system        a007 Android cache
# # a008 Android data          a009 Android persistent    a00a Android factory
# # a00b Android fastboot/ter  a00c Android OEM           a500 FreeBSD disklabel
# # a501 FreeBSD boot          a502 FreeBSD swap          a503 FreeBSD UFS
# # a504 FreeBSD ZFS           a505 FreeBSD Vinum/RAID    a580 Midnight BSD data
# # a581 Midnight BSD boot     a582 Midnight BSD swap     a583 Midnight BSD UFS
# # a584 Midnight BSD ZFS      a585 Midnight BSD Vinum    a600 OpenBSD disklabel
# # a800 Apple UFS             a901 NetBSD swap           a902 NetBSD FFS
# # a903 NetBSD LFS            a904 NetBSD concatenated   a905 NetBSD encrypted
# # a906 NetBSD RAID           ab00 Recovery HD           af00 Apple HFS/HFS+
# # af01 Apple RAID            af02 Apple RAID offline    af03 Apple label
# # af04 AppleTV recovery      af05 Apple Core Storage    af06 Apple SoftRAID Statu
# # af07 Apple SoftRAID Scrat  af08 Apple SoftRAID Volum  af09 Apple SoftRAID Cache
# # b300 QNX6 Power-Safe       bc00 Acronis Secure Zone   be00 Solaris boot
# # bf00 Solaris root          bf01 Solaris /usr & Mac Z  bf02 Solaris swap
# # bf03 Solaris backup        bf04 Solaris /var          bf05 Solaris /home
# # bf06 Solaris alternate se  bf07 Solaris Reserved 1    bf08 Solaris Reserved 2
# # bf09 Solaris Reserved 3    bf0a Solaris Reserved 4    bf0b Solaris Reserved 5
# # c001 HP-UX data            c002 HP-UX service         e100 ONIE boot
# # e101 ONIE config           ea00 Freedesktop $BOOT     eb00 Haiku BFS
# # ed00 Sony system partitio  ed01 Lenovo system partit  ef00 EFI System
# # ef01 MBR partition scheme  ef02 BIOS boot partition   f800 Ceph OSD
# # f801 Ceph dm-crypt OSD     f802 Ceph journal          f803 Ceph dm-crypt journa
# # f804 Ceph disk in creatio  f805 Ceph dm-crypt disk i  fb00 VMWare VMFS
# # fb01 VMWare reserved       fc00 VMWare kcore crash p  fd00 Linux RAID
# # }}}
#
# format2gpt-ext() {
#   if [ $# -lt 3 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <filesystem:ext2|ext3|ext4> <device_label> <device_name>"
#     echo -e "Example: $0 ext2 MY_USB sdx"
#     echo -e "         $0 ext3 MY_USB sdx"
#     echo -e "         $0 ext4 MY_USB sdx"
#     return 1
#   fi
#   FSTYPE="$1"
#   DEVICE_LABEL="$2"
#   DEVICE_NAME="$3"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "o\ny\nn\n1\n\n\n8300\nw\ny\n" | sudo gdisk /dev/"$DEVICE_NAME"
#     # o      create a new empty GUID partition table (GPT) [Delete All Partition]
#     # y      yes, proceed
#     # n      add a new partition
#     # 1      partition number 1
#     #        default, first sector
#     #        default, last sector
#     # 8300   Hex code or GUID [8300 Linux filesystem]
#     # w      write table to disk and exit
#     # y      yes, proceed
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     echo -e "y\n" | sudo mkfs."$FSTYPE" -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Yellow}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#   echo -e "${Green}>>>Change EXT filesystem 5% reserved space to 0% (increase storage space) ${Color_Off}"
#     MOUNTED_TESTMOUNT=$(df | awk '/testmount/ {print $1}')
#     sudo tune2fs -m 0 "$MOUNTED_TESTMOUNT"
#     sudo tune2fs -l "$MOUNTED_TESTMOUNT" | grep --color=auto 'Reserved block count'
#   echo -e "${Red}>>>Unmounting and cleanup ${Color_Off}"
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2gpt-exfat() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "exFAT label max is 15 character and is all uppercase"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # exFat likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "o\ny\nn\n1\n\n\n0700\nw\ny\n" | sudo gdisk /dev/"$DEVICE_NAME"
#     # o      create a new empty GUID partition table (GPT) [Delete All Partition]
#     # y      yes, proceed
#     # n      add a new partition
#     # 1      partition number 1
#     #        default, first sector
#     #        default, last sector
#     # 0700   Hex code or GUID [0700 Microsoft basic data]
#     # w      write table to disk and exit
#     # y      yes, proceed
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.exfat -n "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2gpt-fat32() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "FAT32 label max is 11 character and is all uppercase"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   # fat32 likes the labels to be in uppercase
#   DEVICE_LABEL=$(echo "$1" | tr '[:lower:]' '[:upper:]')
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$2|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "o\ny\nn\n1\n\n\n0700\nw\ny\n" | sudo gdisk /dev/"$DEVICE_NAME"
#     # o      create a new empty GUID partition table (GPT) [Delete All Partition]
#     # y      yes, proceed
#     # n      add a new partition
#     # 1      partition number 1
#     #        default, first sector
#     #        default, last sector
#     # 0700   Hex code or GUID [0700 Microsoft basic data]
#     # w      write table to disk and exit
#     # y      yes, proceed
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.fat -F 32 -n "$DEVICE_LABEL" -I /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# format2gpt-ntfs() {
#   if [ $# -lt 2 ]; then
#     echo -e "format and create a partition that fills up the whole device"
#     echo -e "\nUsage: $0 <label> <device>"
#     echo -e "Example: $0 MY_USB sdx"
#     return 1
#   fi
#   DEVICE_LABEL="$1"
#   DEVICE_NAME="$2"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device and all of its partitions then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Red}>>>Delete any existing partition then create a new single partition ${Color_Off}"
#     echo -e "o\ny\nn\n1\n\n\n0700\nw\ny\n" | sudo gdisk /dev/"$DEVICE_NAME"
#     # o      create a new empty GUID partition table (GPT) [Delete All Partition]
#     # y      yes, proceed
#     # n      add a new partition
#     # 1      partition number 1
#     #        default, first sector
#     #        default, last sector
#     # 0700   Hex code or GUID [0700 Microsoft basic data]
#     # w      write table to disk and exit
#     # y      yes, proceed
#   echo -e "${Red}>>>Formatting the device ${Color_Off}"
#     sudo mkfs.ntfs -f -L "$DEVICE_LABEL" /dev/"$DEVICE_NAME"1
#   echo -e "${Red}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testmount
#     sudo mount /dev/"$DEVICE_NAME"1 /tmp/testmount
#     sudo chmod -R 777 /tmp/testmount
#     sudo umount /tmp/testmount
#     rmdir -v /tmp/testmount
# }
#
# # }}}
#-------- Virtualbox CLI {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=4pguqqygAd0
# DESC: Virtualbox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use
# REFF: https://www.howtoforge.com/tutorial/running-virtual-machines-with-virtualbox-5.1-on-a-headless-ubuntu-16.04-lts-server/

vbx-list() {
  echo "===Available VM==="
  vboxmanage list vms
  echo "\n===Running VM====="
  vboxmanage list runningvms
}

vbx-dvdrom() {
  if [ $# -lt 2 ]; then
    echo -e "Mount an ISO Image as a DVDROM/CDROM Image on a Running Virtualbox VM"
    echo -e "\nUsage: $0 <vmname> <iso_image>"
    echo -e "\nExample: $0 'Windows 7' 'foobar.iso'"
    echo "\n===Running VM====="
    vboxmanage list runningvms
    return 1
  fi

  vboxmanage storageattach "$1" --storagectl IDE --port 1 --device 0 --type dvddrive --medium "$2"
}

# https://antonyjepson.wordpress.com/2012/01/26/quickly-attaching-usb-devices-to-virtualbox-guests-using-vboxmanage/
# http://tiebing.blogspot.com/2012/07/virtualbox-usb-from-command-line.html
vbx-usb() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list usbhost | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-start() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list vms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage startvm "$vm_name" --type headless
        echo -e "${Green} $vm_name Has Been Started ${Color_Off}"
      fi
      break
    done
  done
}

vbx-quit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" acpipowerbutton
        echo -e "${Yellow} $vm_name Is Shutting Down ${Color_Off}"
      fi
      break
    done
  done
}

vbx-forcequit() {
  # Set to endless loop
  while true
  do
    # Set the prompt for the select command
    PS3="Type a number to select or 'Ctrl+C' to quit: "

    # Create a list to display on menu
    IFS=$'\n'
    fileList=($(vboxmanage list runningvms | cut -d '{' -f1 | sed 's/ *$//'))
    unset IFS

    # Show a menu and ask for input. If the user entered a valid choice then execute command
    select fileName in $fileList; do
      if [ -n "$fileName" ]; then
        # remove quotes from filename
        vm_name=($(echo "${fileName}" | sed 's:\"::g' ))
        vboxmanage controlvm "$vm_name" poweroff
        echo -e "${Red} $vm_name Power Cable Has Been Pulled ${Color_Off}"
      fi
      break
    done
  done
}
# }}}
#-------- Fuzzy Finder {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
# DESC: interactive fuzzy string matching
# LINK: https://github.com/junegunn/fzf

fzf-cheat() {
# set default cheat directory
# cheatpath=~/.cheat
# cd "$cheatpath"
cd "$(cheat -d | head -n 1)"

# start fuzzy searching selection
fzfsearch="$(grep '^# ' * | grep -v "http.*:" | fzf -e -i)"

# store selection as variables
cheatbasename="$(printf "$fzfsearch" | cut -d ':' -f1)"
cheatcodetitle="$(printf "$fzfsearch" | cut -d ':' -f2-)"

# copy code snippet to Linux X clipboard
[ -x "$(command -v xclip)" ] && cheat "$cheatbasename" | sed -n "/$cheatcodetitle/,/^$/p" | sed '/^$/d' | sed '/^#/d' | head -c -1 | xclip -selection clipboard

# copy code snippet to TMUX clipboard
pidof tmux >/dev/null && tmux set-buffer "$(cheat "$cheatbasename" | sed -n "/$cheatcodetitle/,/^$/p" | sed '/^$/d' | sed '/^#/d' | head -c -1)"

# copy code snippet to OSX clipboard
[ -x "$(command -v pbcopy)" ] && cheat "$cheatbasename" | sed -n "/$cheatcodetitle/,/^$/p" | sed '/^$/d' | sed '/^#/d' | head -c 1 | pbcopy

}





fcheat() {
  local files
  IFS=$'\n' files=($(cd $HOME/.cheat && fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && cat $HOME/.cheat/"${files[@]}"
}


fzf-radio() {
  # nvlc "$(cat ~/.pyradio/stations.csv | fzf -e -i --no-sort | awk '{print $NF}')"
  mpv "$(cat ~/.pyradio/stations.csv | fzf -e -i --no-sort | awk '{print $NF}')"
}

rofi-fzf() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

# fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i | awk '{$1=$1};1')" | xclip -selection clipboard ;}
fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}
fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e -i )' ;}
fzf-bookmarkscli() { sr "$(cat ~/.config/surfraw/bookmarks | grep '^[[:alnum:]]' | sort -n | fzf -e -i )" ;}
fzf-bookmarks() { surfraw "$(cat ~/.config/surfraw/bookmarks | grep '^[[:alnum:]]' | sort -n | fzf -e -i )" ;}
fzf-bookmarks2clipboard() { echo -n "$(cat ~/.config/surfraw/bookmarks | grep '^[[:alnum:]]' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
fzf-bookmarkstor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | grep '^[[:alnum:]]' | sort -n | fzf -e -i )" ;}
fzf-tor() { torify w3m "$(cat ~/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}


fzf-launcher() {
  # note: xdg-open has a bug with .desktop files, so we cant use that shit
  selected="$(ls /usr/share/applications | fzf -e -i )"
  nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
  # disown if exit 0 successfully
  if [[ $? = 0 ]] ; then disown; fi
}

# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
# https://github.com/junegunn/fzf/wiki/examples#browsing-history
fzf-chromium_history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  # macos
  # cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
  # linux
  \cp -f ~/.config/chromium/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
  # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


fzf-locate() {
  # xdg-open "$(locate "*" | fzf -e -i )"
  # xdg-open "$(locate home media | fzf -e -i )" >/dev/null 2>&1 & disown
  xdg-open "$(locate \
    -d /var/lib/mlocate/mlocate.db \
    -d ~/.updatedb/bingbong.db \
    -d ~/.updatedb/kamui.db \
    -d ~/.updatedb/wiiiso.db \
    home media \
    | fzf -e -i )" >/dev/null 2>&1 & disown


  # some programs require a longer time to load
  # sleep 1.5

  # if cancle or fail then exit
  # if [ $? -ne 0 ]
  # then
  #  	exit
  # fi
}


# http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

# edit single line snippet
cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
fzf-snippet() {
  selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
  # remove tags, leading and trailing spaces, also no newline
  echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
}

fzf-multisnippet() {
  # location of snippets
  dir=~/.multisnippet

  # merge filename and tags into single line
  results=$(for FILE in $dir/*
  do
    getname=$(basename $FILE)
    gettags=$(head -n 1 $FILE)
    echo -e "$getname \t $gettags"
  done)

  # copy content into clipboard without tags
  filename=$(echo "$(echo "$results" | fzf -e -i )" | cut -d' ' -f 1)
  # filename=$(echo "$(echo "$results" | fzf -e -i --preview="cat {-1}" )" | cut -d' ' -f 1)
  sed 1d $dir/$filename | xclip -selection clipboard
}

#}}}
#-------- FFMPEG X11GRAB Screencasting v2 (Mic + Speakers) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=mNz5Lrc06_s
# DESC: record desktop using ffmpeg (capture multiple source aka mic/speaker/others...etc)
# REFF: https://ask.fedoraproject.org/en/question/65662/recording-audio-from-mic-and-speakers-from-commandline/
#       https://www.youtube.com/watch?v=mEV2O8C272g (MrWhat record mic & speakers)
#       https://www.youtube.com/watch?v=Xbzh-T2kfJk (MrWhat keep audio synced)
#       https://www.youtube.com/watch?v=ynjFXmcpExE (MrWhat framedrop)

# ffmpeg location
# FFX_RECORDER=/usr/bin/ffmpeg
FFX_RECORDER=~/.bin/compile/ffmpeg-2.1.3/bin/ffmpeg

# [OUTPUT_DEVICE] speakers audio source (PC speakers or Headphones)
# note: using headphones since pc speakers will have audio feedback to mic
FFX_SPEAKER="alsa_output.pci-0000_00_14.2.analog-stereo.monitor"
FFX_SPEAKER_CH="2"
FFX_SPEAKER_FREQ="44100"
# FFX_SPEAKER="alsa_output.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-stereo.monitor"
# FFX_SPEAKER_CH="2"
# FFX_SPEAKER_FREQ="32000"

# [INPUT_DEVICE] mic audio source
# note: when routed to pulseaudio the mic is very low
# so open pavucontrol > input device > [name of mic]
# then slide volume all the way to the right
# example: http://i.imgur.com/GFkifqB.png
# FFX_MIC="alsa_input.usb-BLUE_MICROPHONES_Blue_Snowball-00.analog-mono"
# FFX_MIC_CH="1"
# FFX_MIC_FREQ="44100"
FFX_MIC="alsa_input.usb-NA_Lenovo_Wireless_Headset_W770-00.analog-mono"
FFX_MIC_CH="2"
FFX_MIC_FREQ="44100"

# sound system
FFX_SOUNDSYS="pulse"
# FFX_SOUNDSYS="alsa"

# resolution
FFX_RESO_FULL=$(xwininfo -root | grep 'geometry' |awk '{print $2;}' | cut -d\+ -f1)

# output location
FFX_OUTPUT_MOVIE=~/Public/screencast/mm_movie_baking.mkv
FFX_OUTPUT_VIDEO=~/Public/screencast/vv_video_baking.mkv
FFX_OUTPUT_AUDIO=~/Public/screencast/aa_audio_baking.mp3

ffxcast_fullscreen_movie() {
  $FFX_RECORDER \
  -f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
  -f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
  -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
  -filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
  -c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
  -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
  -y $FFX_OUTPUT_MOVIE
}

# ffxcast_fullscreen_movie() {
#   $FFX_RECORDER \
#   -f $FFX_SOUNDSYS -ac $FFX_SPEAKER_CH -ar $FFX_SPEAKER_FREQ -i $FFX_SPEAKER \
#   -f $FFX_SOUNDSYS -ac $FFX_MIC_CH -ar $FFX_MIC_FREQ -i $FFX_MIC \
#   -thread_queue_size 512 -f x11grab -r 30 -s $FFX_RESO_FULL -i :0.0 \
#   -filter_complex "[0]asyncts[spkr],[1]asyncts[mic],[spkr][mic]amix=inputs=2" \
#   -c:v libx264 -pix_fmt yuv420p -preset ultrafast -crf 0 \
#   -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
#   -y $FFX_OUTPUT_MOVIE
# }

# -vcodec libx264 -pix_fmt yuv444p -preset ultrafast -crf 0 \
# -acodec libmp3lame -ab 128k -ar 44100 -threads 0 -y $FF_OUTPUT_MOVIE

# ffmpeg \
# -f pulse -ac 2 -ar 44100 -i alsa_input.usb-BLUE_MICROPHONE_Blue_Snow­ball_201306-00-Snowball.analog-stereo \
# -f pulse -ac 2 -ar 44100 -i alsa_output.pci-0000_00_1b.0.analog-ster­eo.monitor \
# -f pulse -ac 2 -ar 44100 -i alsa_output.usb-Logitech_Inc_Logitech_US­B_Headset_H540_00000000-00-H540.iec958-s­tereo.monitor \
# -f x11grab -framerate 30 -video_size 1920x1080 -i :0 \
# -filter_complex \
# "[0]asyncts[m], \
# [1]asyncts[d], \
# [2]asyncts[h], \
# [m][d][h]amix=inputs=3" \
# -c:v libx264 -preset veryfast -crf 18 -pix_fmt yuv420p \
# -c:a libmp3lame -ac 2 -ar 44100 -b:a 320k \
# /home/b/Videos/AudioSync/AsyncTS_20150206.mkv

# different PRESET
# 1. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 2. -c:v libx264 -preset superfast -crf 18: Produced a 40.4 MB file at ~48-53% CPU load
# 3. -c:v libx264 -preset veryfast -crf 18: Produced a 26.1 MB file at ~62-78% CPU load

# different CRF
# 1. -c:v libx264 -preset ultrafast -crf 0 (Lossless): Produced a 471.7 MB file at ~32-50% CPU load
# 2. -c:v libx264 -preset ultrafast -crf 18: Produced a 120.9 MB file at ~34-48% CPU load
# 3. -c:v libx264 -preset ultrafast -crf 23: Produced a 67.1 MB file at ~32-45% CPU load
# 4. -c:v libx264 -preset ultrafast -crf 28: Produced a 31.1 MB file at ~30-40% CPU load

# image quality each setting produces (images are zoomed to in 285%)
# https://imgur.com/XF6t2Cv


# }}}
# #-------- Clipboard and Upload {{{
# #------------------------------------------------------
# # DEMO: http://www.youtube.com/watch?v=fKP0FLp3uW0 (xclip)
# # 	https://www.youtube.com/watch?v=Ww7Sl4d8F8A (pastebinit)
# # DESC: copy/paste for linux machines (Mac style)
#
#
#
# # dump text from clipboard to pastebin server and copy link
# alias pbclipboard2slexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
# alias pbclipboard2sprungeus="pbpaste | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
# alias pbclipboard2ixio="pbpaste | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
# alias pbclipboard2pastebindotcom='pbpaste | pastebinit -b "pastebin.com" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
#
# alias pbuploadslexy='pbpaste | pastebinit -b "slexy.org" | pbcopy && echo "URL has been copied to clipboard" && pbpaste'
# alias pbuploadsprungeus="cat "$@" | curl -F 'sprunge=<-' http://sprunge.us | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
# alias pbuploadixio="cat "$1" | curl -F 'f:1=<-' ix.io | pbcopy && echo 'URL has been copied to clipboard' && pbpaste"
#
#
#
# # }}}
#-------- Archive Integrity Check {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com
# DESC: Check if archive is corrupted
# REFF: https://unix.stackexchange.com/questions/42287/terminating-an-infinite-loop

archive-integrity-zip() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo -e "${Red}>>>Check for Bad or Invalid errors ${Color_Off}"
  echo -e "${Red}>>>=============================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo -e "${Green}Testing File: $arg ${Color_Off}"
    unzip -tq "$arg" >> "$LOGFILE" || break
  done
}

archive-integrity-rar() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo -e "${Red}>>>Check for errors ${Color_Off}"
  echo -e "${Red}>>>================ ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo -e "${Green}Testing File: $arg ${Color_Off}"
    unrar t "$arg" >> "$LOGFILE" || break
  done
}

archive-integrity-7z() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo -e "${Red}>>>Check for Sub items Errors ${Color_Off}"
  echo -e "${Red}>>>========================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo -e "${Green}Testing File: $arg ${Color_Off}"
    7z t "$arg" >> "$LOGFILE" || break
  done
}



# archive-integrity-7z() {
#   NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
#   LOGFILE=~/Downloads/_errorcheck_"$NOSPACES".log
#   echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
#   echo -e "${Red}>>>Check for Sub items Errors ${Color_Off}"
#   ls -1 *.7z | while read line
#   do
#     7z t $line >> "$LOGFILE" || break
#   done
# }
#
# archive-integrity-rar() {
#   NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
#   LOGFILE=~/Downloads/_errorcheck_"$NOSPACES".log
#   echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
#   ls -1 *.rar | while read line
#   do
#     unrar t $line >> "$LOGFILE" || break
#   done
# }

whileloop() {
while true
  do
    ./your-script
  sleep 5
  done

}

# checkcorruption-zip() { find . -name '*.zip' -exec unzip -tq {} \; ;}
# checkcorruption-ziplog() { find . -name '*.zip' -exec unzip -tq {} \; > _errorcheck_"$(basename "$PWD")"_zip.log ;}
# checkcorruption-7z() { find . -name '*.7z' -exec 7z t {} \; ;}
# checkcorruption-7zlog() { find . -name '*.7z' -exec 7z t {} \; > _errorcheck_7z.log;}



# errorcheck-7z2() {
#   ls -1 *.7z | while read line
#   do 7z t $line >> _7zerror.log
#   done
# }
#
# errorstart() {
# for f in *; do
#   echo "File -> $f"
# done
# }



# }}}
#-------- Alias Custom {{{
#------------------------------------------------------
# alias sudo='sudo -i'
# alias sudo='sudo '					# make aliases work with sudo
# alias ps="ps aux | grep -v grep | grep "
# alias ff="find . |grep "
# alias pp="ps aux |grep "
# alias oo="xdg-open "

# For emergencies
alias asdf='setxkbmap fr bepo'

alias xclipin='xclip -sel c -in <'
alias xclipout='xclip -sel c -out >'
alias psg='ps aux|grep -v grep|grep -i '
psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
alias sshxforwarding='ssh -XCc blowfish-cbc,arcfour'
alias sshxtrusted='ssh -Y'
alias stackexchange='lynx http://column80.com'		# lookup information
alias xev-keycode="xev | grep 'keycode\|button'"
# alias weechat='weechat-curses'


# }}}
#-------- Functions {{{
#------------------------------------------------------

unlock() { keepassc -d ~/.keepass/masterlock.kdb ;}


# change font size (guake terminal)
# tutorial video: http://www.youtube.com/watch?v=i9aKFgxOjwQ
chfontsize() {
  # guake
  gconftool-2 --set '/apps/guake/style/font/style' --type string "Monospace ${1:-16}"

  #gnome-terminal
  dconf write /org/gnome/terminal/legacy/profiles:/$(dconf list /org/gnome/terminal/legacy/profiles:/)font "'Monospace ${1:-16}'"
}



# view markdown as manpages
# http://blog.metamatt.com/blog/2013/01/09/previewing-markdown-files-from-the-terminal/
mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less ;}

# quickly cd out of directories using numbers, example: up 2
# up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
# file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
# file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# searches for manual locally or online
manned() {
  for arg in "$@"; do man $arg 2> /dev/null \
  || $arg -H 2> /dev/null || $arg -h 2> /dev/null \
  || $arg --help-all 2> /dev/null || $arg --help 2> /dev/null \
  || help $arg 2> /dev/null \
  || $BROWSERCLI "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || $BROWSER "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || open "http://manned.org/browse/search?q=$@" 2> /dev/null \
  || xdg-open "http://manned.org/browse/search?q=$@"
  done
}

# search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
	| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}


# w3m browser with inline images
# https://plus.google.com/102499719144563443986/posts/Vja8W69iHoi
# tutorial video: http://www.youtube.com/watch?v=R2bMUtCOGko
# w3mimg() { w3m -o display_image=1 -o imgdisplay=w3mimgdisplay "$1" ;}

#}}}
# #-------- Screenshot {{{
# #------------------------------------------------------
# # DEMO: http://www.youtube.com/watch?v=Hh8G1aBp8gc
# # DESC: take screenshot fullscreen, single window or draw a box
# export PATH_SCREENSHOT=~/Pictures/screenshots
# pix() { scrot -d 5 "$PATH_SCREENSHOT/fullscr_`date +'%F_%Hh%Ms%S'`.png" ;}
# pix-area() { sleep 2 && scrot -s "$PATH_SCREENSHOT/windowed_`date +'%F_%Hh%Ms%S'`.png" ;}
#
# # }}}
#-------- Convert to iOS (iPod, Macs, iPhone, Apple TV) {{{
#------------------------------------------------------
# https://trac.handbrake.fr/wiki/BuiltInPresets

convert-to-iOS-ipod() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's low resolution settings for the iPod (5G and up)"
    echo -e "Optimized for great playback on the iPod screen, with smaller file size."
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipod.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipod.mp4" --preset="iPod"
    done
  done
}

convert-to-iOS-universal() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's universally compatible, full resolution settings for all current Apple devices"
    echo -e "iPod (6G and up), iPhone, AppleTV, and Macs"
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".universal.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.universal.mp4" --preset="Universal"
    done
  done
}

convert-to-iOS-iphone() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".iphone.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.iphone.mp4" --preset="iPhone & iPod touch"
    done
  done
}

convert-to-iOS-ipodtouch() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for all iPhones and iPod Touches going back to the original iPhone 2G."
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipodtouch.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipodtouch.mp4" --preset="iPhone & iPod touch"
    done
  done
}

convert-to-iOS-ipad() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".ipad.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.ipad.mp4" --preset="iPad"
    done
  done
}

convert-to-iOS-appletv() {
  if [ $# -lt 1 ]; then
    echo -e "HandBrake's settings for the AppleTV and 2009's iPhone and iPod Touch lineup. Provides a good balance between quality and file size, and pushes the devices to their limits. Includes Dolby Digital 5.1 AC3 sound for the AppleTV."
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv.mp4" --preset="AppleTV"
    done
  done
}

convert-to-iOS-appletv2() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv2.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv2.mp4" --preset="AppleTV 2"
    done
  done
}

convert-to-iOS-appletv3() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".appletv3.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.appletv3.mp4" --preset="AppleTV 3"
    done
  done
}

# }}}
#-------- Convert to Android (Smartphone, Tablet) {{{
#------------------------------------------------------
convert-to-android-mobile() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".androidmobile.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.androidmobile.mp4" --preset="Android"
    done
  done
}

convert-to-android-tablet() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.avi"
    echo -e "$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}".androidtablet.mp4 ]
    do
      HandBrakeCLI -i "$arg" -o "${arg%.*}.androidtablet.mp4" --preset="Android Tablet"
    done
  done
}

# }}}
#-------- Slice Videos {{{
#------------------------------------------------------

# movie = both audio & video
# audiotrack = audio only
# videotrack = video only

# mplayer OSD in milliseconds
mplayer-milliseconds() { mplayer -osd-fractions 1 -osdlevel 3 "$1" -ss "${2:-00:00:00}" ;}

slice_testing() {
  ffmpeg -i "$1" -ss "$2" -to "$3" -c copy cut.mp4
}

slice-movie() {
  if [ $# -lt 3 ]
  then
    echo -e "Use ffmpeg to cut movie (video & audio tracks) without converting"
    echo -e "\nUsage:\n$0 <filename> hh:mm:ss hh:mm:ss"
    echo -e "$0 filename.mp4 00:01:00 00:05:00"
    return 1
  fi
  ffmpeg -i "$1" -ss "$2" -to "$3" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# slice_movie() {
#     if [ $# -lt 5 ]
#     then
#         echo -e "Use ffmpeg to slice movie (video & audio tracks) with beginning and endpoint with accurate milliseconds"
#         echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
#         echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"
#
#         return 1
#     fi
#
#     # code
#     BEGINTIME=${2}
#     ENDTIME=${4}
#
#     # Convert the times to seconds from the Epoch
#     SEC1=`date +%s -d ${BEGINTIME}`
#     SEC2=`date +%s -d ${ENDTIME}`
#
#     # Use expr to do the math
#     DIFFSEC=`expr ${SEC2} - ${SEC1}`
#     DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`
#
#     ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -codec:v copy -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
#
# }

slice_videotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice videotrack (no audio) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -an -codec:v copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"

}

slice_audiotrack() {
    if [ $# -lt 5 ]
    then
        echo -e "Use ffmpeg to slice audiotrack (no video) with beginning and endpoint with accurate milliseconds"
        echo -e "\nUsage:\n$0 file hh:mm:ss ms hh:mm:ss ms"
        echo -e "\nexample:\n$0 file.mp4 00:01:00 00 00:05:00 00 \n"

        return 1
    fi

    BEGINTIME=${2}
    ENDTIME=${3}

    SEC1=`date +%s -d ${BEGINTIME}`
    SEC2=`date +%s -d ${ENDTIME}`

    DIFFSEC=`expr ${SEC2} - ${SEC1}`
    DURATIONTIME=`date +%H:%M:%S -ud @${DIFFSEC}`

    ffmpeg -i "$1" -ss ${BEGINTIME}."$3" -t ${DURATIONTIME}."$5" -vn -codec:a copy "${1%.*}"-"$0"-`date +'%F_%Hh%Ms%S'`."${1##*.}"
}

# }}}
#-------- Webcam {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=oYTE3docGLA
# DESC: using external player to display webcam

# mplayer to display webcam
# hit 's' to take screenshot, will save in current folder
# hit 'S' to take series of screenshot, will save in current folder
# hit 'f' to toggle fullscreen
# hit 'T' to toggle stay-on-top
# hit 'q' or 'Esc' to quit
# https://wiki.archlinux.org/index.php/Webcam_Setup#MPlayer
webcam-list() { v4l2-ctl --list-formats-ext && v4l2-ctl --list-devices ;}
webcam-mplayer() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -ontop -geometry "99%:95%" ;}
webcam-mplayer-noborder() { mplayer tv:// -tv driver=v4l2:width=640:height=360:device=/dev/video0 -fps 30 -vf screenshot -geometry "98%:98%" -ontop -noborder ;}
webcam-mplayer-screenshot() { mplayer tv:// -tv driver=v4l2:width=1920:height=1080:device=/dev/video0 -fps 30 -vf screenshot -ontop ;}
webcam-mpv() { mpv --demuxer-lavf-format video4linux2 --demuxer-lavf-o-set input_format=mjpeg av://v4l2:/dev/video0 ;}
webcam-mpv-noborder() { mpv --ontop --no-border --force-window --autofit=500x280 --geometry=-15-60 --demuxer-lavf-format video4linux2 --demuxer-lavf-o-set input_format=mjpeg av://v4l2:/dev/video0 ;}


# DESC: use webcam to scan for barcode/qrcode
zbarcam-v4l() {
  # barcode/qrcode reader using webcam
  # this is for webcam that was not supported by default
  # https://fitzcarraldoblog.wordpress.com/2012/10/05/installing-and-using-zbar-in-linux-to-scan-bar-codes-with-your-webcam/
  # requires: v4l-utils
  LD_PRELOAD=/usr/lib/libv4l/v4l1compat.so zbarcam /dev/video0
}
# }}}
#-------- Sound Effects {{{
#------------------------------------------------------
# http://whatnotlinux.blogspot.com/2011/12/enterprise-ambiance.html
ambiance-whitenoise() { play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1 ;}
ambiance-whitenoisewider() { play -n -c2 synth whitenoise band -n 100 24 band -n 300 100 gain +20 ;}
ambiance-pinknoise() { play -c2 -n synth pinknoise band -n 280 80 band -n 60 25 gain +20 treble +40 500 bass -3 20 flanger 4 2 95 50 .3 sine 50 lin ;}

#}}}
#-------- Archive Manager CLI {{{
#------------------------------------------------------
archive-append() { atool -a "$@" ;}
archive-extract-logs() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo -e "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo -e "${Red}>>>Extracting Files ${Color_Off}"
  echo -e "${Red}>>>=============================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo -e "${Green}Current File: $arg ${Color_Off}"
    atool -x "$arg" >> "$LOGFILE" || break
  done
}
archive-extract() { atool -x "$@" ;}
archive-extract-vpk() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    atool -x "$arg"
  done
}

archive-list() { atool -l "$1" | less -N ;}
archive-search() { atool -l "$1" | grep -i "$2" ;}

# create archive
7zit() { atool -a "${1%/}.7z" "$1" ;}
archive-create-7z() { atool -a archive.7z "$@" ;}
archive-create-zip() { atool -a archive.zip "$@" ;}
archive-create-rar() { atool -a archive.rar "$@" ;}
archive-create-tar() { atool -a archive.tar "$@" ;}
archive-create-targz() { atool -a archive.tar.gz "$@" ;}
archive-create-cbz() { atool -a archive.zip "$@" && mv -- archive.zip archive.cbz ;}
archive-create-cbr() { atool -a archive.rar "$@" && mv -- archive.rar archive.cbr ;}

# converting archive
convert-to-archive-tar() { arepack -F .tar -e "$@" ;}
convert-to-archive-zip() { arepack -F .zip -e "$@" ;}
convert-to-archive-rar() { arepack -F .rar -e "$@" ;}
convert-to-archive-targz() { arepack -F .tar.gz -e "$@" ;}
convert-to-archive-7z() { arepack -F .7z -e "$@" ;}
convert-to-archive-cbz() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
      arepack -F .zip -e "$arg" && mv "${arg%%.*}".zip "${arg%%.*}".cbz
    else
      if [[ -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
        mv -v "${arg%%.*}".zip "${arg%%.*}".cbz
      fi
    fi
  done
}
convert-to-archive-cbr() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
      arepack -F .rar -e "$arg" && mv "${arg%%.*}".rar "${arg%%.*}".cbr
    else
      if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
        mv -v "${arg%%.*}".rar "${arg%%.*}".cbr
      fi
    fi
  done
}

#}}}
#-------- Detox Filename Cleanup {{{
#------------------------------------------------------
# DESC: cleanup filename to different styles

# eg. FOO BAR LinuX.TAR.GZ --> foo_bar_linux.tar.gz
detox-unix() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]')
    mv "$arg" "$filter_name"
  done
}

# eg. FOO BAR LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}

# eg. FOO-BAR-LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human-dash() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | sed 's/-/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}

detox-video() {
  if [ $# -lt 1 ]; then
    echo -e "clean video filename then add [duration,filesize,resolution]"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.mp4"
    echo -e "$0 file1.mp4 file2.mp4 file3.mp4"
    echo -e "$0 *.mp4"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    # check if file is a valid video before continuing
    get_mimetype=$(file --mime-type -b "$arg" | cut -d '/' -f1)
    if [ "$get_mimetype"  = "video" ]; then
      compression=$(ffmpeg -i "$arg" 2>&1 | grep Video: | cut -d ':' -f4 | cut -d ' ' -f2)
      duration=$(ffmpeg -i "$arg" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,// | cut -d '.' -f1 | awk -F: '{print $1"h"$2"m"$3"s"}')
      filesize=$(du -h "$arg" | awk '{print $1}')
      resolution=$(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height "$arg" | cut -d '=' -f2)
      mv "$arg" "${arg%.*} [${duration},${filesize},${resolution}p,${compression}].${arg##*.}"
    fi
  done
}

# }}}
#-------- Music Tagging CLI {{{
#------------------------------------------------------
tag-remove-all-tags() { eyeD3 --remove-all "$@" ;}
tag-encoding-v2.3() { eyeD3 --encoding=utf8 --to-v2.3 "$@" ;}
tag-encoding-v2.4() { eyeD3 --encoding=utf8 --to-v2.4 "$@" ;}
tag-show() { eyeD3 "$@" ;}
tag-album() { eyeD3 -A "$1" "${@:2}" ;}
tag-albumartist() { eyeD3 -b "$1" "${@:2}" ;}
tag-artist() { eyeD3 -a "$1" "${@:2}" ;}
tag-title() { eyeD3 -t "$1" "${@:2}" ;}
tag-number() { eyeD3 -n "$1" "${@:2}" ;}
tag-discnumber() { eyeD3 -d "$1" "${@:2}" ;}
tag-genre() { eyeD3 -G "$1" "${@:2}" ;}
tag-listgenre() { eyeD3 --plugin=genres ;}
tag-year() { eyeD3 -Y "$1" "${@:2}" ;}
tag-comment() { eyeD3 -c "$1" "${@:2}" ;}
tag-image-remove() { eyeD3 --remove-all-images "$@" ;}
tag-image-add() { eyeD3 --add-image "$1":FRONT_COVER "${@:2}" ;}
tag-image-extract() { eyeD3 --write-images=. "$@" ;}

# use existing music tags to rename filename
tag-to-filename-num-title() { eyeD3 --rename '$track:num - $title' "$@" ;}
tag-to-filename-albumartist-album-num-title() { eyeD3 --rename '$album_artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-album-num-title() { eyeD3 --rename '$artist - $album - $track:num - $title' "$@" ;}
tag-to-filename-artist-title() { eyeD3 --rename '$artist - $title' "$@" ;}
tag-to-filename-albumartist-title() { eyeD3 --rename '$album_artist - $title' "$@" ;}
tag-to-filename-artist-album-title() { eyeD3 --rename '$artist - $album - $title' "$@" ;}
tag-to-filename-num-artist-title() { eyeD3 --rename '$track:num - $artist - $title' "$@" ;}
tag-to-filename-discnum-num-artist-title() { eyeD3 --rename 'CD$disc:num - $track:num - $artist - $title' "$@" ;}
tag-to-filename-num-albumartist-title() { eyeD3 --rename '$track:num - $album_artist - $title' "$@" ;}
tag-to-filename-num-albumartist-artist-title() { eyeD3 --rename '$track:num - $album_artist - $artist - $title' "$@" ;}


# use existing filename to fill in music tags
# 05 Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-space-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | cut -d ' ' -f1 | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | cut -d ' ' -f2- | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

# 05 - Desperado.mp3 --> fill in track/title
tag-filltag-from-filename-num-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --title "$titlename" "$arg"
  done
}

tag-filltag-from-filename-album-dash-num-dash-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    albumname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $3}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $4}' | awk '{$1=$1};1' )
    eyeD3 --album "$albumname" --track "$tracknum" --artist "$artistname" --album-artist "$artistname" --title "$titlename" "$arg"
  done
}

# num - artist/albumartist - title
tag-filltag-from-filename-num-dash-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    tracknum=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $3}' | awk '{$1=$1};1' )
    eyeD3 --track "$tracknum" --artist "$artistname" --album-artist "$artistname" --title "$titlename" "$arg"
  done
}

# Rihanna - Desperado.mp3 --> fill in artist/albumartist/title
tag-filltag-from-filename-artist-dash-title() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    artistname=$(echo "${arg%.*}" | awk -F' - ' '{print $1}' | awk '{$1=$1};1' )
    titlename=$(echo "${arg%.*}" | awk -F' - ' '{print $2}' | awk '{$1=$1};1' )
    eyeD3 --artist "$artistname" --title "$titlename" "$arg"
  done
}

# Desperado.mp3 --> fill in title
tag-filltag-from-filename-titleonly() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    eyeD3 --title "${arg%.*}" "$arg"
  done
}

# }}}
#-------- IPTV - Manual {{{
#------------------------------------------------------


iptvlist-lust-adultonly() { nvlc 'https://pastebin.com/raw/jMe87UHE' ;}
iptvlist-faith() { nvlc 'https://pastebin.com/raw/ikshwe1W' ;}
iptvlist-radio() { nvlc 'https://pastebin.com/raw/d5cb3Wxw' ;}
iptvlist-cctv() { nvlc 'https://pastebin.com/raw/pQJ9pFjH' ;}
iptvlist-cinema() { nvlc 'https://pastebin.com/raw/jbqA0j82' ;}
iptvlist-all() { nvlc 'https://pastebin.com/raw/ZzGTySZE' ;}


alias IPTVPLAYER="mpv --ontop --no-border --force-window --autofit=500x280 --geometry=-15-60"

iptv-bellator-prelims() { IPTVPLAYER 'https://paramount-network.akamaized.net/hls/live/599582/bellator-prelims/master.m3u8' ;}
iptv-bellator-main() { IPTVPLAYER 'https://paramount-network.akamaized.net/hls/live/599582/bellator-main/master.m3u8' ;}
iptv-new-aljazeera() { IPTVPLAYER 'rtmp://aljazeeraflashlivefs.fplive.net:1935/aljazeeraflashlive-live?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=/aljazeera_eng_high?videoId=883816736001&lineUpId=&pubId=665003303001&playerId=751182905001&affiliateId=.flv live=1' ;}

iptv-news-abc() { IPTVPLAYER 'http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=500,300,700,900,1200#preview-http://abclive.abcnews.com/i/abc_live1@136327/master.m3u8?b=400' ;}

iptv-sports-motorsport() { IPTVPLAYER 'http://motorsport.hopto.org:8080/' ;}
iptv-sports-pac12() { IPTVPLAYER 'http://xrxs.net/video/live-p12baya-2328.m3u8' ;}
iptv-music-hearttv() { IPTVPLAYER 'http://ooyalahd2-f.akamaihd.net/i/globalradio02_delivery@156522/master.m3u8' ;}
iptv-tv-planetgreen() { IPTVPLAYER 'http://80.80.160.168/live/4/live.m3u8' ;}
iptv-tv-trtworld() { IPTVPLAYER 'http://trtcanlitv-lh.akamaihd.net/i/TRTWORLD_1@321783/index_1500_av-p.m3u8?sd=10&rebase=on' ;}
iptv-music-vevo() { IPTVPLAYER 'http://vevoplaylist-live.hls.adaptive.level3.net/vevo/ch1/06/prog_index.m3u8' ;}
iptv-music-virgintv() { IPTVPLAYER 'http://wow01.105.net/live/virgin1/chunklist.m3u8' ;}

iptv-education-university-of-californiatv() { IPTVPLAYER 'rtmp://ucsdtv-wowza.ucsd.edu:1935/live/live_800' ;}
iptv-sports-bellatorspike() { IPTVPLAYER 'http://spikelive-f.akamaihd.net/i/spikebellator_live1@62376/master.m3u8' ;}

#}}}
# #-------- LUKS Disk Encryption (Linux Unified Key Setup) v2 (last update October 23, 2016) {{{
# #------------------------------------------------------
# # DEMO:
# # DESC: setup password protection and disk encryption on storage media
# # LINK: https://gitlab.com/cryptsetup/cryptsetup
# luks-setup-ext() {
#   if [ $# -lt 1 ]; then
#     echo -e "format device and apply LUKS disk encryption (Linux Unified Key Setup)"
#     echo -e "\nUsage: $0 <fstype:ext2/3/4> <device|partition>"
#     echo -e "Example: $0 ext2 sdx"
#     echo -e "         $0 ext4 sdx1"
#     return 1
#   fi
#   FSTYPE="$1"
#   DEVICE_NAME="$2"
#   MAPPERNAME="$DEVICE_NAME"
#   echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
#     MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
#     if [ "$MOUNT_STATUS" -ne 0 ]
#     then
#       lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
#       echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount the device then try again ${Color_Off}"
#       return 1
#     fi
#   echo -e "${Yellow}>>>Please double check the device you are about to FORMAT ${Color_Off}"
#     lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep --color -E "$DEVICE_NAME|$"
#   echo -ne "${Red}>>>WARNING: You are about to FORMAT a device at /dev/$DEVICE_NAME. Do you want to continue? [y/n] ${Color_Off}"
#     read REPLY
#     if [[ $REPLY =~ ^[Yy]$ ]]
#     then
#       echo -e "${Green}>>>You chose to continue ${Color_Off}"
#     else
#       return 1
#     fi
#   echo -e "${Yellow}>>>Setting up LUKS encryption ${Color_Off}"
#     sudo cryptsetup -y -v luksFormat /dev/"$DEVICE_NAME"
#     sudo cryptsetup luksOpen /dev/"$DEVICE_NAME" "$MAPPERNAME"
#   echo -e "${Red}>>>Formatting device ${Color_Off}"
#     sudo mkfs."$FSTYPE" /dev/mapper/"$MAPPERNAME"
#   echo -e "${Yellow}>>>Changing permission of the filesystem ${Color_Off}"
#     mkdir -p -v /tmp/testluks
#     sudo mount /dev/mapper/"$MAPPERNAME" /tmp/testluks
#     sudo chmod -R 777 /tmp/testluks
#   echo -e "${Green}>>>Change EXT filesystem 5% reserved space to 0% (increase storage space) ${Color_Off}"
#     MOUNTED_TESTLUKS=$(df | awk '/testluks/ {print $1}')
#     sudo tune2fs -m 0 "$MOUNTED_TESTLUKS"
#     sudo tune2fs -l "$MOUNTED_TESTLUKS" | grep --color=auto 'Reserved block count'
#   echo -e "${Red}>>>Unmounting and cleanup ${Color_Off}"
#     sudo umount /tmp/testluks
#     sudo cryptsetup luksClose "$MAPPERNAME"
#     rmdir -v /tmp/testluks
# }
#
# # }}}
#-------- LUKS Headers Backup and Restore {{{
#------------------------------------------------------
luks-header-backup() {
  if [ $# -lt 2 ]; then
    echo -e "backup LUKS header"
    echo -e "\nUsage: $0 <output-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderBackup --header-backup-file "$1" /dev/"$2"
  sudo chmod 644 "$1"
}

luks-header-restore() {
  if [ $# -lt 2 ]; then
    echo -e "restore LUKS header"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  sudo cryptsetup luksHeaderRestore --header-backup-file "$1" /dev/"$2"
}

luks-header-close() {
  if [ $# -lt 1 ]; then
    echo -e "close LUKS header"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi
  mappername="$1"
  sudo cryptsetup luksClose "$mappername"
}

luks-header-open() {
  if [ $# -lt 2 ]; then
    echo -e "open LUKS device using external header file"
    echo -e "\nUsage: $0 <header-file> <luks-device|partition>"
    echo -e "\nExample: $0 mybackup_header.luks sdX"
    echo -e "           $0 mybackup_header.luks sdX1"
    return 1
  fi
  mappername="$2"
  sudo cryptsetup --header "$1" luksOpen /dev/"$2" "$mappername"
}

# }}}
#-------- LUKS Passphrase Management {{{
#------------------------------------------------------
luks-passphrase-list() {
  if [ $# -lt 1 ]; then
    echo -e "list all LUKS key slot"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi
  sudo cryptsetup luksDump /dev/"$1" | grep Slot
}

luks-passphrase-delete() {
  if [ $# -lt 1 ]; then
    echo -e "delete a LUKS passphrase key slot using any existing passphrase"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -n -e "${Red}Which Key Slot Do You Want to Delete? [Number 0-7] ${Color_Off}"
  read REPLY
  if [[ $REPLY =~ ^[01234567]$ ]]
  then
    sudo cryptsetup luksKillSlot /dev/"$1" "$REPLY"
  else
    return 1
  fi

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-remove() {
  if [ $# -lt 1 ]; then
    echo -e "remove a LUKS passphrase by re-entering the passphrase you want to remove"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Remove a Key else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksRemoveKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

luks-passphrase-add() {
  if [ $# -lt 1 ]; then
    echo -e "add new LUKS passphrase (8 slot maximum)"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "\nExample: $0 sdX"
    echo -e "           $0 sdX1"
    return 1
  fi

  # list key slot before
  sudo cryptsetup luksDump /dev/"$1" | grep Slot

  echo -e "${Red}Add new Key if Slot is still unused (aka DISABLED) else hit Ctrl+C to cancle ${Color_Off}"
  sudo cryptsetup luksAddKey /dev/"$1"

  # list key slot after
  if [ $? -eq 0 ]; then
    echo -e "${Green}--------------- Updated Key Slot -------------${Color_Off}"
    sudo cryptsetup luksDump /dev/"$1" | grep Slot
  else
    return 1
  fi
}

# }}}
#-------- Mount LUKS {{{
#------------------------------------------------------
mount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "mount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl unlock -b /dev/"$arg"
    sleep 0.1
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl mount -b /dev/"$dm_mountpoint"
  done
}

unmount-udisksctl-luks() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount LUKS encrypted device like most GUI file manager"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    dm_mountpoint=$(lsblk -o "KNAME,NAME" | grep -A 1 "$arg" | tail -1 | awk '{print $1}')
    udisksctl unmount --force -b /dev/"$dm_mountpoint"
    udisksctl lock -b /dev/"$arg"
  done
}

mount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "mount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo cryptsetup luksOpen /dev/"$arg" "$mappername"
    mkdir -p /tmp/"$arg"
    sudo mount /dev/mapper/"$mappername" /tmp/"$arg"
  done
}

unmount-luks() {
  if [ $# -lt 1 ]; then
    echo -e "unmount LUKS disk encrypted device"
    echo -e "\nUsage: $0 <luks-device|partition>"
    echo -e "Example: $0 sdX"
    echo -e "         $0 sdX1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    mappername="$arg"

    sudo umount /tmp/"$arg"
    sudo cryptsetup luksClose "$mappername"
    rmdir "/tmp/$arg"
  done
}

# }}}
#-------- LUKS ISO Image Encryption {{{
#------------------------------------------------------
# DEMO:
# DESC: create an encryped LUKS ISO Image to burn to Disc for secure storage
# REFF: http://www.freesoftwaremagazine.com/articles/create_encrypted_disk_image_gnulinux
#       https://forums.gentoo.org/viewtopic-t-480356-start-0.html
luks-isosetup() {
  if [ $# -lt 3 ]; then
    echo -e "create an iso image with LUKS encryption (Linux Unified Key Setup)"
    echo -e "\nUsage: $0 <filesystem:ext2|ext3|ext4> <iso_size> <iso_name>"
    echo -e "Example: $0 ext2 700M MyCD"
    echo -e "         $0 ext3 4.7G MyDVD"
    echo -e "         $0 ext4 25G MyBluray"
    return 1
  fi
  FSTYPE="$1"
  ISO_SIZE="$2"
  ISO_NAME="$3"
  MAPPERNAME="$3"
  echo -e "${Yellow}>>>Creating empty $ISO_NAME.iso with the size of $ISO_SIZE ${Color_Off}"
    fallocate -l "$ISO_SIZE" "$ISO_NAME".iso
  echo -e "${Red}>>>Setting up encrypted LUKS ISO image ${Color_Off}"
    sudo cryptsetup -y -v luksFormat "$ISO_NAME".iso
  echo -e "${Green}>>>Open LUKS ISO image ${Color_Off}"
    sudo cryptsetup luksOpen "$ISO_NAME".iso "$MAPPERNAME"
  echo -e "${Red}>>>Formatting LUKS ISO filesystem ${Color_Off}"
    sudo mkfs."$FSTYPE" /dev/mapper/"$MAPPERNAME"
  echo -e "${Red}>>>Changing permission of the LUKS ISO image filesystem ${Color_Off}"
    mkdir -p -v /tmp/testluks
    sudo mount /dev/mapper/"$MAPPERNAME" /tmp/testluks
    sudo chmod -R 777 /tmp/testluks
    sudo umount /tmp/testluks
    sudo cryptsetup luksClose "$MAPPERNAME"
    rmdir -v /tmp/testluks
}

mount-isoluks() {
  if [ $# -lt 1 ]; then
    echo -e "mount LUKS encrypted iso image"
    echo -e "\nUsage: $0 <iso_image>"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    MAPPERNAME="$arg"
    echo -e "${Green}>>>Open LUKS ISO image ${Color_Off}"
      sudo cryptsetup luksOpen "$arg" "$MAPPERNAME"
    echo -e "${Yellow}>>>Creating mountpoint directory ${Color_Off}"
      mkdir -p -v /tmp/"$arg"
    echo -e "${Green}>>>Mount LUKS ISO image to /tmp/$arg ${Color_Off}"
      sudo mount /dev/mapper/"$MAPPERNAME" /tmp/"$arg"
  done
}

unmount-isoluks() {
  if [ $# -lt 1 ]; then
    echo -e "unmount LUKS encrypted iso image"
    echo -e "\nUsage: $0 <iso_image|directory>"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    MAPPERNAME="$arg"
    echo -e "${Yellow}>>>Unmount LUKS ISO image mountpoint ${Color_Off}"
      sudo umount /tmp/"$arg"
    echo -e "${Yellow}>>>Close LUKS ISO image ${Color_Off}"
      sudo cryptsetup luksClose "$MAPPERNAME"
    echo -e "${Yellow}>>>Remove mountpoint directory ${Color_Off}"
      rmdir -v "/tmp/$arg"
  done
}

# }}}
#-------- Folder Jumplist {{{
#------------------------------------------------------

if [[ "$OS" == "Linux" ]]; then
  .h() { cd ~ && lst ;}
  ./() { cd / && lst ;}
  .r() { cd /run/media && lst ;}
  .n() { cd /run/user/1000/gvfs && lst ;}
  .m() { cd /media && lst ;}
  .M() { cd ~/Music && lst ;}
  .D() { cd ~/Documents && lst ;}
  .d() { cd ~/Downloads && lst ;}
  .e() { cd ~/Desktop && lst ;}
  .t() { cd ~/.Torrent && lst ;}
  .x() { cd ~/.Blackbox && lst ;}
  .c() { cd ~/.Calibre && lst ;}
  .p() { cd ~/Pictures && lst ;}
  .P() { cd ~/Public && lst ;}
  .v() { cd ~/Videos && lst ;}
  .a() { cd ~/Audiobooks && lst ;}
  .g() { cd ~/Games && lst ;}
  .f() { cd ~/Files && lst ;}
  .s() { cd ~/.scripts && lst ;}
  .w() { cd ~/Pictures/Wallpapers && lst ;}
fi

if [[ "$OS" == "Windows" ]]; then
  .h() { cd ~ && lst ;}
  ./() { cd / && lst ;}
  .M() { cd "C:/Users/$USER/Music" && lst ;}
  .D() { cd "C:/Users/$USER/Documents" && lst ;}
  .d() { cd "C:/Users/$USER/Downloads" && lst ;}
  .e() { cd "C:/Users/$USER/Desktop" && lst ;}
  .p() { cd "C:/Users/$USER/Pictures" && lst ;}
  .v() { cd "C:/Users/$USER/Videos" && lst ;}
  .c() { cd "C:" && lst ;}
fi



# }}}
#-------- PS3 - Playstation 3 Package Handling {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# REFF: https://wololo.net/talk/viewtopic.php?t=46023

# https://nopaystation.com/
# https://stackoverflow.com/q/46824020
# https://stackoverflow.com/a/4701146
# https://www.youtube.com/watch?v=NyCl8jLLn34

ps3-split-iso() {
  if [ $# -lt 1 ]; then
    echo -e "split ps3 (playstation 3) iso games to 4GB per file to fit on FAT32 device"
    echo -e "\nUsage: $0 <iso>"
    echo -e "\nExample:\n$0 <file.iso>"
    echo -e "$0 SSF4.iso"
    echo -e "$0 TombRaider.iso TheLastOfUs.iso SaintsRow4.iso"
    echo -e "$0 *.iso"
    echo -e "\nOutput Example:
             /SSF4/SSF4.iso.0
             /SSF4/SSF4.iso.1
             /SSF4/SSF4.iso.2
             /SSF4/SSF4.iso.3
             /SSF4/SSF4.iso.4
             "
    echo -e "\nHow To Install PS3 ISO Files:
      For Game.ISO.0..1...2 etc. Move the files to a folder named **PS3ISO** at the root of the USB drive.
      This way, the games can be played/viewed/copied from the Multiman XMB Game column with cover art before copying.
      Multimans file browser (mmOS) doesnt join Game.ISO.0 files when copied. Only in the Multiman XMB.
    "
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    # check if is an iso file and greater than 4GB and if folder exist, skip splitting process (per file) if condition is not met
    filesize=$(stat -c '%s' "$arg")
    while [ "${arg##*.}" = iso ] && [ "$filesize" -ge 4294967295 ] && [ ! -d "${arg%%.*}" ]
    do
      # create folder, split ps3 games to 4GB a piece to work with FAT32 limitations
      mkdir "${arg%%.*}"
      split -a 1 -b 4294967295 -d --numeric-suffixes=0 "$arg" "${arg%%.*}"/"$arg".
    done
  done
}
ps3-split-pkg() {
  if [ $# -lt 1 ]; then
    echo -e "split ps3 (playstation 3) pkg games to 4GB per file to fit on FAT32 device"
    echo -e "\nUsage: $0 <pkg>"
    echo -e "\nExample:\n$0 <file.pkg>"
    echo -e "$0 GTA_V.pkg"
    echo -e "$0 NBAJam.pkg Tekken5.pkg Uncharted3.pkg"
    echo -e "$0 *.pkg"
    echo -e "\nOutput Example:
             /GTA_V/GTA_V.pkg.66600
             /GTA_V/GTA_V.pkg.66601
             /GTA_V/GTA_V.pkg.66602
             /GTA_V/GTA_V.pkg.66603
             /GTA_V/GTA_V.pkg.66604
             "
    echo -e "\nHow To Install PS3 Game/Rap Files:
    - Requirements: Download & Install To PS3 > reActPSN http://store.brewology.com/ahomebrew.php?brewid=126
      - Note: reActPSN is for Installing Rap Files
    - Requirements: Download & Install To PS3 > MultiMan (Base) https://store.brewology.com/ahomebrew.php?brewid=24
      - Note: MultiMan is for Installing pkg PS3 Game files

    - PC > Split the PKG Games if is too large to fit on USB device
    - PC > copy exdata/UP1004-NPUB31154_00-GTAVDIGITALDOWNL.rap to USB:/exdata/UP1004-NPUB31154_00-GTAVDIGITALDOWNL.rap
    - PC > copy packages/Grand Theft Auto V/ to USB:/packages/Grand Theft Auto V/
    ----
        USB:/exdata/UP1004-NPUB31154_00-GTAVDIGITALDOWNL.rap
        USB:/packages/Grand Theft Auto V/Grand Theft Auto V.pkg.66600
        USB:/packages/Grand Theft Auto V/Grand Theft Auto V.pkg.66601
        USB:/packages/Grand Theft Auto V/Grand Theft Auto V.pkg.66602
        USB:/packages/Grand Theft Auto V/Grand Theft Auto V.pkg.66603
        USB:/packages/Grand Theft Auto V/Grand Theft Auto V.pkg.66604
    ----
    - IMPORTANT: Plug In Your USB Drive To The USB Port Closes To The PS3 BluRay Drive

    # Installing RAP Files
    - PS3 > User > Create New User > Enter a user name [aa]
    - Switch user/Login as aa: PS3 > User > aa > it will autorename itself to [reActPSN 2.0] profile
    - PS3 > Game > reActPSN > this will install any rap files in your USB:/exdata/

    # Installing PKG Game Files
    - PS3 > Game > Multiman > Press Start+Select (switch to File Manager aka mmOS)
    - File Manager (mmOS) > PS3 Root > **dev_usb000** > packages > highlight Grand Theft Auto V folder > Press O > **Copy** > Press X
    - File Manager (mmOS) > PS3 Root > **dev_hdd0** > Press O > **Paste** > Yes
      - Note: when it transfer to the ps3 hdd, it will auto merge all the Grand Theft Auto V.pkg.6660* files
      - Note2: the merged files on the PS3 internal HDD will be auto deleted once it is installed
    - File Manager (mmOS) > PS3 Root > **dev_hdd0** > Grand Theft Auto V > highlight Grand Theft Auto V.pkg > Press X (twice) > Yes (exit Multiman)
    - PS3 > Game > Package Manager > Install Package Files > **Standard** > Grand Theft Auto V.pkg > Press X (Installing) > Wait a long time
    "
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    # check if is a pkg file and greater than 4GB and if folder exist, skip splitting process (per file) if condition is not met
    filesize=$(stat -c '%s' "$arg")
    while [ "${arg##*.}" = pkg ] && [ "$filesize" -ge 4294967295 ] && [ ! -d "${arg%%.*}" ]
    do
      # create folder, split ps3 games to 4GB a piece to work with FAT32 limitations
      mkdir "${arg%%.*}"
      split -a 5 -b 4294967295 -d --numeric-suffixes=66600 "$arg" "${arg%%.*}"/"$arg".
    done
  done
}
ps3-merge() {
  if [ $# -lt 1 ]; then
    echo -e "merge ps3 (playstation 3) pkg games to a single large file"
    echo -e "\nUsage: $0 <file>"
    echo -e "\nExample:\n$0 Yakuza_5_Part1.pkg Yakuza_5_Part2.pkg Yakuza_5_Part3.pkg"
    echo -e "$0 Beyond_Two_Souls_Part*.pkg"
    echo -e "\nOutput Example:
             Yakuza_5_Part1_merged.pkg
             "
    return 1
  fi
  cat "$@" > "${1%.*}"_merged."${1##*.}"
}
ps3-nopaystation-refreshdb() {
  SAVEDIR="$HOME/.PlayOnLinux/wineprefix/nopaystation_2.0_v0.94/drive_c/Program Files/nopaystation_2.0_v0.94"

  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSV_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSV_DLCS.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSM_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSV_UPDATES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSV_THEMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSX_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSP_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSP_DLCS.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PSP_THEMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS3_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS3_DLCS.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS3_THEMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS3_AVATARS.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS4_GAMES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS4_DLCS.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS4_UPDATES.tsv
  wget -P "$SAVEDIR" https://nopaystation.com/tsv/PS4_THEMES.tsv
}
# }}}
#-------- LOCAL BINARY {{{
#------------------------------------------------------
alias esrpatch='~/.bin/esr-utils-cli/esrpatch'
alias esrunpatch='~/.bin/esr-utils-cli/esrunpatch'
# alias epub="python2 ~/.bin/epub/epub.py"
alias wikimd="$EDITOR ~/.vimwiki/wikimd/index.md"
alias ncdm="~/.bin/ncdm/ncdm"
# }}}

####################
##### DEAD LIST ####
####################
# Code that just went dead due to changes in API
#  waiting to see if changes can be made to bring it back to life



####################
##### TESTING ######
####################
# New code dump, stuff I am creating or copy from others

# #-------- Copying Disc Media CD / DVD / BluRay {{{
# #------------------------------------------------------
# # DEMO: https://www.youtube.com/watch?v=pWuBTxZbKw4
# # LINK: http://dvdbackup.sourceforge.net/
# # REFF: https://wiki.archlinux.org/index.php/dvdbackup
# #       https://gist.github.com/pwood/462680
# #       http://linuxcommando.blogspot.com/2014/04/backup-and-playback-dvd-from-hard-drive.html
# #       https://github.com/joelbassett/ace-encode/blob/master/dvd-rip
# #       http://joelbassett.github.io/ace-encode/
# #       http://crunchbang.org/forums/viewtopic.php?id=18298
# #       https://sourceforge.net/p/dvdauthor/mailman/message/8878064/
#
#
# exactcopy-dvdmovie() {
#   if [ $# -lt 1 ]; then
#     echo -e "backup dvd video to iso, keeping dvd video menu and title in tack."
#     echo -e "libdvdcss will be used to rip the dvd video if it has copyright protection on it."
#     echo -e "\nUsage: $0 <save-path>"
#     echo -e "\nExample:\n$0 ."
#     echo -e "$0 /home/user/Videos"
#     echo -e "\ndemo: https://www.youtube.com/watch?v=pWuBTxZbKw4"
#     echo -e "dependencies: dvdbackup gawk libdvdread libdvdcss (cdrtools or cdrkit)"
#     return 1
#   fi
#   # reference:
#
#   # location to save dvd iso output
#   cd "$1"
#
#   DISC_TITLE=$(blkid -o value -s LABEL)
#   DISC_DEVICE=$(blkid | awk -F':' '{print $1}')
#
#   # backup DVD video and show progress bar
#   # it will save in the current directory
#   dvdbackup --progress --mirror --verbose --input="$DISC_DEVICE" --name="$DISC_TITLE"
#
#   # create iso from dvdbackup files then cleanup temp files
#   # note: -V TITLE_IN_CAPS_WO_SPACE is to name the dvdvideo else it will default to "CDROM" when it is mounted
#   mkisofs -V "$DISC_TITLE" -dvd-video -udf -o "$DISC_TITLE".iso "$DISC_TITLE" \
#     && rm -rfv "$DISC_TITLE"
#
#   # eject dvd
#   eject "$DISC_DEVICE"
#
#   echo -e "${Green}>>> DVD ISO Outputed To: $PWD/$DISC_TITLE.iso ${Color_Off}"
# }
#
# # REFF: https://askubuntu.com/questions/147800/ripping-dvd-to-iso-accurately
# #       https://linux.101hacks.com/unix/create-iso-file-from-cd-dvd/
# #       https://www.cyberciti.biz/tips/linux-creating-cd-rom-iso-image.html
# exactcopy-datadisc() {
#   if [ $# -lt 1 ]; then
#     echo -e "backup cd/dvd/bluray data disc to iso"
#     echo -e "\nUsage: $0 <save-path>"
#     echo -e "\nExample:\n$0 ."
#     echo -e "$0 /home/user/ISO"
#     echo -e "dependencies: util-linux gawk coreutils (cdrtools or cdrkit)"
#     return 1
#   fi
#   DISC_TITLE=$(blkid -o value -s LABEL)
#   DISC_DEVICE=$(blkid | awk -F':' '{print $1}')
#   BLOCK_SIZE=$(isoinfo -d -i "$DISC_DEVICE" | awk -F: '/block size/ {print $2}' | awk '{$1=$1};1')
#   VOLUME_SIZE=$(isoinfo -d -i "$DISC_DEVICE" | awk -F: '/Volume size/ {print $2}' | awk '{$1=$1};1')
#
#   # location to save iso output
#   cd "$1"
#
#   # auto get disc location, title, blocksize, volume size... this might take a few minutes to gather information
#   # then start copying disc to iso
#   dd if="$DISC_DEVICE" of="$DISC_TITLE".iso bs="$BLOCK_SIZE" count="$VOLUME_SIZE" status=progress
#
#   # eject disc
#   eject "$DISC_DEVICE"
#
#   echo -e "${Green}>>>ISO Outputed To: $PWD/$DISC_TITLE.iso ${Color_Off}"
# }
#
#
# # Avoid using ISO: Audio CD has multiple tracks, ISO is single track only, it cannot handle multiple tracks
# # https://wiki.archlinux.org/index.php/Rip_Audio_CDs#Creating_bin.2Fcue_files_from_CD
# # https://ubuntuforums.org/showthread.php?t=1287829&p=8084611#post8084611
# # https://www.togaware.com/linux/survivor/Duplicate_Audio.html
# # https://help.ubuntu.com/community/cdrdao#Doing_it_the_hard_way
# exactcopy-audiocd() {
#   if [ $# -lt 1 ]; then
#     echo -e "backup cd/dvd/bluray data disc to iso"
#     echo -e "\nUsage: $0 <save-path>"
#     echo -e "\nExample:\n$0 ."
#     echo -e "$0 /home/user/ISO"
#     echo -e "dependencies: util-linux gawk coreutils (cdrtools or cdrkit)"
#     return 1
#   fi
#   DISC_TITLE=$(blkid -o value -s LABEL)
#   DISC_DEVICE=$(blkid | awk -F':' '{print $1}')
#   BLOCK_SIZE=$(isoinfo -d -i "$DISC_DEVICE" | awk -F: '/block size/ {print $2}' | awk '{$1=$1};1')
#   VOLUME_SIZE=$(isoinfo -d -i "$DISC_DEVICE" | awk -F: '/Volume size/ {print $2}' | awk '{$1=$1};1')
#
#   # location to save iso output
#   cd "$1"
#
#   # auto get disc location, title, blocksize, volume size... this might take a few minutes to gather information
#   # then start copying disc to iso
#   # dd if="$DISC_DEVICE" of="$DISC_TITLE".iso bs="$BLOCK_SIZE" count="$VOLUME_SIZE" status=progress
#   cdrdao read-cd --read-raw --datafile cdimage.bin cdimage.cue
#
#   # eject disc
#   eject "$DISC_DEVICE"
#
#   echo -e "${Green}>>>BIN/CUE Image Outputed To: $PWD/$DISC_TITLE.iso ${Color_Off}"
# }
# # }}}
#-------- F3 - Check Fake Drives {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

f3check() {
  if [ $# -lt 1 ]; then
    echo -e "check if usb flash drive/sd card is fake or real capacity"
    echo -e "\nUsage: $0 <mounted path>"
    echo -e "Example: $0 /run/media/user/FC30-3DA9/"
    return 1
  fi
  echo -e "${Green}>>>Writing .h2w test files to usb drive ${Color_Off}"
    f3write "$1"
  echo -e "${Yellow}>>>Reading .h2w test files from usb drive ${Color_Off}"
    f3read "$1"
  echo -ne "${Red}>>>Cleanup .h2w, do you want to delete these test files? [y/n] ${Color_Off}"
    read REPLY
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      find "$1"/ -name "*.h2w" -type f -print0 | xargs -0 /bin/rm -vf 
    else
      echo -e "${Yellow}>>>You chose to skip removing test files ${Color_Off}"
    fi
}
# }}}
#-------- Catalog - Search and Index Storage Media {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

catalog-index() {
  if [[ $# -lt 2 || $1 == "-h" || $1 == "--help" ]]
  then
    echo -e "create or update catalog database index of storage media"
    echo -e "\nUsage:\n$0 <label> <path>"
    echo -e "\nexample:\n$0 animeshows /run/media/username/animeshows"
    return 1
  fi
  mkdir -p ~/.catalog
  find "$2" -exec /usr/bin/ls -lRphd --time-style=long-iso {} \; | awk '{ print $5"\t"$6, substr($0, index($0,$8)) }' > ~/.catalog/"$1.db"
}

catalog-search() {
  if [[ $# -lt 1 || $1 == "-h" || $1 == "--help" ]]; then
    echo -e "searching all catalog database"
    echo -e "\nUsage:\n$0 <keywords>"
    echo -e "\nexample:\n$0 marvel x men"
    echo -e "\nending extension:\n$0 spiderman mkv$"
    echo -e "\nOR operator:\n$0 'marvel|dc'"
    echo -e "$0 'justice league (mkv|mp4)'"
    echo -e "$0 '(avengers|batman) (mkv|mp4)'"
    echo -e "$0 '(black panther|iron man) (zip|rar)$'"
    echo -e "\nquit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
  keyword=$(echo "$@" |  sed -e 's/ /.*/g')
  /usr/bin/grep -Ehi "$keyword" ~/.catalog/* | vim --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -
}

# }}}
#-------- Clonezilla CLI (Autorun LiveCD/USB) {{{
#------------------------------------------------------

# ///Note/// Due to the limitations of program mkisofs
# ocs-iso can not process an image file larger than 4.5 GB.
# For this reason, if your image is larger than 4.5 GB
# ocs-iso will refuse to process it.
# http://clonezilla.org/make-live-recovery-manually.php
# http://clonezilla.org/show-live-doc-content.php?topic=clonezilla-live/doc/04_Create_Recovery_Clonezilla
# https://rbgeek.wordpress.com/2013/04/16/part-2-creation-of-autorun-recovery-clonezilla-live-cddvd-from-image/#more-8366
clonezilla-create-recoveryiso() {
	if [ $# -lt 2 ]; then
		echo -e "create recovery autorun cd using existing clonezilla sarge image recovery-iso-zip feature in clonezilla"
		echo -e "\nUsage: $0 <existing_image> <device>"
		echo -e "\nExample: $0 mydesktop sdx"
		echo -e "\nNote: <device> is the harddrive that is on the machine this livecd is going to restore to (sdx)"
		echo -e "Note2: <output_file> will be saved to your current path"
		return 1
	fi
        # set current pwd as the output path
        sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf

        # the exisiting image you have already made with clonezilla aka sarge-image
        SARGE_IMAGE="$1"

        # device that the autorun cd will restore the image to (sdx for linux or hdx for windows)
        # use "ask_user" if you want the user to select the device
        DEVICE_DRIVE="$2"


        # convert sarge_image to ISO livecd
sudo ocs-iso -g en_US.UTF-8 -t -k NONE -e "-g auto -e1 auto -e2 -c -r -j2 -p true restoredisk $SARGE_IMAGE $DEVICE" "$SARGE_IMAGE"

        # set output file permissions to everyone
	# sudo chmod -R 777 "$OUTPUT_FILE"
}

# }}}
# #-------- Environment Variable {{{
# #------------------------------------------------------
# export HISTCONTROL=ignoreboth			#Remove Extra Commands
# export HISTCONTROL=erasedups			#Erase duplicates across the whole history
# HISTCONTROL=ignorespace				#Space follow by a cmd,will not be saved in history
# HISTCONTROL=ignoredups				#Rm Dupes, the continuous repeated entry from history
# HISTFILESIZE=3000				#Bash history size limit
# HISTSIZE=1000
# export HISTTIMEFORMAT="%d/%m/%y %T "		#History list shows digital time and date
# # Set 256 Colors
# # http://blog.sanctum.geek.nz/256-colour-terminals/
# # if [ -e /usr/share/terminfo/x/xterm-256color ]; then
# #    export TERM='xterm-256color'
# # fi
#
# #}}}
#-------- Weechat XDCC {{{
#------------------------------------------------------
# http://nibl.co.uk/bots.php?search=

xdcc-nibl() {
    if [ $# -lt 1 ]
    then
        echo -e "Download XDCC files from using weechat from (#nibl @ irc.rizon.net)"
        echo -e "Search using http://nibl.co.uk/bots.php?search="
        echo -e "\nUsage:\n$0 </msg>"
        echo -e "\nexample:\n$0 '/msg AHQ[Turtle] xdcc send #1721'"

        return 1
    fi

    echo "irc.rizon.#nibl *$1" > "$(ls ~/.weechat/weechat_fifo*)"
}




# }}}
#-------- Slrn (Text Base News Client) {{{
#------------------------------------------------------
# https://wiki.archlinux.org/index.php/Slrn
# http://news.gmane.org/search.php?match=linux
#
export NNTPSERVER='news.gmane.org'

# }}}
#-------- Battery Status {{{
#------------------------------------------------------
# https://www.reddit.com/r/debian/comments/41sw7g/checking_battery_status_in_terminal/cz68iwq
alias batterystatus="upower -i /org/freedesktop/UPower/devices/........ | grep time"
alias batteryshow='cat /sys/class/power_supply/BAT1/status'
# }}}
#-------- Binary / Shell Scripts {{{
#------------------------------------------------------


# lightweight image viewer
# tutorial video: https://www.youtube.com/watch?v=OMOIZlOEfb8
# https://wiki.archlinux.org/index.php/Feh#File_Browser_Image_Launcher
feh-browser() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 & }
feh-slideshow() { ~/.scripts/feh_browser.sh $@ -B white -g 1280x800 -D 3 & }


# manual tiling (similar compiz grid plugin)
# tutorial video: https://www.youtube.com/watch?v=ZF76DELEpjM
# http://ssokolow.com/quicktile
rld-quicktile() { kill $(ps -ef | grep -i '[q]uicktile' | awk '{print $2}') & quicktile --daemonize & disown ;}
kill-quicktile() { kill $(ps -ef | grep -i '[q]uicktile' | awk '{print $2}') ;}

# http://bash.cyberciti.biz/multimedia/linux-rip-audio-cd/
rip-audio-cd() { ~/.scripts/rip_audio_cd.sh ;}

# screenshot gallery generator
# tutorial video: https://www.youtube.com/watch?v=_4G4nMUTzX8
# http://cli-apps.org/content/show.php/Movie+Thumbnailer?content=74676
shot() { ~/.scripts/shot.sh -n 30 -r 80% -s $@ ;}

# take screenshot fullscreen, window, area selection using import command
# http://en.gentoo-wiki.com/wiki/Screenshot
sshot() { ~/.scripts/screenshot.sh area ;}


#}}}
#-------- Copy Move {{{
#------------------------------------------------------
cpr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync copying files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress "$@" ;;
		esac
	fi
}
mvr() {
	if [ $# -lt 1 ]; then
        echo -e "rsync moving files using task spooler queue"
        echo -e "\nUsage:\n$0 [-h help] [-t task-spooler] <source> <destination>"
        echo -e "\nInclude Parent Folder:\n$0 <source> <destination>"
        echo -e "\nExclude Parent Folder:\n$0 <source>/ <destination>"
        echo -e "\nRequirements: rsync task-spooler"
        return 1
	else
		case "$1" in
		  -t) tsp rsync -a --remove-source-files "$@" ;;
		  -h) $0 ;;
		  -*) $0 ;;
		  *) rsync -av --progress --remove-source-files "$@" ;;
		esac
	fi
}
# }}}
#-------- Python Pip VirtualEnv (Python Isolated Environment) {{{
#------------------------------------------------------

# tutorial video: https://www.youtube.com/watch?v=n8ZzqsFeHOI

PATH_VIRTUALENV=~/.virtualenv

pipvenv-create() {
  if [ $# -lt 1 ]; then
    echo -e "create an empty isolated python environment (aka sandbox)"
    echo -e "\nUsage: $0 <package> <python-version|no argument = newest python version>"
    echo -e "Example: $0 rtv"
    echo -e "         $0 flexget python2.7"
    return 1
  fi
  mkdir -p "$PATH_VIRTUALENV"
  cd "$PATH_VIRTUALENV"
  virtualenv "$1" -p "${2:-python}"
  source "$1"/bin/activate
}
pipvenv-install() {
  if [ $# -lt 1 ]; then
    echo -e "install a pip package to an isolated python environment (aka sandbox)"
    echo -e "\nUsage: $0 <package> <python-version|no argument = newest python version>"
    echo -e "Example: $0 rtv"
    echo -e "         $0 flexget python2.7"
    return 1
  fi
  mkdir -p "$PATH_VIRTUALENV"
  cd "$PATH_VIRTUALENV"
  virtualenv "$1" -p "${2:-python}"
  source "$1"/bin/activate
  pip install "$1"
}
pipvenv-activate() {
  if [ $# -lt 1 ]; then
    echo -e "activate an installed pip package from an isolated python environment (aka sandbox)"
    echo -e "\nUsage: $0 <package>"
    echo -e "Example: $0 rtv"
    return 1
  fi
  cd "$PATH_VIRTUALENV"
  source "$1"/bin/activate
}
pipvenv-deactivate() { deactivate ;}

pipvenv-remove() {
  if [ $# -lt 1 ]; then
    echo -e "remove an installed pip package from an isolated python environment (aka sandbox)"
    echo -e "\nUsage: $0 <package>"
    echo -e "Example: $0 rtv"
    return 1
  fi
  cd "$PATH_VIRTUALENV"
  rm -rf "$1"
}

# }}}
#-------- Convert to Image {{{
#------------------------------------------------------
# pdftoppm convert pdf to images
# http://askubuntu.com/a/50180
convert-pdf-to-png() {
    if [ $# -lt 1 ]
    then
        echo -e "Convert PDF document to PNG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -png "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert-pdf-to-jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "Convert PDF document to JPEG image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -jpeg "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert-pdf-to-tiff() {
    if [ $# -lt 1 ]
    then
        echo -e "Convert PDF document to TIFF image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -tiff "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert-pdf-to-pgm-grayscale() {
    if [ $# -lt 1 ]
    then
        echo -e "Convert PDF document to PGM Grayscale image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -gray "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

convert-pdf-to-pbm-monochrome() {
    if [ $# -lt 1 ]
    then
        echo -e "Convert PDF document to PBM Monochrome image (default dpi is 150)"
        echo -e "\nUsage:\n$0 <pdf> <dpi> <startingpage> <endingpage>"
        echo -e "\nall pages to images:\n$0 file.pdf"
        echo -e "\nchange dpi (common dpi are 150, 300, 600):\n$0 file.pdf 300"
        echo -e "\nsingle page to image:\n$0 file.pdf 300 5"
        echo -e "\nmultiple pages to images:\n$0 file.pdf 300 5 12"

        return 1
    fi
    pdftoppm -mono "$1" "${1%.*}"-"${2:-150}"DPI -r "${2:-150}" -f "$3" -l "${4:-$3}"
}

# }}}
#-------- Disk Image to ISO {{{
#------------------------------------------------------

#  https://github.com/helmuthdu/dotfiles/blob/master/.bashrc
convert-to-discimage_iso () {
    if [[ $# == 0 || $1 == "--help" || $1 == "-h" ]]; then
      echo -e "Converts raw|bin|cue|ccd|img|mdf|nrg disc image to ISO"
      echo -e "Usage: $0 <disc_image>"
    fi
    for i in $*; do
      if [[ ! -f "$i" ]]; then
        echo "'$i' is not a valid file; jumping it"
      else
        echo -n "converting $i..."
        # OUT=`echo $i | cut -d '.' -f 1`
        case $i in
              *.raw ) bchunk "$i" "${i%.*}.iso" ;; #raw=bin
        *.bin|*.cue ) bchunk "${i%.*}.bin" "${i%.*}.cue" "${i%.*}.iso" ;; # bin,cue
        *.ccd|*.img ) ccd2iso "${i%.*}.img" "${i%.*}.iso" ;; # Clone CD images
              *.mdf ) mdf2iso "$i" "${i%.*}.iso" ;; # Alcohol images
              *.nrg ) nrg2iso "$i" "${i%.*}.iso" ;; # Nero images
                  * ) echo "$0 don't know de extension of '$i'";;
        esac
        if [[ $? != 0 ]]; then
          echo -e "${R}ERROR!${W}"
        else
          echo -e "${G}done!${W}"
        fi
      fi
    done
}

# https://help.ubuntu.com/community/ManageDiscImages#CloneCD.2FIMG_Images
convert_to_iso() {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
 else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.bin)       bchunk "$1" "${1%.*}".cue "${1%.*}".iso ;; # bin/cue
          *.cue)       bchunk "${1%.*}".bin "$1" "${1%.*}".iso ;; # bin/cue
          *.img)       ccd2iso "$1" "${1%.*}".iso ;; # CloneCD/IMG
          *.nrg)       nrg2iso "$1" "${1%.*}".iso ;;
          *.mdf)       mdf2iso "$1" "${1%.*}".iso ;;
          *.mds)       mdf2iso "${1%.*}".mdf "${1%.*}".iso ;;
          *)           echo "$0: '$1' - unsupported format" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
fi
}

# ex() -- Extract compressed files (tarballs, zip, etc)
ex() {
    for file in "$@"; do
        if [ -f "$file" ]; then
            local file_type=$(file -bizL "$file")
            case "$file_type" in
                *application/x-tar*|*application/zip*|*application/x-zip*|*application/x-cpio*)
                    bsdtar -x -f "$file" ;;
                *application/x-gzip*)
                    gunzip -d -f "$file" ;;
                *application/x-bzip*)
                    bunzip2 -f "$file" ;;
                *application/x-rar*)
                    7z x "$file" ;;
                *application/octet-stream*)
                    local file_type=$(file -bzL "$file")
                    case "$file_type" in
                        7-zip*) 7z x "$file" ;;
                        *) echo -e "Unknown filetype for '$file'\n$file_type" ;;
                    esac ;;
                *)
                    echo -e "Unknown filetype for '$file'\n$file_type" ;;
            esac
        else
            echo "'$file' is not a valid file"
        fi
    done
}


# }}}
#-------- Convert to Documents {{{
#------------------------------------------------------
convert_images_to_pdf() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <images>"
        echo -e "\nexample:\n$0 image1.jpg image2.jpg image3.jpg"
        echo -e "\n$0 *.jpg"
        echo -e "\n$0 *.png"

        return 1
    fi
    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf
}


# Using libreoffice
convert_to_html() { soffice --headless --convert-to "html:XHTML Writer File:UTF8" "$1" ;}
convert_to_txt() { soffice --headless --convert-to "txt:Text (encoded):UTF8" "$1" ;}


# convert_to_pdfo() {
#  if [ -z "$1" ]; then
#     # display usage if no parameters given
#     echo "Usage: extract <path/file_name>.<bin|cue|img|nrg|mdf|mds>"
#  else
#     if [ ! -f "${1%.*}".pdf ] ; then
#         NAME=${1%.*}
#         case "$1" in
#           *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
#           *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
#           *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
#           *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
#           *.html)          soffice --headless --convert-to pdf "$@" ;;
#           *.epub)          soffice --headless --convert-to pdf "$@" ;;
#           *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
#           *.jpg|*.jpeg)    convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.pbm|*.pgm)     convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *.png)           convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
#           *)               echo "'$1' - unsupported format or file does not exist" ;;
#         esac
#     else
#         echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
#     fi
# fi
# }

# http://duff-johnson.com/2014/02/17/the-8-most-popular-document-formats-on-the-web/
convert_to_pdf() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>.<doc|docx|ppt|pptx|xls|xlsx|txt|rtf|html|epub|cbr|cbz|cbt|cb7|cba|jpg|jpeg|pbm|pgm|png>"
		echo -e "\nsingle:   $0 file.doc"
		echo -e "\nmultiple: $0 file1.jpg file2.jpg file3.jpg"
		echo -e "\nwildcard: $0 *.png"
		echo -e "\nRequirement: calibre imagemagick libreoffice"
        return 1
	else
		if [ ! -f "${1%.*}".pdf ] ; then
		NAME=${1%.*}
		case "$1" in
		  *.doc|*.docx)    soffice --headless --convert-to pdf "$@" ;;
		  *.ppt|*.pptx)    soffice --headless --convert-to pdf "$@" ;;
		  *.xls|*.xlsx)    soffice --headless --convert-to pdf "$@" ;;
		  *.txt|*.rtf)     soffice --headless --convert-to pdf "$@" ;;
		  *.html)          soffice --headless --convert-to pdf "$@" ;;
		  *.epub)          soffice --headless --convert-to pdf "$@" ;;
		  *.cbr|*.cbz|*.cb7|*.cbt|*.cba)    ebook-convert "$1" .pdf ;;
		  *.jpg|*.jpeg|*.pbm|*.pgm|*.png)   convert "$@" "${1%.*}"-`date +'%F_%Hh%Ms%S'`.pdf ;;
		  *)               echo "'$1' - unsupported format or file does not exist" ;;
		esac
		else
			echo "'${1%.*}.pdf' - file exist, skipping to prevent overwrite"
		fi
	fi
}

# }}}
#-------- Convert to Android (Smartphone, Tablet) {{{
#------------------------------------------------------
# http://develop.participatoryculture.org/index.php/ConversionMatrix
# https://trac.handbrake.fr/wiki/BuiltInPresets

ANDROID_DEVICE=(-acodec aac -ab 160k -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -f mp4 -threads 0 -strict experimental)
convert-to-devices-android_720pnd()  { ffmpeg -i "$1" -s 1280x720  ${ANDROID_DEVICE[*]} "${1%.*}".android720p.mp4 ;}
convert-to-devices-android_1080p() { ffmpeg -i "$1" -s 1920x1080 ${ANDROID_DEVICE[*]} "${1%.*}".android1080p.mp4 ;}

convert-to-droid-kindlefire() {
	if [ $# -lt 1 ]; then
		echo -e "Usage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".kindlefire.mp4 ]
		do
			ffmpeg -i "$arg" -s 1024x600 -acodec aac -ab 96k -vcodec libx264 -preset slow -f mp4 -crf 22 -strict experimental "${arg%.*}".kindlefire.mp4
		done
	done
}

convert-to-droid-androidtablet() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange Andriud Tablet devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".androidtablet.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.androidtablet.mp4" --preset="Android Tablet"
		done
	done
}

convert-to-droid-android() {
	if [ $# -lt 1 ]; then
		echo -e "A preset for Midrange android devices."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".android.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.android.mp4" --preset="Android"
		done
	done
}
convert-to-droid-high() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's general-purpose preset for High Profile H.264 video, with all the bells and whistles."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".high.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.high.mp4" --preset="High Profile"
		done
	done
}

convert-to-droid-normal() {
	if [ $# -lt 1 ]; then
		echo -e "HandBrake's normal, default settings."
		echo -e "\nUsage: $0 <file_name>"
		echo -e "\nsingle:   $0 file.avi"
		echo -e "\nmultiple: $0 file1.avi file2.avi file3.avi"
		echo -e "\nwildcard: $0 *.avi"
		return 1
	fi

	myArray=( "$@" )
	for arg in "${myArray[@]}"; do
		while [ ! -f "${arg%.*}".normal.mp4 ]
		do
			HandBrakeCLI -i "$arg" -o "${arg%.*}.normal.mp4" --preset="Normal"
		done
	done
}

# }}}
#-------- Demuxing {{{
#------------------------------------------------------

demux-videotrack() { ffmpeg -i "$1" -an -codec:v copy "${1%.*}"."$0"."${1##*.}" ;}
demux-audiotrack() { ffmpeg -i "$1" -vn -codec:a copy "${1%.*}"."$0"."${1##*.}" ;}

# demux_subs
# demux_fonts/attachments

# }}}
#-------- Plowshare {{{
#------------------------------------------------------
# d/l cyberlocker files like rapidshare, mediafire ..etc
# tutorial video: http://www.youtube.com/watch?v=5AzFdX-EyeI
# http://code.google.com/p/plowshare/
# PPA: https://launchpad.net/~plowsharepackagers
plowdown-depositfiles() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/depositfiles.txt ;}
plowdown-uploaded() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/uploaded.txt ;}
plowdown-netloadin() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/netloadin.txt ;}
plowdown-rapidgator() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidgator.txt ;}
plowdown-rapidshare() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/rapidshare.txt ;}
plowdown-random() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/random.txt ;}
plowdown-fboom() { plowdown -r 3 --max-rate 900K -m ~/.config/plowshare/fboom.txt ;}
alias plowup='plowup turbobit'

#}}}
# concat  = joinning files in a series (like a train)
# convert = change one format to another
# slice   = cut files into peices (video, sound, both)
# mux     = flatting files such as video and audio track in parallel
# demux   = extraction of video or sound tracks
# split   = split into peiceses (archive into peices like zip, rar)
# unsplit = opposite of split
# combine = join files together again (usually for splited archive files like 001, zip ..etc)
# merge   = merging 2 different files together?
# join    = ???
# cut     = already a command
#-------- Rip Disc to Files {{{
#------------------------------------------------------

#http://www.reddit.com/r/commandline/comments/19ept5/open_discussion_cool_trick_thursday_what_are_your/c8neljz
convert_audiocd_to_mp3() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.mp3" ; rm $f ; done ;}
convert_audiocd_to_flac() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.flac" ; rm $f ; done ;}
convert_audiocd_to_ogg() { cdparanoia -B ; for f in *.wav ; do sox -S $f "${f%.wav}.ogg" ; rm $f ; done ;}
convert_audiocd_to_iso() { use dd or ddrescure or readom ;}


# has CDDB tags?
ripit-mydefault() {
	ripit -o ~/Downloads -p 0 -c 0 --nointeraction "$@"
	# -p ; playlist (m3u file) 0=disable
	# --nointeraction; use 1st CDDB it finds
	# -c ; 0 - Lame (for mp3), 1 - Oggenc, 2 - Flac, 3 - Faac,
	# 	4 - mp4als, 5 - Musepack, 6 - Wavpack, 7 - ffmpeg
	# $@ ; specfic tracks like 1-4,5,8
}

rip_to_mp3() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 0 --nointeraction "$@" ;}
rip_to_ogg() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 1 --nointeraction "$@" ;}
rip_to_flac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 2 --nointeraction "$@" ;}
rip_to_aac() { mkdir -p ~/Downloads/audiocd ; ripit -o ~/Downloads/audiocd -p 0 -c 3 --nointeraction "$@" ;}

# }}}
#-------- Hardcoded Subtitles to Videos {{{
#------------------------------------------------------
# https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo
# https://www.bunkus.org/videotools/mkvtoolnix/samples/
# install ttf-ms-fonts
# ffmpeg with --enable-libass

convert_to_ass() { ffmpeg -i "$1" "${1%.*}".ass ;} # srt --> ass
convert_to_srt() { ffmpeg -i "$1" "${1%.*}".srt ;} # ass --> srt

# The first 2 are alpha
# AABBGGRR = &HAABBGGRR

# usage: aliasname filename subtitles(srt/ass)
# convert_to_hardsubs() { ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4 ;}

convert_to_hardsubs() {
if [ $# -lt 2 ]
then
	echo -e "Use ffmpeg to hardcode subtitles into one movietrack"
	echo -e "\nUsage:\n$0 [file] [subtitle (srt/ass)] [fontsize (25)] [color code (yellow)] [fontname (dejavu sans mono)]"
	echo -e "\nexample:\n$0 file.mp4 file.srt"
	echo -e "$0 file.mp4 file.srt 30 5000FF14 Arial \n"
	echo -e "kml color code: http://www.zonums.com/gmaps/kml_color/"


	exit 1
fi

ffmpeg -y -i "$1" -vf subtitles="$2":force_style="'Fontsize=${3:-25},PrimaryColour=&H${4:-5014F0FF},FontName=${5:-DejaVu Sans Mono}'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-hardsubs.mp4
}

# 1min video testing
convert_to_testing() { ffmpeg -y -i "$1" -ss 00:05:00 -t 00:01:00 -vf subtitles="$2":force_style="'Fontsize=35;FontName=DejaVu Serif,PrimaryColour=&H5014F0FF'" -codec:v libx264 -preset medium -crf 22 -codec:a aac -qscale:a 6 -strict experimental "${1%.*}"-testing.mp4 ;}


# }}}
#-------- Concatenate Files {{{
#------------------------------------------------------

# tutorial video: http://www.youtube.com/watch?v=eQoOk5Xbt3M
concat-document-pdf() {
  if [ $# -lt 1 ]; then
    echo -e "concatenate multiple pdf files into one single pdf"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file1.pdf file2.pdf file3.pdf"
    echo -e "$0 *.pdf"
    echo -e "\nDependency: ghostscript"
    return 1
  fi
  gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="${1%.*}"-`date +'%F_%Hh%Ms%S'`_concat.pdf -f "$@"
}
split-document-pdf() {
  if [ $# -lt 3 ]; then
    echo -e "split pdf page range into one single pdf"
    echo -e "Usage: $0 <startpage> <endpage> <filename>"
    echo -e "\nExample:\n$0 2 7 file.pdf"
    echo -e "\nDependency: ghostscript"
    return 1
  fi
  gs -sDEVICE=pdfwrite -q -dNOPAUSE -dBATCH -sOutputFile="${3%.*}"_split_pages_"$1"_to_"$2".pdf -dFirstPage="$1" -dLastPage="$2" "$3"
}


# }}}

#-------- Concatenate Videos {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# DEMO: https://www.youtube.com/watch?v=EAWGFJoZXAU
concat-video-avi() {
  if [ $# -lt 1 ]; then
    echo -e "Usage: $0 <file>"
    echo -e "\nExample: \n$0 file1.avi file2.avi file3.avi"
    echo -e "$0 *.avi"
    echo -e "\nrequires package: transcode"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    while [ ! -f "${arg%.*}"-movie.mp4 ]
    do
      avimerge -o "${1%.*}".concat.avi -i "$arg"
    done
done
}


# VIDEOCODEC="Xvid"
# AUDIOCODEC="MP3"
# for FIL in `ls *mp4 | sort` ; do
# avidemux2 --video-codec $VIDEOCODEC --audio-codec $AUDIOCODEC --force-alt-h264 --load "$FIL" --save ${FIL%.*}.avi --quit
# done


# concat_movie() {
# 	appendfile=$(echo "$@" | sed 's: : --append :g')
# 	avidemux2_cli --nogui --audio-codec copy --video-codec copy --output-format "${1##*.}" --load $(echo $appendfile) --save "${1%.*}"-appended."${1##*.}"
# }
#
concat-video-movie() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}

concat-video-mp4() {
	avidemux2_cli --nogui --force-alt-h264 \
	--audio-codec copy --video-codec copy --output-format "${1##*.}" \
	--load "$1" --append "$2" --append "$3" --append "$4" \
	--append "$5" --append "$6" --append "$7" --append "$8" \
	--save "${1%.*}"-appended."${1##*.}"
}


# }}}


#-------- Extract Files {{{
#------------------------------------------------------

# http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
extract_pdf() {
    if [ $# -lt 2 ]
    then
        echo -e "convert images into one single pdf"
        echo -e "\nUsage:\n$0 <input file> <startingpage> <endingpage>"
        echo -e "\nexample:\n$0 file.pdf 6"
        echo -e "\n$0 file.pdf 13 26"

        return 1
    fi

    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage="${2}" -dLastPage="${3:-$2}" -sOutputFile="${1%.pdf}"_p"${2}"-p"${3:-$2}".pdf "${1}"
}

archive-extract-ext() {
  if [ $# -lt 1 ]; then
    echo -e "extract all files into it own individual folder (via taskspooler and atool)"
    echo -e "Usage: $0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.7z file3.rar"
    echo -e "$0 *.zip"
    echo -e "$0 *.rar"
    echo -e "$0 *.7z"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    TS_SOCKET=/tmp/ranger tsp atool -x "$arg"
  done
}
archive-createall-zip() {
  if [ $# -lt 1 ]; then
    echo -e "extract all files into it own individual folder (via taskspooler and atool)"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.7z file3.rar"
    echo -e "$0 *.zip"
    echo -e "$0 *.rar"
    echo -e "$0 *.7z"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    TS_SOCKET=/tmp/ranger tsp atool -a "${arg%%.*}".zip "$arg"
  done
}

# }}}
#-------- Muxing {{{
#------------------------------------------------------
mux_to_mkv() {
	# mkvmerge -o newfile.mkv part1.mkv +part2.mkv
	# appendfile=$echo ${@} | sed 's: : +:g')
	appendfile=$(echo "$@" | sed 's: : +:g')
        # appendfile=$(echo "$@" | sed 's/ /\ +/g')

	mkvmerge -o "${1%.*}".mux.mkv $(echo $appendfile)
	echo $appendfile

	}

# }}}
#-------- Web Search Prefix {{{
#------------------------------------------------------
# Custom seaches
gg-comic() { sitelist=$(echo "avaxhome.ws h33t.com mycomicpost.com bdcomics.bdgamers.net" \
	  	| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-cyberlocker() { sitelist=$(echo "hotfile.com rapidshare.com mediafire.com
	uploading.com depositfiles.com zshare.net filepost.com filefactory.com
	2shared.com zippyshare.com slingfile.com wuala.com filetram.com
	4shared.com rabidfiles.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-dojin() { sitelist=$(echo "hentairules.net fakku.net hentaifromhell.net" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-icons() { sitelist=$(echo "iconseeker.com iconarchive.com iconfinder.com
	deviantart.com veryicon.com iconspedia.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-keygen() { sitelist=$(echo "crack.ms/cracks/crack.ms?id" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-music() { url=$(echo "https://encrypted.google.com/search?hl=en&q=
	intitle:index.of+mp3+"$@"+-html+-htm+-txt"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-packages() { sitelist=$(echo "sourceforge.net github.com archlinux.org/packages
	freecode.com/projects gnome.org/extension python.org/pypi gentoo.org/package" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-pastebin() { sitelist=$(echo "pastebin.com paste2.org pastie.org snipt.net
	heypasteit.com/clip pastee.org shell-fu.org commandlinefu.com catonmat.net
	linuxconfig.net github.com bitbucket.org slexy.org stackoverflow.com
	askubuntu.com superuser.com dotfiles.org dotshare.it gitorious.org
	serverfault.com wikia.com stackexchange.com" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-piratebay() { url=$(echo "http://thepiratebay.org/search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-porn() { sitelist=$(echo "youporn.com redtube.com xvideos.com xhamster.com
	tube8.com grayvee.com pornhub.com/view_video.php?viewkey tnaflix.com
	youjizz.com hardsextube.com/video drtuber.com/video pornoxo.com limesteam.com
       	motherless.com xnxx.com cliphunter.com extremetube.com/video" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-reader() { url=$(echo "https://encrypted.google.com/reader/view/#search/$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-search() { url=$(echo "https://encrypted.google.com/search?hl=en&q=$@" \
		| sed 's/ /+/g'); $BROWSER $url; }
gg-serial() { sitelist=$(echo "freeserials.com/serials/download.php?id= serials.ws/d.php?n" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-torrent() { sitelist=$(echo "eztv.it thepiratebay.se torrentzap.com fenopy.com
	torrindex.com h33t.com tokyotosho.info nyaa.eu" \
		| sed 's/ /\+OR\+site\:/g')
	url=$(echo "https://encrypted.google.com/search?hl=en&q=$@+site:$sitelist"\
		| sed 's/ /+/g'); $BROWSER $url; }
gg-translate() {
	$BROWSER http://translate.google.com/#auto/en/"$*" ;}

#}}}
#-------- GNOME 2 configs {{{
#------------------------------------------------------

# function h-framebuffer() {
# echo -e '
# mplayer -vo fbdev -fs -vf scale=1280:-3 FileName
# mplayer -vo fbdev -fs -vf scale=-3:1024 FileName
#
# on Arch linux use fbdev2
# mplayer -vo fbdev2
#
# vlc video_file
# vlc --vout fb video_file
# '}
# function h-gconf-tweaks() {
# echo -e "
# #Wallpaper Changer
# bash -c 'gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find ~/Pictures/Wallpapers -type f | shuf -n1)"'
#
# compiz --replace
# metacity --replace
# emerald --replace
# xkill
# gnome-system-monitor
# gnome-search-tool --hidden
#
# #Dont Dim When Asking for Password
# gconftool-2 --type boolean --set /apps/gksu/disable-grab "True"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Button Placement
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":minimize,maximize,close"
# gconftool-2 --set "/apps/metacity/general/button_layout" --type string ":close"
#
# #Middle Click Minimize
# gconftool-2 --set "/apps/metacity/general/action_middle_click_titlebar" --type string "minimize"
#
# #Hide Desktop Icon Drives
# gconftool-2 --set "/apps/nautilus/desktop/volumes_visible" --type boolean "false"
#
# #Disable Lock on Idle
# gconftool-2 --set "/apps/gnome-power-manager/lock/gnome_keyring_hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/hibernate" --type boolean "false"
# gconftool-2 --set "/apps/gnome-power-manager/lock/suspend" --type boolean "false"
#
# #Enable Metacity Compositing
# gconftool-2 --set '/apps/metacity/general/compositing_manager' --type boolean "true"
#
# #Disable Screensaver
# gconftool-2 --set '/apps/gnome-screensaver/idle_activation_enabled' --type boolean "false"
# gconftool-2 --set '/apps/gnome-screensaver/lock_enabled' --type boolean "false"
#
# #Clock Format
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/format' --type string "custom"
# gconftool-2 --set '/apps/panel/applets/clock_screen0/prefs/custom_format' --type string "%a %b/%d/%y, %I:%M %p"
#
# #AWN Auto Hide
# Set awn setting behavior: Custom | Autohide mode: Fade Out | Icon Effects: Simple
# gconftool-2 --set '/apps/instances/avant-window-navigator/panel-1/panel/intellihide_mode' --type string "0"
#
# #AWN OLD WAY TO AUTO HIDE
# gconftool-2 --set '/apps/awn-applet-taskmanager/intellihide' --type boolean "false"
#
# # Default Open App, LINK CLICK
# gconftool-2 -t string -s /desktop/gnome/url-handlers/magnet/command "/usr/bin/transmission-gtk %s"
# gconftool-2 -s /desktop/gnome/url-handlers/magnet/needs_terminal false -t bool
# gconftool-2 -t bool -s /desktop/gnome/url-handlers/magnet/enabled true
#
#
# "}


# }}}
#-------- Clean Stuff {{{
#------------------------------------------------------

# http://www.commandlinefu.com/commands/view/954
symlinks() { find . -type l ! -exec test -e {} \; -print ;}
symlinks-delete() { find . -type l ! -exec test -e {} \; -print0 | xargs -0 rm ;}
rm-except() {
	find . -type f -not -name '*copy*' | xargs rm
}
rmdir-empty() { find -empty -print -delete ;}
d-swiggle() { find . -type f -name '*~' -exec rm -v {} \; ;}
d-url() { find . -type f -iname '*.url' -exec rm -v {} \; ;}
d-thumbsdb() { find . -type f -iname 'Thumbs.db' -exec rm -v {} \; ;}
swiggle() { find . -name *~ -delete ;}
cleanlinks() {
	# not in the repos: inspired by http://www.xfree86.org/4.8.0/cleanlinks.1.html
	# delete empty folder
	find . -type d -empty -print0 | xargs -0 rmdir
	# delete broken symlinks
	find . -type l -xtype l | xargs -l rm
}
# }}}
#-------- Logitech K810 Keyboard {{{
#------------------------------------------------------

k810-battery() { echo Logitech K810 Battery: $(cat /sys/class/power_supply/hid-00:1f:20:a8:08:47-battery/capacity) ;}
k810-resync() { echo -e 'connect 00:1F:20:A8:08:47 \nexit' | bluetoothctl ;}
# }}}
#-------- TMSU (File Tagging CLI) {{{
#------------------------------------------------------


alias tmsu='tmsu -D ~/.tmsu/db'

tmsu-add() { tmsu tag --tags "$@" ;}
tmsu-list() { tmsu tags ;}
tmsu-repair() { tmsu repair "$@" ;}
tmsu-search() { tmsu files "$@" ;}
fzf-tmsu() {
	nohup xdg-open "$(tmsu files "$@" | fzf -e -i )" >/dev/null 2>&1&

	# if cancle or fail then exit
	if [ $? -ne 0 ]
	then
	 	exit
	fi
}
# }}}
#-------- WINE Gaming {{{
#------------------------------------------------------
# get newest version
syu-winetrickz() { cd ~/Programs/appz/winetricks; rm -f winetricks; \
      	wget http://www.kegel.com/wine/winetricks; chmod +x winetricks ;}

# http://wiki.winehq.org/winetricks
# change wineprefix location so winetricks can be use on it
set-wineprefix() {
	WINEPREFIX="$PWD"
	echo "ex: /home/username/.PlayOnLinux/wineprefix/Office2007"
	echo "wineprefix is now set to: $WINEPREFIX"
}


#}}}
#-------- DPKG {{{
#------------------------------------------------------

alias pydeb='sudo python setup.py --command-packages=stdeb.command debianize'
alias dp-installed='dpkg --get-selections | grep $1'
alias dp-deb-show='dpkg --info'			#to examine archive files
alias dp-deb-content='dpkg --contents'		#to list their contents.
whichpkg() { dpkg -S $( which $1 ); }		#lookup for what package uses this command
cmdpkg() { PACKAGE=$(dpkg -S $(which $1) | cut -d':' -f1); echo "[${PACKAGE}]"; dpkg -s "${PACKAGE}" ;}


alias dp-history-install='cat /var/log/dpkg.log | grep "install "'
alias dp-history-upgrade='cat /var/log/dpkg.log | grep upgrade'
alias dp-history-remove='cat /var/log/dpkg.log | grep remove'
dp-history-rollback() { cat /var/log/dpkg.log | grep upgrade | grep "$2" -A10000000 | grep "$3" -B10000000 |awk '{print $4"="$5}';}


dp-hold()
{
echo -n "Please enter the package you wish to put a hold on:
"
read progID
echo "$progID hold" |sudo dpkg --set-selections
}

dp-unhold()
{
echo -n "Please enter the package you wish to remove the hold on:
"
read progID
echo "$progID install" |sudo dpkg --set-selections
}


killkernel() { #Removes all unused kernel, except the newest one
	dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r \
	| sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' \
	| xargs sudo apt-get -y purge ;}

# }}}
#-------- Renaming Case {{{
#------------------------------------------------------

alias renameit="ls | rename -v 's/ /_/g'"	#change files with spaces to underscore
single-to-doubles() {
# for bash shell only
	for i in ?.jpg; do mv $i 0$i; done
	for i in ?.png; do mv $i 0$i; done
	for i in ?.PNG; do mv $i 0$i; done
}
doubles-to-triples() {
	for i in ??.jpg; do mv $i 0$i; done
	for i in ??.png; do mv $i 0$i; done
}
string-lowercase() { echo "$@" | tr '[:upper:]' '[:lower:]' ;}	# converts string to lowercase

# http://stackoverflow.com/a/3211670
nametodigit() {
	local a=1
	for i in `ls -v | grep -i "$1"`; do
	  new=$(printf "%04d.$1" "$a") #04 pad to length of 4
	  mv -- "${i}" "${new}"
	  let a=a+1
	done
}

paddy() {
for file in foo[0-9]*.png; do
  # strip the prefix ("foo") off the file name
  postfile=${file#foo}
  # strip the postfix (".png") off the file name
  number=${postfile%.png}
  # subtract 1 from the resulting number
  i=$((number-1))
  # copy to a new name in a new folder
  cp ${file} ../newframes/$(printf foo%08d.png $i)
done
}



# http://www.walkingrandomly.com/?p=2850
# adds leading zeros to digits in filenames

padme() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}

# http://www.walkingrandomly.com/?p=2850
zeropadding() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%03d" $num`
	echo ${1/$num/$paddednum}
}



zeropad() { for i in "$@" ;do mv $i `padme $i`; done ;}
# http://www.youtube.com/watch?v=rE7ISiKoNec
#lower case bash/zsh
# lowercase() {
# 	# [bash] https://www.garron.me/en/bits/rename-files-from-uppercase-to-lowercase.html
# 	for i in *; do mv $i `echo $i | tr [:upper:] [:lower:]`; done
# 	# [zsh] https://lorenzod8n.wordpress.com/category/zsh/
# 	for file in *; do mv $file ${file:l}; done
# ;}

# http://stackoverflow.com/a/11824856
lowercase-extension() { find . -name '*.*' -exec sh -c ' a=$(echo "$0" | sed -r "s/([^.]*)\$/\L\1/"); [ "$a" != "$0" ] && mv "$0" "$a" ' {} \; ;}
# }}}
#-------- Keyboard related {{{
#------------------------------------------------------

touchpad-toggle() { synclient TouchpadOff=$(synclient -l | grep -c ‘TouchpadOff.*=.*0’) ;}
lang-toggle() { setxkbmap -option grp:alt_caps_toggle "us,jp" ;}
vim-toggle() {
# https://xpressrazor.wordpress.com/2014/03/30/script-to-toggle-keys
# toggle caplock and esc key
if xmodmap -pke | egrep -i "escape" | egrep -i "keycode.*9.*"; then
 echo "Changing from original to mapped"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 66 = Escape"
 xmodmap -e "keycode 9 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
else
 echo "Changing back from mapped to original"
 xmodmap -e "clear lock"
 xmodmap -e "keycode 9 = Escape"
 xmodmap -e "keycode 66 = Caps_Lock"
 xmodmap -e "add Lock = Caps_Lock"
fi
}
# }}}
#-------- Function Informations {{{
#------------------------------------------------------

function    osr              { shutdown -r now; }
function    osh              { shutdown -h now; }

function    mfloppy          { mount /dev/fd0 /mnt/floppy; }
function    umfloppy         { umount /mnt/floppy; }

function    mdvd             { mount -t iso9660 -o ro /dev/dvd /mnt/dvd; }
function    umdvd            { umount /mnt/dvd; }

function    mcdrom           { mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom; }
function    umcdrom          { umount /mnt/cdrom; }


function    dub              { du -sclb $@; }
function    duk              { du -sclk $@; }
function    dum              { du -sclm $@; }

function    dfk              { df -PTak $@; }
function    dfm              { df -PTam $@; }
function    dfh              { df -PTah $@; }
function    dfi              { df -PTai $@; }
# }}}
#-------- OCR {{{
#------------------------------------------------------

ocr2clipboard() {
	# folder to dump it to
	DIR=/tmp

	# scale up the image resolution for better ocr-ing
	convert "$1" -resize 5000 "$DIR"/image_out.png
	# ocr the scaled image
	tesseract "$DIR"/image_out.png "$DIR"/result
	# copy to the clipboard
	xclip -selection clipboard -i "$DIR"/result.txt
}
# }}}
#-------- Midi Music {{{
#------------------------------------------------------

midplayer() { adlmidi "$1" > /dev/null 2>&1 ;}
# https://wiki.archlinux.org/index.php/FluidSynth#Standalone_mode
midi-fluidsynth() { fluidsynth -a alsa -m alsa_seq -l -i /usr/share/soundfonts/fluidr3/FluidR3GM.SF2 "$1" ;}
# }}}
#-------- SSD TRIM {{{
#------------------------------------------------------

# http://www.webupd8.org/2013/01/enable-trim-on-ssd-solid-state-drives.html
trim-check() {
#	sudo hdparm -I /dev/sda | grep "TRIM supported"
	sudo hdparm -I /dev/"$1" | awk '/.*TRIM supported.*/{ if ($1 == "*") print "Yes, TRIM is enabled"; else print "No, TRIM is not enabled." ;}'
}
trim-fstrim() { sudo fstrim -v "$1" ;}
gen-cron-trim() { sudo cp ~/.scripts/trim /etc/cron.daily/ ;}
# }}}
#-------- IMGUR {{{
#------------------------------------------------------

# imgur album downloader
# https://github.com/alexgisby/imgur-album-downloader
# tutorial video: https://www.youtube.com/watch?v=dW4co9f5Ors
imguralbum() { python ~/.scripts/imgur-album-downloader/imguralbum.py "$@" ;}

imguralbum_cbz() {
	# usage: imguralbum [link] [filename]

	local IMGUR_SAVE_PATH=/tmp

	# make a temp folder
	# mkdir -p "$IMGUR_SAVE_PATH"/"$2"

	#download album
	python ~/.scripts/imgur-album-downloader/imguralbum.py "$1" "$IMGUR_SAVE_PATH"/"$2"

	#create zip archive using .cbz extension for comics
	zip -r "${2%/}.cbz" "$IMGUR_SAVE_PATH"/"$2"

	#delete temp folder
	rm -rf "$IMGUR_SAVE_PATH"/"$2"
}
# }}}


quicksynergy-daemon() { /usr/bin/synergys --daemon --config ~/.quicksynergy/synergy.conf ;}
# mutt background fix
COLORFGBG="default;default"

jdownloader() { nohup java -jar ~/.scripts/JDownloader/JDownloader.jar >/dev/null 2>&1& }


date-global() {
# use tzselect to find timezone listing
    local SHOWTIMEZONE="$(
    alias date='date +"%a %D %l:%M %p"'
    echo "Current Location:" "$(date)"
    echo "USA LosAngeles:" "$(TZ='America/Los_Angeles' date)"
    echo "Canada Alberta:" "$(TZ='America/Edmonton' date)"
    echo "USA NewYork:" "$(TZ='America/New_York' date)"
    echo "EU London:" "$(TZ='Europe/London' date)"
    echo "Bangladesh Dhaka:" "$(TZ='Asia/Dhaka' date)"
    echo "China Xinjiang:" "$(TZ='Asia/Urumqi' date)"
    echo "Vietnam Saigon:" "$(TZ='Asia/Ho_Chi_Minh' date)"
    echo "China Beijing:" "$(TZ='Asia/Shanghai' date)"
    echo "HK HongKong:" "$(TZ='Asia/Hong_Kong' date)"
    echo "Japan Tokyo:" "$(TZ='Asia/Tokyo' date)"
    )"
    echo "$SHOWTIMEZONE" | column -t
}

mp3cut() {

	# example: cut from 5s to 10s; mpgtx -s file.mp3 "[00:05-00:10]" -b file-output
	mpgtx -s "$1" "["$2":"$3"-"$4":"$5"]" -b "${1%.*}"-output."${1##*.}"

	}

#audiobooks
mpv-saveposition() { mpv --save-position-on-quit "$@" ;}
mplayer-createplaylist() { ls --ignore="*.m3u" --ignore="*.pos" | grep -i "$1" | sort -u > "$1".m3u ;}
mpv-pip() { tsp mpv --ontop --no-border --autofit=500x280 --geometry=99%:99% "$@" ;}


#mplayer playlist
mplist(){ mplayer -playlist <(tree -aif "$1" | awk '/\.(mp3|wav|ogg|avi|mpg|iso)$/'); }
#mplist(){ mplayer -playlist <(find "$1" -regex '.*\.\(mp3\|wav\|ogg\|avi\|mpg\|iso\)' | sort); }

zombie-process() { ps aux | awk '{ print $8 " " $2 }' | grep -w Z ;}

normalizeaudio()       { sox --norm "$1" "${1%.*}"."$0"."${1##*.}" ;}
# usage: combine-zip file.zip -- join splited zip (z01, z02 ..etc)
# unsplit-zip-z01() { zip -s- "$1" -O "${1%.*}"-unsplited.zip ;}


web2png() { CutyCapt --url="$1" --out=web2png_output.png ;}
# url shortener
tiny-isgd() { wget -qO - "http://is.gd/create.php?format=simple&url=$1" ;}



# https://github.com/Daenyth/dotfiles/blob/master/.bashrc
# Environment variables
# if have less; then
#     export PAGER='less'
#     unset LESSCHARSET # Fix manpages looking funky
#     export LESS='--ignore-case --line-numbers --hilite-unread  -z-4 --hilite-search --LONG-PROMPT --no-init --quit-if-one-screen --quit-on-intr --RAW-CONTROL-CHARS'
#     # Colorized less, woohoo
#     export LESS_TERMCAP_mb=$'\E[01;31m'
#     export LESS_TERMCAP_md=$'\E[01;31m'
#     export LESS_TERMCAP_me=$'\E[0m'
#     export LESS_TERMCAP_se=$'\E[0m'
#     export LESS_TERMCAP_so=$'\E[01;44;33m'
#     export LESS_TERMCAP_ue=$'\E[0m'
#     export LESS_TERMCAP_us=$'\E[01;32m'
# elif have most; then
#     export PAGER='most'
# else
#     export PAGER='more'
# fi




#
# Run a command x times
# http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
#
runx() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}

# ask() -- ask user a yes/no question
function ask()
{
    echo -n "$@" '[y/N] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

# vim: set filetype=sh:
alias cue2flac="find -type f -name '*.cue' -execdir cue2tracks -R -n 19 -o '%N. %p ─ %t' {} \;"



# Shortcut to change directory and list contents
cdls() {
    if [ -d "$1" ]; then
        cd "$1"
        ls
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}



# super stealth background launch
# function daemon
# {
#     (exec "$@" >&/dev/null &)
# }

  # Do something and receive a desktop alert when it completes `sudo apt-get install something | alert`
  alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'



alias rdp='rdesktop -u "$USER" -g 1600x1200 -D -r disk:home=/home -r clipboard:PRIMARYCLIPBOARD'	# quick full screen RDP connection



sbg(){
  ("$@" & disown ) >/dev/null 2>&1 </dev/null
  which "$1" >/dev/null 2>&1
}

alias netlisten='lsof -i -P | grep LISTEN'   #listening ports
#internetinfo | Usage: ii


m-disconnect() { nmcli d disconnect enp5s0 ;}
m-connect() { nmcli d connect enp5s0 ;}


lynx-awk() {
  if [ $# -lt 1 ]; then
    echo -e "dump website links and awk out extension/keyword"
    echo -e "\nUsage: $0 <url> <extension/keyword>"
    echo -e "Example: $0 https://www.reddit.com"
    echo -e "         $0 https://www.reddit.com comment"
    echo -e "         $0 https://www.download.xxx zip"
    echo -e "         $0 https://www.freemusic.xxx mp3"
    return 1
  fi
  # get url, get keyword, remove dupes without sorting
  lynx -dump "$1" | awk '/http/ && /'"$2"'/ {print $2}' | awk '!x[$0]++'
}

# nap() {
# 	~/.bin/nap-1.5.4.linux-amd64/nap \
# 	-r \
# 	-s share-it.loginto.me:3456 \
# 	-s 108.19.45.179:7777 \
# 	-s 108.19.45.179:8888 \
# 	-s spica.sytes.net:8888 \
# 	-s 84.24.69.59:6436 \
# 	-s 98.202.75.0:8877 \
# 	-s 87.13.117.33:8888 \
# 	-s 79.103.107.173:5995 \
# 	-s 79.31.239.174:8888 \
#         -s 95.248.174.8:8888 \
#         -s 82.53.30.153:3456 \
#         -s 80.181.212.54:8888 \
# 	"$@"
# }

nap() {	~/.bin/nap-1.5.4/src/nap $@ ;}


# http://twit.altervista.org/linux-2/how-to-copy-an-entire-commandline-using-just-the-keyboard.html
# alias copylastcommand='echo "!!" | xclip -selection clipboard'
# alias copylastcommand='history -p !! | xsel -ib'
# alias copylastcommand='$(history -p !-1) | xsel -ib'

color_term() {
    for i in {0..255} ; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}



#-------- Video Thumbnail Gallery {{{
#------------------------------------------------------

vcsi-width-3x5() {
	vcsi "$2" -t -w "$1" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}
convert-to-image_png() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images to png"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.jpg pic2.bmp pic3.jpg"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -quality 50% "$arg" "${arg%.*}.png"
    done
}
convert-to-image_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images to jpg"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
        echo -e "\n$0 *.png"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -quality 50% "$arg" "${arg%.*}.jpg"
    done
}

vcsi-1280-3x4() {
    if [ $# -lt 1 ]
    then
        echo -e "vcsi"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        vcsi "$arg" -t -w 1024 --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20
    done
}

vcsi-auto-3x5() {
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}

vsheet-tonight-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_' '{print $3}' | cut -d' ' -f1,2 )
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-tonight() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-tonight-single "$arg"
    done
}

vsheet-fam-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_full_hi_' '{print $1}' | cut -d_ -f2- | sed 's:_: :g' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g')
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-fam() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

vsheet-mofos-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "$1" | awk -F_ '{print $2,$3}' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g' )
        TITLENAME="$1"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-mofos() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-mofos-single "$arg"
    done
}

vsheet-super() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "${1%.*}" | awk -F- '{print $1}')
        TITLENAME=$( echo "${1%.*}" | cut -d "-" -f2- )
        # cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
        # cmx-add $cbsuper -e -t "${1%.*}" -T "korn" -c "cover.jpg"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}


vsheet-arg() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

# http://productivefoss.blogspot.com.au/2015/05/exploring-notification-system-ii-how-to.html?m=1
# http://www.webupd8.org/2016/03/translate-any-text-you-select-on-your.html


publicpickups() {
    if [ $# -lt 1 ]
    then
        echo -e "resize pictures to another resolution"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        # AUTHORS=$( echo "$arg" | awk -F_ '{print $2 " " $3}' | sed -e "s/\b\(.\)/\u\1/g" )
        AUTHORS=$( echo "$arg" | awk -F_ '{print $2}' | sed -e "s/\b\(.\)/\u\1/g" )
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
    done
}

# http://stackoverflow.com/a/30684898
rename2jpg() {
    for f in * ; do
      if [[ $(file -b --mime-type "$f") = image/jpeg ]] ; then
        mv "$f" "${f/%.*/.jpg}"
      fi
    done
}
# }}}


# http://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/
yt2banneraudio() {
    if [ $# -lt 2 ]
    then
        echo -e "Use ffmpeg to create a banner audio (audio + image to video)"
        echo -e "\nUsage:\n$0 <image file> <audio file>"
        echo -e "\nExample:\n$0 cover.png file.mp3 \n"

        return 1
    fi
    ffmpeg -loop 1 -i "$1" -i "$2" -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest "${2%.*}".mp4
}


imguralbum_cbz() {
	# usage: imguralbum [link] [filename]

	local IMGUR_SAVE_PATH=/tmp

	# make a temp folder
	# mkdir -p "$IMGUR_SAVE_PATH"/"$2"

	#download album
	imguralbum.py "$1" "$IMGUR_SAVE_PATH"/"$2"

	#create zip archive using .cbz extension for comics
	zip -r "${2%/}.cbz" "$IMGUR_SAVE_PATH"/"$2"

	#delete temp folder
	rm -rf "$IMGUR_SAVE_PATH"/"$2"
}



testz()
{
  echo -n "${Red}Here be dragons. Continue?"
  read REPLY

  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo "You asked for it..."
  else
    return 1
  fi

  echo "FORMATED"
}



#Compression (cd into dir, will compress every single folder)
alias tardir='for i in *; do if [ -d "$i" ]; then tar czf "$i".tar.gz  "$i"; fi; done'
alias rardir='find * -maxdepth 0 -type d -exec rar a {}.rar {} \;'
alias zipdir='find * -maxdepth 0 -type d -exec zip -r {}.zip {} \;'
	#Warning: removes dir after compression (below)
alias rarkill='find * -maxdepth 0 -type d -exec rar a -df {}.rar {} \;'
#http://www.commandlinefu.com/commands/view/5198
# $ ls | while read filename; do tar -czvf "$filename".tar.gz "$filename"; rm "$filename"; done
# compress folder into cbr/cbz



lltag-artist() { lltag --yes -a "$1" "$2" ;}
lltag-album() { lltag --yes -A "$1" "$2" ;}
lltag-date() { lltag --yes -d "$1" "$2" ;}
lltag-genre() { lltag --yes -g "$1" "$2" ;}
lltag-comment() { lltag --yes -c "$1" "$2" ;}
lltag-number() { lltag --yes -n "$1" "$2" ;}
lltag-show() { lltag -S "$1" ;}
lltag-rename() { lltag --yes --rename '%n - %t' "$1" ;}


#Mp3 id3 tagger

# #-------- Convert to Archive (ZIP, RAR, TAR, CBR, CBZ) {{{
# #------------------------------------------------------
#
# # to see required install for different formats
# # $ patool formats
# convert-to-archive-7z() { patool repack "$1" "${1%.*}".7z ;}
# convert-to-archive-ace() { patool repack "$1" "${1%.*}".ace ;}
# convert-to-archive-jar() { patool repack "$1" "${1%.*}".jar ;}
# convert-to-archive-rar() { patool repack "$1" "${1%.*}".rar ;}
# convert-to-archive-tar() { patool repack "$1" "${1%.*}".tar ;}
# convert-to-archive-xz() { patool repack "$1" "${1%.*}".xz ;}
# convert-to-archive-zip() { patool repack "$1" "${1%.*}".zip ;}
# convert-to-archive-targz() { patool repack "$1" "${1%.*}".tar.gz ;}
# convert-to-archive-tarbz2() { patool repack "$1" "${1%.*}".tar.bz2 ;}
# convert-to-archive-tarlzma() { patool repack "$1" "${1%.*}".tar.lzma ;}
#
# archive-create-zip() { patool --verbose create myarchive.zip "$@" ;}
# archive-create-tar() { patool --verbose create myarchive.tar "$@" ;}
# archive-create-targz() { patool --verbose create myarchive.tar.gz "$@" ;}
# archive-create-7z() { patool --verbose create myarchive.7z "$@" ;}


# # https://en.wikipedia.org/wiki/Comic_book_archive
# convert-to-archive-cbz() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".zip && ! -f "${arg%.*}".cbz ]]; then
#             patool repack "$arg" "${arg%.*}".zip && mv "${arg%.*}".zip "${arg%.*}".cbz
#         else
#             if [[ -f "${arg%.*}".zip ]]; then
#             mv -v -- "${arg%.*}".zip "${arg%.*}".cbz
#             fi
#         fi
#     done
# }
#
# convert-to-archive-cb7() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".7z && ! -f "${arg%.*}".cb7 ]]; then
#             patool repack "$arg" "${arg%.*}".7z && mv "${arg%.*}".7z "${arg%.*}".cb7
#         else
#             if [[ -f "${arg%.*}".7z ]]; then
#             mv -v -- "${arg%.*}".7z "${arg%.*}".cb7
#             fi
#         fi
#     done
# }
# convert-to-archive-cba() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".ace && ! -f "${arg%.*}".cba ]]; then
#             patool repack "$arg" "${arg%.*}".ace && mv "${arg%.*}".ace "${arg%.*}".cba
#         else
#             if [[ -f "${arg%.*}".ace ]]; then
#             mv -v -- "${arg%.*}".ace "${arg%.*}".cba
#             fi
#         fi
#     done
# }
# convert-to-archive-cbt() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".tar && ! -f "${arg%.*}".cbt ]]; then
#             patool repack "$arg" "${arg%.*}".tar && mv "${arg%.*}".tar "${arg%.*}".cbt
#         else
#             if [[ -f "${arg%.*}".tar ]]; then
#             mv -v -- "${arg%.*}".tar "${arg%.*}".cbt
#             fi
#         fi
#     done
# }
# convert-to-archive-cbr() {
#     if [ $# -lt 1 ]; then
#         echo -e "Usage: $0 <file_name>"
#         echo -e "\nsingle:   $0 file.gz"
#         echo -e "\nmultiple: $0 file1.gz file2.gz file3.gz"
#         echo -e "\nwildcard: $0 *.gz"
#     return 1
#     fi
#
#     myArray=( "$@" )
#     for arg in "${myArray[@]}"; do
#         if [[ ! -f "${arg%.*}".rar && ! -f "${arg%.*}".cbr ]]; then
#             patool repack "$arg" "${arg%.*}".rar && mv "${arg%.*}".rar "${arg%.*}".cbr
#         else
#             if [[ -f "${arg%.*}".rar ]]; then
#             mv -v -- "${arg%.*}".rar "${arg%.*}".cbr
#             fi
#         fi
#     done
# }
#
# # }}}

#-------- Spell Checking / Translation Related {{{
#------------------------------------------------------
# spell checking
# tutorial video: http://www.youtube.com/watch?v=UEwz5eeaZzc
check-word() { echo "$1" | aspell -a ;}
check-list() { cat "$1" | aspell list ;}
check-file() { aspell check "$1" ;}

#}}}
#-------- Mount RAW IMAGE (DD|Clonezilla) {{{
#------------------------------------------------------
#
# mount raw image like dd
# http://askubuntu.com/a/352686

# sudo kpartx -av disk_image.raw
#   output: add map loop0p1 (252:2): 0 3082240 linear /dev/loop0 2048
# sudo mount /dev/mapper/loop0p2 /tmp/mydisk
#
# # unmount raw image
# sudo umount /tmp/mydisk
# sudo kpartx -d disk_image.raw
unmount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -d "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}
mount-raw() {
    if [ $# -lt 1 ]
    then
        echo -e "mount ISO filesystem images (iso,nrg,bin,mdf,img)"
        echo -e "\nUsage:\n$0 <disc_image>"
        echo -e "\nexample:\n$0 disc_image.iso"
        echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
        echo -e "$0 *.iso"
        return 1
    fi

    # map block device
    myArray=$(sudo kpartx -av "$1" | awk '/loop0/ {print $3}')

    # myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        mkdir -p /tmp/"$arg"
        sudo mount /dev/mapper/"$arg" /tmp/"$arg"
    done


    # if mount was sucessful then cd and ls the mountpoint
    # if [ $? -eq 0 ]; then
	# cd "/tmp/$1" && ls
    # else
    #     return 1
    # fi

}

# }}}
#-------- Mount Disc Images (ISO|NRG|BIN|MDF|IMG) {{{
#------------------------------------------------------


mount-img() {
  if [ $# -lt 1 ]; then
    echo -e "mount image to access files"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

    mkdir -p /tmp/"$2"
    sudo cryptsetup luksOpen /dev/"$2" "$labelname"
    sudo mount /dev/mapper/"$labelname" /tmp/"$2"

  # if mount was sucessful then cd and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/tmp/$1" && ls
  else
    return 1
  fi
}

unmount-img() {
  if [ $# -lt 1 ]; then
    echo -e "unmount image"
    echo -e "\nUsage: $0 <img_file>"
    echo -e "\nExample: $0 foo.img"
    return 1
  fi

  sudo umount "/tmp/$1"
  rmdir "/tmp/$1"
}

# }}}
#-------- Mount Archive (ISO|ZIP|RAR|TAR) {{{
#------------------------------------------------------
# http://ubuntuforums.org/showthread.php?t=1207096
mount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "mount archive files (iso|zip|rar|tar...etc)"
    echo -e "\nUsage:\n$0 <archive>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 *.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount "archive://$( ( echo -n 'file://' ; readlink -f $arg ; ) | perl -MURI::Escape -lne 'print uri_escape($_)')"
  done

  # if mount was sucessful then cd into gvfs dir and ls the mountpoint
  if [ $? -eq 0 ]; then
    cd "/run/user/$(id -u)/gvfs" && ls
  else
    return 1
  fi
}

unmount-archive() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount archive files (iso|zip|rar|tar)"
    echo -e "\nUsage:\n$0 <mount_point>"
    echo -e "\nExample:\n$0 archive:host=file%253Afoo%bar.zip"
    echo -e "cd /run/user/${UID}/gvfs/ && $0 archive:host=file%253Afoo%bar.zip"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    gvfs-mount -u "/run/user/$(id -u)/gvfs/$arg"
  done
}

# }}}
#-------- Mount Device (udisksctl) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

mount-udisksctl() {
  if [ $# -lt 1 ]; then
    echo -e "mount device like most GUI file manager"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl mount -b /dev/"$arg"
  done
}

unmount-udisksctl() {
  if [ $# -lt 1 ]; then
    echo -e "mount device like most GUI file manager"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl unmount --force -b /dev/"$arg"
  done
}
# }}}
#-------- Eject Device {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

eject-udisksctl() {
  if [ $# -lt 1 ]
  then
    echo -e "mount using gvfs"
    echo -e "\nUsage:\n$0 <disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin disc_image3.mdf"
    echo -e "$0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl power-off -b /dev/"$arg"
  done
}

# }}}

#-------- Mount DVD Movie UDF ISO (udisksctl) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: mount standard UDF filesystem data DVD movie iso
# REFF: http://www.makeuseof.com/tag/mounting-hard-disks-partitions-using-linux-command-line/

mount-udisksctl-dvdvideoiso() {
  if [ $# -lt 1 ]; then
    echo -e "mount standard UDF filesystem data DVD movie iso"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 sdx"
    echo -e "         $0 sdx1"
    echo -e "Multiple:$0 sdx sdy sdz"
    echo -e "         $0 sdx*"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl loop-setup -r -f "$arg"
  done
}

unmount-udisksctl-dvdvideoiso() {
  if [ $# -lt 1 ]; then
    echo -e "unmount standard UDF filesystem data DVD movie iso"
    echo -e "\nUsage: $0 <device|partition>"
    echo -e "Example: $0 loop0"
    echo -e "Multiple:$0 loop1 loop2"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    udisksctl loop-delete -b /dev/"$arg"
    udisksctl unmount -b /dev/"$arg" 2>/dev/null
  done
}
# }}}


quicksynergy-daemon() { /usr/bin/synergys --daemon --config ~/.quicksynergy/synergy.conf ;}
# mutt background fix
COLORFGBG="default;default"

jdownloader() { nohup java -jar ~/.scripts/JDownloader/JDownloader.jar >/dev/null 2>&1& }


date-global() {
# use tzselect to find timezone listing
    local SHOWTIMEZONE="$(
    alias date='date +"%a %D %l:%M %p"'
    echo "Current Location:" "$(date)"
    echo "USA LosAngeles:" "$(TZ='America/Los_Angeles' date)"
    echo "Canada Alberta:" "$(TZ='America/Edmonton' date)"
    echo "USA NewYork:" "$(TZ='America/New_York' date)"
    echo "EU London:" "$(TZ='Europe/London' date)"
    echo "Bangladesh Dhaka:" "$(TZ='Asia/Dhaka' date)"
    echo "China Xinjiang:" "$(TZ='Asia/Urumqi' date)"
    echo "Vietnam Saigon:" "$(TZ='Asia/Ho_Chi_Minh' date)"
    echo "China Beijing:" "$(TZ='Asia/Shanghai' date)"
    echo "HK HongKong:" "$(TZ='Asia/Hong_Kong' date)"
    echo "Japan Tokyo:" "$(TZ='Asia/Tokyo' date)"
    )"
    echo "$SHOWTIMEZONE" | column -t
}


mp3cut() {

	# example: cut from 5s to 10s; mpgtx -s file.mp3 "[00:05-00:10]" -b file-output
	mpgtx -s "$1" "["$2":"$3"-"$4":"$5"]" -b "${1%.*}"-output."${1##*.}"

	}

#audiobooks
mpv-saveposition() { mpv --save-position-on-quit "$@" ;}
mplayer-createplaylist() { ls --ignore="*.m3u" --ignore="*.pos" | grep -i "$1" | sort -u > "$1".m3u ;}





#mplayer playlist
mplist(){ mplayer -playlist <(tree -aif "$1" | awk '/\.(mp3|wav|ogg|avi|mpg|iso)$/'); }

zombie-process() { ps aux | awk '{ print $8 " " $2 }' | grep -w Z ;}

mbuffer() {
	mplayer -vo fbdev $1 -fs -subcp ${2:-cp1251} -vf scale=${3:-1280:720}
}
normalizeaudio()       { sox --norm "$1" "${1%.*}"."$0"."${1##*.}" ;}
web2png() { CutyCapt --url="$1" --out=web2png_output.png ;}


# vim: set filetype=sh:
alias cue2flac="find -type f -name '*.cue' -execdir cue2tracks -R -n 19 -o '%N. %p ─ %t' {} \;"

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    echo # newline
}









# Shortcut to change directory and list contents
cdls() {
    if [ -d "$1" ]; then
        cd "$1"
        ls
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}



# super stealth background launch
# function daemon
# {
#     (exec "$@" >&/dev/null &)
# }

  # Do something and receive a desktop alert when it completes `sudo apt-get install something | alert`
  alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'


function lsofg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep lsof"
        echo "usage: losfg [port/program/whatever]"
    else
        lsof | grep -i $1 | less
    fi
}




alias rdp='rdesktop -u "$USER" -g 1600x1200 -D -r disk:home=/home -r clipboard:PRIMARYCLIPBOARD'	# quick full screen RDP connection


sbg(){
  ("$@" & disown ) >/dev/null 2>&1 </dev/null
  which "$1" >/dev/null 2>&1
}

alias netlisten='lsof -i -P | grep LISTEN'   #listening ports



m-disconnect() { nmcli d disconnect enp5s0 ;}
m-connect() { nmcli d connect enp5s0 ;}



# nap() {
# 	~/.bin/nap-1.5.4.linux-amd64/nap \
# 	-r \
# 	-s share-it.loginto.me:3456 \
# 	-s 108.19.45.179:7777 \
# 	-s 108.19.45.179:8888 \
# 	-s spica.sytes.net:8888 \
# 	-s 84.24.69.59:6436 \
# 	-s 98.202.75.0:8877 \
# 	-s 87.13.117.33:8888 \
# 	-s 79.103.107.173:5995 \
# 	-s 79.31.239.174:8888 \
#         -s 95.248.174.8:8888 \
#         -s 82.53.30.153:3456 \
#         -s 80.181.212.54:8888 \
# 	"$@"
# }

nap() {	
  mkdir -p ~/Downloads/Napster/{upload,download,incomplete}
  ~/.bin/nap-1.5.4/src/nap $@
}




#-------- Video Thumbnail Gallery {{{
#------------------------------------------------------

vcsi-width-3x5() {
	vcsi "$2" -t -w "$1" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}
convert-to-image_jpg() {
    if [ $# -lt 1 ]
    then
        echo -e "convert images to jpg"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
        echo -e "\n$0 *.png"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -quality 50% "$arg" "${arg%.*}.jpg"
    done
}

vcsi-1280-3x4() {
    if [ $# -lt 1 ]
    then
        echo -e "vcsi"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        vcsi "$arg" -t -w 1024 --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20
    done
}

vcsi-auto-3x5() {
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 3x5 --end-delay-percent 20
}

vsheet-tonight-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_' '{print $3}' | cut -d' ' -f1,2 )
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-tonight() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-tonight-single "$arg"
    done
}

vsheet-fam-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$(echo "$1" | awk -F'_full_hi_' '{print $1}' | cut -d_ -f2- | sed 's:_: :g' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g')
        TITLENAME="$1"

        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-fam() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

vsheet-mofos-single() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "$1" | awk -F_ '{print $2,$3}' | sed -e "s/\b\(.\)/\u\1/g" | sed 's/[0-9]*//g' )
        TITLENAME="$1"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}

vsheet-mofos() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-mofos-single "$arg"
    done
}

vsheet-super() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

        # get width of video file
	eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
	get_width=${streams_stream_0_width}
        # generate video sheet
	vcsi "$1" -t -w "$get_width" --background-color 000000 --metadata-font-color ffffff -g 2x5 --end-delay-percent 20

        # convert to jpg
        concat_jpg "$1".png
        # reduce jpg file size
	image-resize-1920x1080 concatoutput.jpg
        # rename to cover.jpg
	mv concatoutput_1920x1080_resized.jpg cover.jpg

        # add to calibre
        AUTHORS=$( echo "${1%.*}" | awk -F- '{print $1}')
        TITLENAME=$( echo "${1%.*}" | cut -d "-" -f2- )
        # cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
        # cmx-add $cbsuper -e -t "${1%.*}" -T "korn" -c "cover.jpg"
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$TITLENAME" -T "korn" -c "cover.jpg"

        # delete leftovers
        garbage "${1}.png"
        garbage concatoutput.jpg
        garbage cover.jpg

}


vsheet-arg() {
    if [ $# -lt 1 ]
    then
        echo -e "generate video sheet and add it to calibre"
        echo -e "\nUsage:\n$0 video.mp4"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
      vsheet-super "$arg"
    done
}

# http://productivefoss.blogspot.com.au/2015/05/exploring-notification-system-ii-how-to.html?m=1
# http://www.webupd8.org/2016/03/translate-any-text-you-select-on-your.html


publicpickups() {
    if [ $# -lt 1 ]
    then
        echo -e "resize pictures to another resolution"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.png pic3.png"
        echo -e "\n$0 *.jpg"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        # AUTHORS=$( echo "$arg" | awk -F_ '{print $2 " " $3}' | sed -e "s/\b\(.\)/\u\1/g" )
        AUTHORS=$( echo "$arg" | awk -F_ '{print $2}' | sed -e "s/\b\(.\)/\u\1/g" )
        cmx-add $cbsuper -e -a "$AUTHORS" -t "$arg" -T "korn,pov,amatuer" -c "${arg}.jpg"
    done
}

# http://stackoverflow.com/a/30684898
rename2jpg() {
    for f in * ; do
      if [[ $(file -b --mime-type "$f") = image/jpeg ]] ; then
        mv "$f" "${f/%.*/.jpg}"
      fi
    done
}
# }}}


# http://www.tecmint.com/ffmpeg-commands-for-video-audio-and-image-conversion-in-linux/
yt2banneraudio() {
    if [ $# -lt 2 ]
    then
        echo -e "Use ffmpeg to create a banner audio (audio + image to video)"
        echo -e "\nUsage:\n$0 <image file> <audio file>"
        echo -e "\nExample:\n$0 cover.png file.mp3 \n"

        return 1
    fi
    ffmpeg -loop 1 -i "$1" -i "$2" -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest "${2%.*}".mp4
}

# convert video to gif animation
# http://superuser.com/a/730389
# http://superuser.com/a/841379
convert_to_gifv() {
    if [ $# -lt 1 ]
    then
        echo -e "convert video to animated gif"
        echo -e "\nUsage:\n$0 <file> <resolution>"
        echo -e "\nexample:\n$0 file.mkv \n"
        echo -e "$0 file.mkv 320\n"
        echo -e "$0 file.mkv 720\n"
        echo -e "$0 file.mkv 1080\n"
        echo -e "Note: animated gif size are usually x2 or x3 the size of the original video file"

        return 1
    fi

    # get video resolution (height)
    eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width "$1")
    size=${streams_stream_0_height}

    ffmpeg -i "$1" -vf scale="${2:-$size}":-1 -r 10 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - "${1%.*}"-gifvid"$2".gif
}

tmux-locate-pane() {
  tempfile=/tmp/tmux-locate-pane.txt
  echo "@locate " > "$tempfile"; $EDITOR "$tempfile"; source "$tempfile"
}

tmux-discover-pane() {
  tempfile=/tmp/tmux-discover-pane.txt
  # echo "@discover " > "$tempfile"; $EDITOR -c 'startinsert!' "$tempfile"; source "$tempfile"
  echo "@discover" > "$tempfile"; vim -c 'normal! A ' -c 'startinsert!' "$tempfile"; source "$tempfile"

}


#Compression (cd into dir, will compress every single folder)
alias tardir='for i in *; do if [ -d "$i" ]; then tar czf "$i".tar.gz  "$i"; fi; done'
alias rardir='find * -maxdepth 0 -type d -exec rar a {}.rar {} \;'
alias zipdir='find * -maxdepth 0 -type d -exec zip -r {}.zip {} \;'
	#Warning: removes dir after compression (below)
alias rarkill='find * -maxdepth 0 -type d -exec rar a -df {}.rar {} \;'
#http://www.commandlinefu.com/commands/view/5198
# $ ls | while read filename; do tar -czvf "$filename".tar.gz "$filename"; rm "$filename"; done
# compress folder into cbr/cbz



atool-delete() {
	local zipfilename="$1"
	local deletefile="$(atool -l "$zipfilename" | tail -n +4 | head -n -2 | cut -d':' -f2 | cut -d' ' -f4- | sed 's/\ /\\ /g' | sed -n "${2}p")"

	zip -d "$zipfilename" "$deletefile"


	}

atool-zip-delete() { zip -d "$@" \*.txt ;}

# https://www.reddit.com/r/archlinux/comments/42784v/what_are_your_bash_aliasesfunctions_for_ffmpeg/cz88h5f
ffmpeg-stereo () {
        ffmpeg -i "$1" -i "$2" -filter_complex "[0:a][1:a]amerge=inputs=2[aout]" -map "[aout]" -c:a flac "$3"
}

# https://www.reddit.com/r/archlinux/comments/423wr9/is_anyone_having_trouble_with_reflector/
# alias updatemirrors='sudo reflector --verbose --country 'United States' -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist'

# Shortcut to generate an updated Arch Linux mirrorlist - requires reflector
reflector-generate() {
    reflector --country "United States" -l 200 -p http --sort rate --save "$1"
}

lltag-artist() { lltag --yes -a "$1" "$2" ;}
lltag-album() { lltag --yes -A "$1" "$2" ;}
lltag-date() { lltag --yes -d "$1" "$2" ;}
lltag-genre() { lltag --yes -g "$1" "$2" ;}
lltag-comment() { lltag --yes -c "$1" "$2" ;}
lltag-number() { lltag --yes -n "$1" "$2" ;}
lltag-show() { lltag -S "$1" ;}
lltag-rename() { lltag --yes --rename '%n - %t' "$1" ;}


#-------- Set Variables {{{
#------------------------------------------------------
# aria2c daemon download path (diana/dad/aria2p/aria2p[tui])
export PATH_ARIA_DAEMON_DOWNLOAD_DIR="/media/EdoTensei/Aria"

dad-start() { dad -d "$PATH_ARIA_DAEMON_DOWNLOAD_DIR" start ;}
dad-stop() { dad stop ;}


# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}

#-------- Search for Files {{{
#------------------------------------------------------

@find() {
  if [ $# -lt 1 ]
    then
    echo -e "find files recursively starting from current folder"
    echo -e "\nUsage:     $0 <keywords>"
    echo -e "Example:     $0 dragon ball z"
    echo -e "OR Operator: $0 '(naruto|bleach)'"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "Extension:   $0 naruto mkv$"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)$'"
    echo -e "\nQuit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    find . -print | grep -i "$keyword" | vim -R -
}

@locate() {
  if [ $# -lt 1 ]
  then
    echo -e "search for files using updatedb"
    echo -e "\nUsage:     $0 <keywords>"
    echo -e "Example:     $0 dragon ball z"
    echo -e "OR Operator: $0 '(naruto|bleach)'"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "Extension:   $0 naruto mkv$"
    echo -e "             $0 '(naruto|bleach) (mkv|mp4)$'"
    echo -e "\nUpdate Database: sudo updatedb"
    echo -e "\nQuit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    # escape spaces, pipe and parentheses
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    locate -ir "$keyword" | vim -R -
}

# http://askubuntu.com/questions/460535/how-do-i-tell-locate-to-keep-the-index-of-an-external-hdd
updatedb-external() {
    if [ $# -lt 1 ]
    then
        echo -e "create private updatedb"
        echo -e "\nUsage:\n$0 <filename.db> <path>"
        echo -e "\nexample:\n$0 bingbong /media/bingbong"
        return 1
    fi
    mkdir -p ~/.updatedb
    updatedb -l 0 -o ~/.updatedb/"$1.db" -U "$2"
}

@discover() {
  if [ $# -lt 1 ]
  then
    echo -e "locate using private updatedb"
    echo -e "\nUsage:\n$0 <keywords>"
    echo -e "\nexample:\n$0 dragon ball z"
    echo -e "\nending extension:\n$0 naruto mkv$"
    echo -e "\nOR operator:\n$0 '(naruto|blech)'"
    echo -e "$0 '(naruto|bleach) (mkv|mp4)'"
    echo -e "\nupdate database:\nsudo updatedb"
    echo -e "\nquit vim:\nShift+ZZ or Shift+ZQ"
    return 1
  fi
    keyword=$(echo "$@" |  sed -e 's/ /.*/g' -e 's:|:\\|:g' -e 's:(:\\(:g' -e 's:):\\):g')
    locate \
    -d /var/lib/mlocate/mlocate.db \
    -d ~/.updatedb/3DS_2TB.db \
    -d ~/.updatedb/BINGBONG_4TB.db \
    -d ~/.updatedb/GAMECUBE_4TB.db \
    -d ~/.updatedb/GC_CISO_2TB.db \
    -d ~/.updatedb/NewGoblin_4TB.db \
    -d ~/.updatedb/OG_XBOX_2TB.db \
    -d ~/.updatedb/PC_GAMES_1.5TB.db \
    -d ~/.updatedb/PS1PS2_4TB.db \
    -d ~/.updatedb/PS3PKGA_2TB.db \
    -d ~/.updatedb/PS3PKGB_2TB.db \
    -d ~/.updatedb/PSP_VITA_4TB.db \
    -d ~/.updatedb/TGIF_4TB.db \
    -d ~/.updatedb/TV_SHOWS_2TB.db \
    -d ~/.updatedb/WASP_4TB.db \
    -d ~/.updatedb/WII_REDUMP_4TB.db \
    -d ~/.updatedb/WII_U_3TB.db \
    -d ~/.updatedb/XBOX360RGH1.db \
    -d ~/.updatedb/HOLODECK_3TB.db \
    -ir "$keyword" | vim --not-a-term -c 'set ft=man ts=8 nomod nolist' -
    # -ir "$keyword" | vim --not-a-term -c 'set ft=man ts=8 nomod nolist noma' -
}
@discover-tmux() { @discover "$@" && tmux kill-pane ;}

whileloop() { while true; do "$@"; sleep 1; done ;}

# find starting at current dir and go recursively to sub dir
# @search() {
#     if [ $# -lt 1 ]
#     then
#         echo -e "search for files "
#         echo -e "\nUsage:\n$0 <keywords>"
#         echo -e "\nexample:\n$0 dragon ball z"
#         echo -e "\nending extension:\n$0 naruto mkv$"
#         echo -e "\nOR operator:\n$0 '(naruto|blech)'"
#         echo -e "$0 '(naruto|bleach) (mkv|mp4)'"
#         echo -e "\nupdate database:\nsudo updatedb"
#         echo -e "\nquit vim:\nShift+ZZ or Shift+ZQ"
#         return 1
#     fi
#         keyword=$(echo "*$@*" |  sed -e 's/ /*/g')
# 	find -type f -iname $keyword | vim -R -
# }

# find current dir files bigger than X size
# useage: @size <filesize> <keyword>
@size() {
	keyword=$(echo "*${@:2}*" |  sed -e 's/ /*/g')
	find -type f -size +${1}M -iname $keyword  | vim -R - ;}

# search pdf files in current dir for keywords inside the pdfs
# http://www.commandlinefu.com/commands/view/9189
@pdfgrep() {
    if [ $# -lt 1 ]
    then
        echo -e "search all pdf in current directory recursively for keyword inside the pdfs"
        echo -e "\nUsage:\n$0 <keyword>"
        echo -e "\nexample:\n$0 homework"
        echo -e "\n$0 'school transcript'"

        return 1
    fi
	find -iname \*.pdf -print0 | xargs -0 pdfgrep -in "$@"
}


@surfraw() { cat ~/.config/surfraw/bookmarks | grep -i "$1" | vim -R - ;}

#}}}


wget-extension-lynx() { wget $(lynx -dump "$2" | grep -i ."$1"$ | awk '{print $2}') ;}
# wget-source-extension { wget -qO- "$1" | sed -n 's/.*href="\([^"]*\).*/\1/p' ;}





tune2fs-changereserved() { sudo tune2fs -m 0 /dev/"$1" ;}
tune2fs-showreserved() { sudo tune2fs -l /dev/"$1" | grep 'Reserved block count' ;}

redshift-status() {
  # check if process is running ( 0 = off, 1 = on )
  STATUS="$(ps -ef | grep '[r]edshift' | wc -l)"
  # if off then turn on
  if [[ "${STATUS}" == 0 ]]; then
    notify-send -t 1 --icon=info "RedShift" "On"
    redshift >/dev/null 2>&1 & disown
  # if on then turn off
  elif [[ "${STATUS}" == 1 ]]; then
    notify-send -t 1 --icon=info "RedShift" "Off"
    redshift -x && killall redshift
  fi

}



playonlinux-change-user() {
  if [ $# -lt 2 ]; then
    echo -e "Change PlayOnLinux user path shortcut (fixes shortcut in ~/.PlayOnLinux/shortcuts)"
    echo -e "\nUsage:   $0 <old_username> <new_username>"
    echo -e "Example: $0 heoyea gotbletu"
    return 1
  fi
  OLDUSER="$1"
  NEWUSER="$2"
  find ~/.PlayOnLinux/shortcuts -type f -exec sed -i 's:'"$OLDUSER"':'"$NEWUSER"':g' {} \;
}

billboardtop100() { lynx -source 'billboard.com/charts/hot-100' | html2text | sed -n '90,1072p' | sed '9,33d' | sed '94,105d' | sed '/^Share/d' | sed 'N;/^\n$/D;P;D;' | less -N ;}



#-------- Tor - Anonymity Network {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: browse the web anonymously using the tor network
# REFF: https://linuxaria.com/howto/how-to-anonymize-the-programs-from-your-terminal-with-torify
# LINK: https://www.torproject.org/
torify-iprenew() { echo -e 'AUTHENTICATE ""\r\nsignal NEWNYM\r\nQUIT' | nc 127.0.0.1 9051 ;}

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}


alias sxiv-rifle='/usr/share/doc/ranger/examples/rifle_sxiv.sh'



#-------- Clonezilla Clone to Different Size Partition {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# http://www.tonmann.com/2015/07/how-to-temporary-mount-clonezilla-images-to-restore-single-files-or-folders/
clonezilla-extract-img() {
  if [ $# -lt 2 ]; then
    echo -e 'unpack clonezilla gzip image so we can mount the image (foo-img.gz.aa ==> foo.img)'
    echo -e "\nUsage: $0 <input_file> <output_file>"
    echo -e "\nExample: $0 sdd1.vfat-ptcl-img.gz.aa /media/Storage/sdd1.vfat-ptcl.img"
    return 1
  fi
  sudo cat "${1%.*}"* | sudo gzip -d -c | sudo partclone.restore -W -o "$2"
  sudo chmod 777 "$2"
}
# http://drbl.org/faq/fine-print.php?path=./2_System/102_restore_image_to_different_partition.faq#102_restore_image_to_different_partition.faq
clonezilla-partition-restore-to-differentpartition() {
  if [ $# -lt 2 ]; then
    echo -e "restore image to device partition"
    echo -e "\nUsage: $0 <input_file> <device>"
    echo -e "\nExample: $0 mylaptop_clonezilla_partition2_2016_07_02 sdx2"
    echo -e "\nNote: partition <device> usually have numbers at the end (sdx1)"
    return 1
  fi
  INPUT_FILE="$1"
  DEVICE_NAME="$2"
  echo -e "${Yellow}>>>Checking if device is mounted ${Color_Off}"
    MOUNT_STATUS=$(mount | grep /dev/"$DEVICE_NAME" | wc -l)
    if [ "$MOUNT_STATUS" -ne 0 ]
    then
      lsblk -o "NAME,SIZE,FSTYPE,TYPE,LABEL,MOUNTPOINT,UUID" | grep "$DEVICE_NAME"
      echo -e "${Red}>>>/dev/$DEVICE_NAME is mounted. You have to unmount then try again ${Color_Off}"
      return 1
    fi
  echo -e "${Yellow}>>>Preparing temp files to change partitions ${Color_Off}"
    # create symlinks to change partition
    cd "$INPUT_FILE"
    TARGET_DIR="/tmp/$INPUT_FILE"
    mkdir -p -v "$TARGET_DIR"
    for arg in *; do
      ln -s "$PWD/$arg" "$TARGET_DIR/$arg"
    done
    # rename partition name in parts file
    rm "$TARGET_DIR/parts"
    echo "$DEVICE_NAME" > "$TARGET_DIR/parts"
    # rename partition filename (example: sdd1.vfat-ptcl-img.gz.aa --> sdd5.vfat-ptcl-img.gz.aa)
    IMG_NAME=$(ls "$TARGET_DIR" | grep .aa$)
    IMG_NAME_CUT=$(ls "$TARGET_DIR" | grep .aa$ | cut -d'.' -f2- )
    mv "$TARGET_DIR/$IMG_NAME" "$TARGET_DIR/$DEVICE_NAME.$IMG_NAME_CUT"
  # set new root directory
    cd "$TARGET_DIR"
    cd ..
    sudo sed -i 's:ocsroot=.*:ocsroot='\""$PWD"\"':g' /etc/drbl/drbl.conf
  echo -e "${Green}>>>Start partition restore process ${Color_Off}"
    sudo /usr/sbin/ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k -p true restoreparts "$INPUT_FILE" "$DEVICE_NAME"
  echo -e "${Red}>>>Cleanup temp files ${Color_Off}"
    rm -rf "$TARGET_DIR"
}

# }}}
#-------- RANDOM {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

convert-to-ps2() {
  if [ $# -lt 1 ]; then
    echo -e "convert gamecube iso games to ciso (compress iso, ignore uused blocks)"
    echo -e "work with nintendont v4.428+ and usbloadergx on a modded wii console"
    echo -e "Note: after conversion the ciso will be renamed to iso to make it work under usbloadergx"
    echo -e "\nUsage: $0 <filename>"
    echo -e "\nExample:\n$0 PaperMario.iso"
    echo -e "$0 ZeldaWindWalker.iso MarioSunshine.iso MetroidPrime.iso"
    echo -e "$0 *.iso"
    echo -e "\nNintendont uses these paths:"
    echo -e "SDCard:/games/"
    echo -e "USB:/games/"
    echo -e "USB:/games/Name of game [GameID]/game.iso"
    echo -e "USB:/games/Legend of Zelda the Wind Waker (USA) [GZLP01]/game.iso"
    echo -e "\nMultiple Gamecube Disc Example:"
    echo -e "USB:/games/Resident Evil 4 (USA) [G4BE08]/game.iso"
    echo -e "USB:/games/Resident Evil 4 (USA) [G4BE08]/disc2.iso"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    FILENAME="${arg%.*}"
    CONTENTNAME=$(7z l "$arg" | tail -3 | head -1 | awk '{ print substr($0, index($0,$6)) }' | awk '{$1=$1};1')
    GAMEID=$(7z l "$arg" | tail -3 | head -1 | awk '{print $6}' | awk '{$1=$1};1')
    VERSION=$(7z l "$arg" | tail -3| head -1 | awk '{print $7}' | awk -F"[()]" '{print $2}' | awk '{$1=$1};1')
    EXTENSION=$(7z l "$arg" | tail -3 | head -1 | awk '{print $7}' | awk '{$1=$1};1'| rev | cut -d'.' -f1 | rev)
    PROPER_FILENAME="$FILENAME ($VERSION) [$GAMEID].$EXTENSION"

    7z x "$arg"
    mv "$CONTENTNAME" "$PROPER_FILENAME"
  done
}

megalinks-decode-base64-only() {
  LINK=`echo "$1" | base64 --decode`
  KEY=`echo "$2" | base64 --decode`
  echo -n "https://mega.nz/${LINK}${KEY}"
  echo -n "https://mega.nz/${LINK}${KEY}" | pbcopy
}
megalinks-decode-base64() {
  LINK=`echo "$1" | base64 --decode`
  KEY=`echo "$2" | base64 --decode`
  echo -n "https://mega.nz/${LINK}${KEY}"
  echo -n "https://mega.nz/${LINK}${KEY}" | pbcopy
}
# https://mega.nz/#!vUwCSAQD!TiylqiYm7FSFnm9CYCzQd9GpeJjH2DlIPk3SadMcR6s
# references:
# http://www.theisozone.com/downloads/playstation/tools/fix-iso-ps2-game-rename-perfect-for-opl-or-hdd-loader/
# http://www.ps2-home.com/forum/viewtopic.php?f=27&t=2152
# https://oplmanager.no-ip.info/site/

ps2gameidisorenamer() {
  if [ $# -lt 1 ]
  then
    echo -e "rename Playstation 2 ISO with proper Game ID prefix (compatible with Open PS2 Loader and HDD Loader)"
    echo -e "e.g Suikoden IV.iso --> SLUS_209.79.Suikoden IV.iso"
    echo -e "\nUsage:\n$0 <iso>"
    echo -e "\nExample:\n$0 GTA3.iso"
    echo -e "$0 GTAViceCity.iso ResidentEvil4.iso FinalFantasyX.iso"
    echo -e "$0 *.iso"
    echo -e "\nDependencies: fuseiso fuse2"
    return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    # mount image
    fuseiso -n -p "$arg" "/tmp/$arg"
    # go to mounted folder
      if [ $? -eq 0 ]; then
        cd "/tmp/$arg"
        # get gamecode id and make it uppercase
        PS2_GAMEID="$(ls | grep *_*.?? | tr '[:lower:]' '[:upper:]')"
        # leave mounted folder
        cd - > /dev/null
        fusermount -u "/tmp/$arg"
        mv "$arg" "$PS2_GAMEID"."$arg"
      else
        return 1
      fi
  done
}

# dd-to-usb() {
#   if [ $# -lt 2 ]; then
#     echo -e "write image to usb"
#     echo -e "\nUsage: $0 <disc image>"
#     echo -e "\nExample:\n$0 linux.iso sdX"
#     echo -e "$0 usbimage.img sdX"
#     echo -e "\ndependencies: coreutils"
#     return 1
#   fi
#   sudo dd if="$1" of="/dev/$2" bs=4M status=progress && sync
# }

rename3do() {
  if [ $# -lt 1 ]
  then
    echo -e "unmount ISO filesystem images (iso,nrg,bin,mdf,img)"
    echo -e "\nUsage:\n$0 <mount_point|disc_image>"
    echo -e "\nExample:\n$0 disc_image.iso"
    echo -e "$0 disc_image.iso disc_image2.bin"
    echo -e "$0 mount_point1 mount_point2"
    echo -e "cd /tmp && $0 mount_point"
    echo -e "cd /tmp && $0 *.iso"
    return 1
  fi

  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    CLEANNAME="$(atool -l "$arg" | sed -n '5p' |awk '{ print substr($0, index($0,$4)) }' | rev | cut -d\. -f2- | rev)"
    mv "$arg" "$CLEANNAME".zip
  done
}


# Source: https://gist.github.com/iamtekeste/3cdfd0366ebfd2c0d805#gistcomment-2359248
gdrive_download () {
  # usage: gdrive_download long_google_drive_file_id filename.ext

  CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://docs.google.com/uc?export=download&id=$1" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
  wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
  rm -rf /tmp/cookies.txt
}


testingescape() {

  echo regular file
  echo "$1"

  echo escaped file that has spaces
  echo "${1// /\ }"
}


# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/


clean404() {
  if [ $# -lt 1 ]; then
    echo -e "check if web links is dead and remove line from file (e.g for newsboat, newsbeuter urls file)"
    echo -e "\nUsage:   $0 <old_username> <new_username>"
    echo -e "Example: $0 heoyea gotbletu"
    return 1
  fi
  INPUTFILE="$1"
  TMPFILE=/tmp/urlstatus.txt

  # remove temp file
  if [ -f "$TMPFILE" ] ; then
      rm "$TMPFILE"
  fi

  # remove any exiting backup file
  if [ -f "$INPUTFILE.bak" ] ; then
      rm "$INPUTFILE.bak"
  fi

  # make backup copy
  cp "$INPUTFILE" "$INPUTFILE".bak

  # check url links for http status codes
  grep '^http' -i "$INPUTFILE" | awk '{print $1}' | while read url
  do
      urlstatus=$(curl -o /dev/null --silent --head --write-out '%{http_code} %{redirect_url}' "$url" )
      echo "$url $urlstatus" | tee -a "$TMPFILE"
  done

  # remove dead links from file
  cat "$TMPFILE" | grep ' 000\| 401\| 404\| 410' | awk '{print $1}' | while read line; do echo "removing $line" && sed -i ",$line,d" "$INPUTFILE" ; done

  # update 302 redirect links
  cat "$TMPFILE" | grep ' 301\| 302' | while IFS=" " read oglink httpcode redirectlink ; do echo "updating $oglink --> $redirectlink" && sed -i "s,$oglink,$redirectlink,g" "$INPUTFILE" ; done

  echo -e "${Yellow}>>>Backup File: $INPUTFILE.bak ${Color_Off}"
  echo -e "${Yellow}>>>HTTP Status Code File: $TMPFILE ${Color_Off}"
}


# }}}
#-------- Rawdog - PoorMans RSS Reader {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

rawdog-server() { nohup python3 -m http.server 50729 --directory ~/.rawdog/  >/dev/null 2>&1& }
rawdog-server-with-password() { cd ~/.rawdog && nohup SimpleAuthServer.py 50729 heoyea:bone1234 >/dev/null 2>&1& }
rawdog-quit() { kill $(ps -ef | grep '[r]awdog' | grep '50729' | awk '{print $2}') ;}
rawdog-refresh() { rawdog -Wuwv ;} # get new feeds

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}
#-------- Empty Template {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=jhv-2pNWfr4
# DESC: switch audio stream to different output (HDMI, Headphone, Speakers ...etc)
# REFF: http://askubuntu.com/a/18210
# LINK: http://quvi.sourceforge.net/

# }}}





# bin/cue to chd
# bin/cue to iso
# bin/cue to pbp
# multi-disc to single pbp

convert-to-game-psx2eboot() {
  if [ $# -lt 1 ]
  then
      echo -e "convert playstation games to EBOOT.PBP (Usually The Best Format For MultiDisc)"
      echo -e "\nUsage:\n$0 <picture>"
      echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
      echo -e "\n$0 *.png"
      echo -e "\n\nsource: https://github.com/pseiler/popstationr"

      return 1
  fi
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
      # popstation 'Tony Hawks Skateboarding' SLUS00860 9 THPS1_SLUS_008.60.iso
      # popstation $human_readable_name $GameID $compressionlevel $image.iso
      # Instead of the GameID you also can use AUTO to let popstationr detect the GameID
      
      ## psx.log --> Automatically Extracted GameID [SLES01349]
      PSX_LOG=/tmp/psx.log
      PSX_CSV=/media/Bankai/0000_Modded_Console/psp_softmod/ROMS/psx_iso/PS1.csv
      popstationr "${arg%.*}" AUTO 9 "$arg" > "$PSX_LOG"
      # e.g SLUS00327
      GAMEID=$(cat "$PSX_LOG" | head -n1 | awk -F '[][]' '{print $2}')
      # e.g SLUS-00327
      GAMEID_WITH_DASH=$(printf '%s\n' $GAMEID | sed 's/./&-/4')
      GAMETITLE_FROM_CSV=$(cat "$PSX_CSV" | grep "$GAMEID_WITH_DASH" | cut -d',' -f1 | awk -F'"' '$0=$2' )


      mkdir "${arg%.*} [$GAMEID]"
      mkdir "${arg%.*} $GAMEID"
      mv EBOOT.PBP "${arg%.*} $GAMEID"

  done
      rm "$PSX_LOG"
}




convert-to-boxart-nintendodsi() {
  # Covers converted by XrayXout
  #
  # All images where converted to .bmp format and were re-sized to 128x115 with 16-bit color
# Drag the images into _nds/dsimenuplusplus/boxart
# http://nashville-merchant-services.net/threads/ds-i-3ds-twilight-menu-dsimenu-srloader-ds-i-menu-replacement.472200/
  #


    if [ $# -lt 1 ]
    then
        echo -e "convert images to Nintendo DSi Compatible Box Art (TWiLightMenu++)"
        echo -e "\nUsage:\n$0 <picture>"
        echo -e "\nexample:\n$0 pic1.png pic2.bmp pic3.png"
        echo -e "\n$0 *.png"

        return 1
    fi

    myArray=( "$@" )
    for arg in "${myArray[@]}"; do
        convert -resize 128x115 -background white -compose Copy -gravity center -extent 128x115 -compress none -depth 8 "$arg" -type truecolor BMP3:"${arg%.*}.bmp"
    done
}


ap-patching() {
  
  SOURCE_ROM="$1"
  XDELTA_PATCH="$2"
  OUTPUT_ROM="$3"

  xdelta3 -dfvs "$SOURCE_ROM" "$XDELTA_PATCH" "$OUTPUT_ROM"

}


# NoNpDrm files aka App Files for PSVITA
psvita-nonpdrm-app() {
  if [ $# -lt 1 ]; then
    printf '%s\n' 'Create Zip Archive With Pretty Filenames From NoPayStation Unpacked NoNpDRM Files (Aka App)'
    printf '%s\n' 'PCSE00266/ --> Fieldrunners 2 (US) [PCSE00266].zip'
    printf '%s\n'
    printf '%s\n' "Usage:"
    printf '%s\n' "  $0 <dir>"
    printf '%s\n'
    printf '%s\n' "Example:"
    printf '%s\n' "  $0 PCSE00266/"
    printf '%s\n' "  $0 dir1 dir2 dir3"
    printf '%s\n' "  $0 *"
    return 1
  fi
  TSVFILE="$HOME/.PlayOnLinux/wineprefix/nopaystation_2.0_v0.94/drive_c/Program Files/nopaystation_2.0_v0.94/PSV_GAMES.tsv"
  mkdir -vp ../Apps_NoNpDrm
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    GAMEID=$(grep "${arg%.*}" "$TSVFILE" | cut -f1)
    GAMEREGION=$(grep "${arg%.*}" "$TSVFILE" | cut -f2)
    GAMETITLE=$(grep "${arg%.*}" "$TSVFILE" | cut -f3 | sed 's@/@ @' | sed 's@:@ -@')
    OUTPUT_FILENAME="$GAMETITLE ($GAMEREGION) [$GAMEID]"
    zip -r ../Apps_NoNpDrm/"$OUTPUT_FILENAME".zip "$arg"
  done
}

psvita-nonpdrm-dlc() {
  if [ $# -lt 1 ]; then
    printf '%s\n' 'Create Zip Archive With Pretty Filenames From NoPayStation Unpacked NoNpDRM Files (Aka App)'
    printf '%s\n' 'PCSE00266/ --> Fieldrunners 2 (US) [PCSE00266].zip'
    printf '%s\n'
    printf '%s\n' "Usage:"
    printf '%s\n' "  $0 <dir>"
    printf '%s\n'
    printf '%s\n' "Example:"
    printf '%s\n' "  $0 PCSE00266/"
    printf '%s\n' "  $0 dir1 dir2 dir3"
    printf '%s\n' "  $0 *"
    return 1
  fi
  TSVFILE="$HOME/.PlayOnLinux/wineprefix/nopaystation_2.0_v0.94/drive_c/Program Files/nopaystation_2.0_v0.94/PSV_GAMES.tsv"
  TSVFILEDLCS="$HOME/.PlayOnLinux/wineprefix/nopaystation_2.0_v0.94/drive_c/Program Files/nopaystation_2.0_v0.94/PSV_DLCS.tsv"
  mkdir -vp ../DLC_NoNpDrm
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    ls "$arg" | while read argdlc ; do
      GAMETITLE=$(grep "${arg%.*}" "$TSVFILE" | cut -f3 | sed 's@/@ @' | sed 's@:@ -@')
      GAMETITLEDLCS=$(grep "$argdlc" "$TSVFILEDLCS" | awk -v var="$arg" '$1 == var' | cut -f3 | sed 's@/@ @' | sed 's@:@ -@')
      GAMEID=$(grep "$argdlc" "$TSVFILEDLCS" | awk -v var="$arg" '$1 == var' | cut -f1)
      GAMEREGION=$(grep "$argdlc" "$TSVFILEDLCS" | awk -v var="$arg" '$1 == var' | cut -f2)
      GAMEDLCID=$(grep "$argdlc" "$TSVFILEDLCS" | awk -v var="$arg" '$1 == var' | cut -f6 | cut -d'-' -f3)
      OUTPUT_FILENAME="$GAMETITLE ($GAMEREGION) [$GAMEID] (DLC) $GAMETITLEDLCS {$GAMEDLCID}"
      zip -r ../DLC_NoNpDrm/"$OUTPUT_FILENAME".zip "$arg/$argdlc"
    done
  done
}
# inotifywait -mq -e close_write --format %f /dir/to/watch | while IFS= read -r file; do
watchme() {
inotifywait -m -e close_write -e moved_to --format %f ~/Downloads/uploading | while IFS= read -r file; do
  echo $file
  # calibredb add "${@:2}" --library-path "$1"
  calibredb add ~/Downloads/uploading/"$file" --library-path ~/.Calibre/Legends
done
}
alias brash="$HOME/.bin/brash/bin/brash"
alias expose="$HOME/.bin/expose/expose.sh"


## custom w3m hotkeys
export W3M_HOTKEY_OPTIONS=':O'
export W3M_HOTKEY_LINK_BEGIN='f'
export W3M_HOTKEY_RELOAD='r'

alias funkiiu="$HOME/.bin/FunKiiU/FunKiiU.py"


# https://wiki.vifm.info/index.php/How_to_set_shell_working_directory_after_leaving_Vifm
vicd()
{
    local dst="$(command vifmx --choose-dir - "$@")"
    if [ -z "$dst" ]; then
        echo 'Directory picking cancelled/failed'
        return 1
    fi
    cd "$dst"
}


# autostart tmux session or attach
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ] && [ ${UID} != 0 ]; then tmux new-session -A -s main; else tmux attach ; fi &> /dev/null

# cd using a file manager
# https://github.com/dylanaraps/fff/issues/18#issuecomment-451689405
export FFF_CD_FILE=/tmp/.fff_d
# ftf() { fff "$@"; cd "$(< ~/.fff_d)"; }
ff() { fff "$@"; cd "$(< $FFF_CD_FILE)"; }
