" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 2 June, 2019)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

" set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.

set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Selected color scheme

colorscheme dracula

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look

" set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
set statusline="  Hint: %z%= %A %10u:%-7g %15s %6E %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]


" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf zathura %c %i &, apvlv %c, xpdf %c
fileviewer *.pdf pdftotext -nopgbrk %c -

" PostScript
filextype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Djvu
filextype *.djvu
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using mpv}
       \ mpv %f,
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using mpv}
        \ mpv %f &>/dev/null &,
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f &>/dev/null &,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f &>/dev/null &,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
         \ ffprobe -pretty %c 2>&1

" Web
filextype *.html,*.htm
        \ {Open with dwb}
        \ dwb %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype *.html,*.htm links, lynx

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        \ {View in sxiv}
        \ sxiv-rifle %f,
        \ {View in gpicview}
        \ gpicview %c,
        \ {View in shotwell}
        \ shotwell,
" fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
"          \ identify %f

fileviewer *.pdf
    \ vifmimg pdfpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.epub
    \ vifmimg epubpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
    \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
    \ vifmimg videopreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm
    \ vifmimg draw %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.gif
    \ vifmimg gifpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.ico
    \ vifmimg magickpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear
    
fileviewer <audio/*>
    \ vifmimg audio %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear
    
fileviewer <font/*>
    \ vifmimg font %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear




" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent ktorrent %f &
fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.rar unrar v %c

" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
fileviewer *.doc catdoc %c
fileviewer *.docx docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" Sample mappings


" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    " nnoremap yd :!echo %d | xclip %i<cr>
    nnoremap yd :!echo %d | xclip -selection clipboard %i<cr>
    " Yank current file path into the clipboard
    nnoremap yp :!echo %c:p | xclip -selection clipboard %i<cr>
    " Yank current filename into the clipboard
    nnoremap yn :!echo %c | xclip -selection clipboard %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" ------------------------------------------------------------------------------
" My Custom Bindings
" ------------------------------------------------------------------------------
"----- default settings --------------------------------------- {{{
" enable line numbers
set number

" default layout view (single = only, top/bottom = split or sidebyside = vsplit)
only


"-------------------------------------------------------------- }}}
"----- keybindings / rebinds ---------------------------------- {{{
" quit / close current tab
nnoremap q ZZ

" quit all tabs
nnoremap Q :qa<cr>

" Start shell in current directory
" nnoremap s :shell<cr>
nnoremap ss :!tmux split<cr>

" select file and go to next file (ranger style)
nnoremap <space> tj

" rebind pasting (ranger style)
nnoremap pp p

" rebind select all (ranger style)
nnoremap v ggVG

" make file executable
nnoremap cx :!chmod +x %f<cr>

" create new directory and cd into it
nnoremap md :mkcd<space>
nnoremap mk :mkdir<space>
nnoremap mf :!$EDITOR<space>
nnoremap mt :!archive-targz %f<cr>
command! zip zip -r %f.zip %f
nnoremap mz :!archive-zip %f<cr>

command! zip if [ -n "%a" ]; then
           \     zip -r '%a.zip' %f;
           \ fi

" move file to opposite pane but do not overwrite an existing file
"nnoremap mv :move<cr>
map mv :move<cr>

" reset filter
nnoremap | :filter<cr>

" filter search
nnoremap \ :filter!<space>

" toggle preview images (ranger style)
" https://q2a.vifm.info/649/view-pane-always-on-the-right-side
nnoremap zp :if layoutis('only')
                        \|    vsplit
                        \|    execute 'wincmd H'
                        \|    view!
                        \|elseif layoutis('vsplit')
                        \|    execute 'wincmd H'
                        \|    view
                        \|    only
                        \|else
                        \|    execute 'wincmd H'
                        \|    view
                        \|    vsplit
                        \|endif<cr>

" manage trash-can/restore
nnoremap <delete> :!garbage %f<cr>
nnoremap bl :!clear && garbage-list && read<cr>
nnoremap br :!clear && garbage-restore && clear<cr>
nnoremap be :!garbage-empty<cr>

"-------------------------------------------------------------- }}}
"----- directory / tabs --------------------------------------- {{{
" double directory newtab
nnoremap 'g :tabnew | cd ~ ~/Public/dotfiles | :tabname project<cr>
nnoremap 'd :tabnew | cd ~/Public/dotfiles ~/Public/projects | :tabname dotfiles<cr>
nnoremap 'x :tabnew | cd ~/.Torrent ~/.Blackbox | :tabname vids<cr>

" single directory bookmarks
nnoremap ;h :cd<cr>
nnoremap ;; :cd -<cr>
nnoremap ;d :cd ~/Downloads<cr>
nnoremap ;p :cd ~/Pictures<cr>
nnoremap ;b :cd ~/Public<cr>
nnoremap ;t :cd ~/.Torrent<cr>
nnoremap ;x :cd ~/.Blackbox<cr>
nnoremap ;v :cd ~/Videos<cr>
nnoremap ;m :cd /media<cr>
nnoremap ;M :cd ~/Music<cr>
nnoremap ;s :cd ~/.scripts<cr>
nnoremap ;r :cd /run/media/$USER<cr>
nnoremap ;n :cd $XDG_RUNTIME_DIR/gvfs<cr>
nnoremap ;N :cd $XDG_RUNTIME_DIR/sshfs<cr>
nnoremap ;c :sync<cr>

" new tabs and jump to n tabs
nnoremap J :tabprevious<cr>
nnoremap K :tabnext<cr>
nnoremap gn :tabnew<cr>
nnoremap g1 :tabnext 1<cr>
nnoremap g2 :tabnext 2<cr>
nnoremap g3 :tabnext 3<cr>
nnoremap g4 :tabnext 4<cr>
nnoremap g5 :tabnext 5<cr>
nnoremap g6 :tabnext 6<cr>
nnoremap g7 :tabnext 7<cr>
nnoremap g8 :tabnext 8<cr>
nnoremap g9 :tabnext 9<cr>
nnoremap g0 :tabnext 10<cr>


"-------------------------------------------------------------- }}}
"----- external commands -------------------------------------- {{{

" PDF preview scrolling https://github.com/cirala/vifmimg
map > :!vifmimg inc<cr>
map < :!vifmimg dec<cr>

" https://wiki.vifm.info/index.php/How_to_integrate_fzf_for_fuzzy_finding
" command! FZFlocate :set noquickview | :execute 'goto ' fnameescape(term('locate $HOME media | fzf-tmux --height 10 2>/dev/tty'))
command! FZFlocate :set noquickview | :execute 'goto' fnameescape(term('locate $HOME media | fzf -e -i 2>/dev/tty'))
command! FZFfind :set noquickview | :execute 'goto' fnameescape(term('find | fzf -e -i 2>/dev/tty'))
command! FZFfasd :set noquickview | :execute 'goto' fnameescape(term('fasd -al | fzf -e -i 2>/dev/tty'))

nnoremap sl :FZFlocate<cr>
nnoremap sf :FZFfind<cr>
nnoremap sv :FZFfasd<cr>

" mounting devices / remote server
nnoremap ,m :!mountjutsu<cr>
nnoremap ,s :!sambajutsu<cr>
nnoremap ,t :!mount2sshfs-thinkcentre<cr>
nnoremap ,2 :!timecapsule-handler-tc2tb-godmode && read<cr>


" view contents of archive files on opening them
" https://wiki.vifm.info/index.php/How_to_use_atool_to_work_with_archives
filetype *.7z,*.bz2,*.cab,*.cpio,*.deb,*.gz,
        \*.msi,*.pkg,*.rar,*.tar,*.tgz,*.xz,*.zip
        \ als %f | less
" silently extract selected archives in background
command extract aunpack -e %f &>/dev/null &
" map extraction command
nnoremap ax :extract<cr>

"-------------------------------------------------------------- }}}
"----- task-spooler ------------------------------------------- {{{

" copy files to the opposite pane (using rsync)
map ry :!TS_SOCKET=/tmp/fm tsp rsync -r %f %D<cr>

" move files to the opposite pane (using rsync)
map rd :!TS_SOCKET=/tmp/fm tsp rsync -r  %f %D && TS_SOCKET=/tmp/fm tsp -d garbage %f<cr>

" watch task-spooler queue
map rw :!watch TS_SOCKET=/tmp/fm tsp<cr>

" watch task-spooler queue in tmux split
map rt :!tmux split "watch TS_SOCKET=/tmp/fm tsp"<cr>

" task-spooler clear finished jobs from the queue
map rc :!TS_SOCKET=/tmp/fm tsp -C<cr>
"-------------------------------------------------------------- }}}


"" missing vifm
""copy filename only to clipboard
""fix visual select and mv


"----- blank emptys ------------------------------------------- {{{

"-------------------------------------------------------------- }}}
"----- blank emptys ------------------------------------------- {{{

"-------------------------------------------------------------- }}}
"----- blank emptys ------------------------------------------- {{{

"-------------------------------------------------------------- }}}


" default set of view columns (* = cut filename beginning, - = cut filename at the end)
windo set viewcolumns=-{name}.,10{size}.,12{mtime}

"https://superuser.com/questions/634286/vifm-how-do-i-set-the-viewcolumn-option-in-my-vifmrc-so-that-it-applies-to-both
"windo set viewcolumns=-{name}..,6{}.

" brief information about files
" nnoremap <silent> ,b :set viewcolumns=*{name}..,6{}.<cr>
" detailed information about files
" nnoremap <silent> ,d :set viewcolumns=*{name}.,10{perms},12{uname},-7{gname},10{size}.,20{mtime}<cr>

" cycle thru the layouts -- only, vsplit, and split
nnoremap <S-Tab> :if layoutis('only')
                        \|    vsplit
                        \|elseif layoutis('vsplit')
                        \|    split
                        \|else
                        \|    only
                        \|endif<cr>

" toggle between sorting: by name <--> by size <--> by mtime
command! togglesort
         \ :if &sort == '-size,+name'
         \ |    set sort=+mtime
         \ |    echo 'Sorted by modification date'
         \ |elseif &sort == '+name'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+name
         \ |    echo 'Sorted by name'
         \ |endif
nnoremap ,S :togglesort<cr>

" https://github.com/gcmt/dotfiles/blob/master/vifm/vifmrc
" nnoremap S :sort<cr>
" nnoremap ss :set sort=+name<cr>
" nnoremap sS :set sort=-name<cr>
" nnoremap sn :set sort=+name<cr>
" nnoremap sN :set sort=-name<cr>
" nnoremap st :set sort=+type<cr>
" nnoremap sT :set sort=-type<cr>
" nnoremap sz :set sort=+size<cr>
" nnoremap sZ :set sort=-size<cr>
" nnoremap sa :set sort=+atime<cr>
" nnoremap sA :set sort=-atime<cr>
" nnoremap sc :set sort=+ctime<cr>
" nnoremap sC :set sort=-ctime<cr>
" nnoremap sm :set sort=+mtime<cr>
" nnoremap sM :set sort=-mtime<cr>

" open file with alternative registered programs (ranger style)
nnoremap rr :file<space><tab>

" toggle between sorting: by name <--> by size <--> by mtime
command! togglesorter
         \ :if &sort == '-size,+name'
         \ |    set sort=-mtime
         \ |    set viewcolumns=-{name}.,10{size}.,12{mtime}
         \ |    echo 'Sorted by modification date (reverse order)'
         \ |elseif &sort == '+name'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+name
         \ |    set viewcolumns=-{name}..,6{}.
         \ |    echo 'Sorted by name'
         \ |endif
nnoremap go :togglesorter<cr>
"windo set viewcolumns=*{name}.,10{size}.,12{mtime}
"windo set viewcolumns=*{name}.,10{size}.,12{mtime}

" https://github.com/xaizek/dotvifm/blob/master/vifmrc
